; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0CE@HKJHFHIK@?6WARNING?3?5using?5?9h?50?5may?5be?5fast@ ; `string'
PUBLIC	??_C@_01LFCBOECM@?4?$AA@			; `string'
PUBLIC	??_C@_01NBENCBCI@?$CK?$AA@			; `string'
PUBLIC	??_C@_0CN@INEBNJKC@?6WARNING?3?5reaching?5max?5number?5of@ ; `string'
PUBLIC	??_C@_0CE@EGOGEIIO@?6optimization?5finished?0?5?$CDiter?5?$DN?5@ ; `string'
PUBLIC	??_C@_08POCGCMGM@nu?5?$DN?5?$CFf?6?$AA@		; `string'
PUBLIC	??_C@_07KKAOOHGH@C?5?$DN?5?$CFf?6?$AA@		; `string'
PUBLIC	??_C@_0O@POCCPKLM@epsilon?5?$DN?5?$CFf?6?$AA@	; `string'
PUBLIC	??_C@_0BE@OAIILCOL@obj?5?$DN?5?$CFf?0?5rho?5?$DN?5?$CFf?6?$AA@ ; `string'
PUBLIC	??_C@_0BF@BNNBJNOM@nSV?5?$DN?5?$CFd?0?5nBSV?5?$DN?5?$CFd?6?$AA@ ; `string'
PUBLIC	??_C@_0DG@HBKAMNED@Line?5search?5fails?5in?5two?9class?5p@ ; `string'
PUBLIC	??_C@_0EA@EIIAEMPF@Reaching?5maximal?5iterations?5in?5t@ ; `string'
PUBLIC	??_C@_0CF@CILMGJKJ@Exceeds?5max_iter?5in?5multiclass_p@ ; `string'
PUBLIC	??_C@_0HK@IGKEJBGD@Prob?4?5model?5for?5test?5data?3?5targe@ ; `string'
PUBLIC	??_C@_0DK@FLPMDBA@warning?3?5class?5label?5?$CFd?5specifie@ ; `string'
PUBLIC	??_C@_0BA@BBAFECEM@Total?5nSV?5?$DN?5?$CFd?6?$AA@ ; `string'
PUBLIC	??_C@_0GF@JGALFEAO@WARNING?3?5?$CD?5folds?5?$DO?5?$CD?5data?4?5Will?5@ ; `string'
PUBLIC	??_C@_0EB@OGMAKHGK@Model?5doesn?8t?5contain?5informatio@ ; `string'
PUBLIC	??_C@_05BNDIFIEG@c_svc?$AA@			; `string'
PUBLIC	??_C@_06DPJAPAKF@nu_svc?$AA@			; `string'
PUBLIC	??_C@_09OGDDCOCB@one_class?$AA@			; `string'
PUBLIC	??_C@_0M@GBLPMGDD@epsilon_svr?$AA@		; `string'
PUBLIC	??_C@_06GMEJNDLF@nu_svr?$AA@			; `string'
PUBLIC	??_C@_06HPJICMPM@linear?$AA@			; `string'
PUBLIC	??_C@_0L@MGAELPOI@polynomial?$AA@		; `string'
PUBLIC	??_C@_03GHHJJLJL@rbf?$AA@			; `string'
PUBLIC	??_C@_07PHKNIKJE@sigmoid?$AA@			; `string'
PUBLIC	??_C@_0M@CGGEEMOM@precomputed?$AA@		; `string'
PUBLIC	??_C@_01NOFIACDB@w?$AA@				; `string'
PUBLIC	??_C@_01GFHCPBMG@C?$AA@				; `string'
PUBLIC	??_C@_0N@LPOJJDPC@svm_type?5?$CFs?6?$AA@	; `string'
PUBLIC	??_C@_0BA@MCHJCPH@kernel_type?5?$CFs?6?$AA@	; `string'
PUBLIC	??_C@_0L@PHGHBIMI@degree?5?$CFd?6?$AA@		; `string'
PUBLIC	??_C@_09OHCLBMPA@gamma?5?$CFg?6?$AA@		; `string'
PUBLIC	??_C@_09DADCPDAF@coef0?5?$CFg?6?$AA@		; `string'
PUBLIC	??_C@_0N@IEFHKFL@nr_class?5?$CFd?6?$AA@		; `string'
PUBLIC	??_C@_0N@HFGIFOOH@total_sv?5?$CFd?6?$AA@	; `string'
PUBLIC	??_C@_03LLCMKFAE@rho?$AA@			; `string'
PUBLIC	??_C@_03GKLDPGLG@?5?$CFg?$AA@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_05IDCCNNGI@label?$AA@			; `string'
PUBLIC	??_C@_03EBJOKFHF@?5?$CFd?$AA@			; `string'
PUBLIC	??_C@_05HHJGGGN@probA?$AA@			; `string'
PUBLIC	??_C@_05CMFEDFKO@probB?$AA@			; `string'
PUBLIC	??_C@_05EDGNJEFE@nr_sv?$AA@			; `string'
PUBLIC	??_C@_03JFNNDKCH@SV?6?$AA@			; `string'
PUBLIC	??_C@_06FDKNJNLA@?$CF?416g?5?$AA@		; `string'
PUBLIC	??_C@_05OMGAOBIE@0?3?$CFd?5?$AA@		; `string'
PUBLIC	??_C@_08ENDBFEEJ@?$CFd?3?$CF?48g?5?$AA@		; `string'
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
PUBLIC	??_C@_04CFBKLHHN@?$CF80s?$AA@			; `string'
PUBLIC	??_C@_08PLEAEFPK@svm_type?$AA@			; `string'
PUBLIC	??_C@_0BD@PGBIGDDH@unknown?5svm?5type?4?6?$AA@	; `string'
PUBLIC	??_C@_0M@OFKPKILI@kernel_type?$AA@		; `string'
PUBLIC	??_C@_0BK@PECNMOKG@unknown?5kernel?5function?4?6?$AA@ ; `string'
PUBLIC	??_C@_06PJOBIDPN@degree?$AA@			; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd?$AA@			; `string'
PUBLIC	??_C@_05KDLBCAI@gamma?$AA@			; `string'
PUBLIC	??_C@_03DLDNIBIK@?$CFlf?$AA@			; `string'
PUBLIC	??_C@_05EENLEFGE@coef0?$AA@			; `string'
PUBLIC	??_C@_08LFCCDFDG@nr_class?$AA@			; `string'
PUBLIC	??_C@_08IGIDGOJJ@total_sv?$AA@			; `string'
PUBLIC	??_C@_02ICKFEMNG@SV?$AA@			; `string'
PUBLIC	??_C@_0CC@GKEEPFK@unknown?5text?5in?5model?5file?3?5?$FL?$CFs?$FN@ ; `string'
PUBLIC	??_C@_0BB@EICJKGGE@unknown?5svm?5type?$AA@	; `string'
PUBLIC	??_C@_0BE@IGHBPHDC@unknown?5kernel?5type?$AA@	; `string'
PUBLIC	??_C@_09JKEGEBNJ@gamma?5?$DM?50?$AA@		; `string'
PUBLIC	??_C@_0CA@CBNKJINA@degree?5of?5polynomial?5kernel?5?$DM?50?$AA@ ; `string'
PUBLIC	??_C@_0BA@IIGEGFEP@cache_size?5?$DM?$DN?50?$AA@	; `string'
PUBLIC	??_C@_08PIOFHEEC@eps?5?$DM?$DN?50?$AA@		; `string'
PUBLIC	??_C@_06JBEHEPLL@C?5?$DM?$DN?50?$AA@		; `string'
PUBLIC	??_C@_0BC@PNBOOBOD@nu?5?$DM?$DN?50?5or?5nu?5?$DO?51?$AA@ ; `string'
PUBLIC	??_C@_05NJCIELJD@p?5?$DM?50?$AA@		; `string'
PUBLIC	??_C@_0CC@HOJIFMAA@shrinking?5?$CB?$DN?50?5and?5shrinking?5?$CB?$DN?5@ ; `string'
PUBLIC	??_C@_0CG@DDLMKPC@probability?5?$CB?$DN?50?5and?5probability@ ; `string'
PUBLIC	??_C@_0DD@EEEIGAJP@one?9class?5SVM?5probability?5output@ ; `string'
PUBLIC	??_C@_0BL@BPMHDDK@specified?5nu?5is?5infeasible?$AA@ ; `string'
PUBLIC	??_R3SVR_Q@@8					; SVR_Q::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R3ONE_CLASS_Q@@8				; ONE_CLASS_Q::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2QMatrix@@8					; QMatrix::`RTTI Base Class Array'
PUBLIC	??_R2Solver@@8					; Solver::`RTTI Base Class Array'
PUBLIC	??_R4Kernel@@6B@				; Kernel::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVSVC_Q@@@8				; SVC_Q `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@EA@Solver_NU@@8			; Solver_NU::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4SVC_Q@@6B@					; SVC_Q::`RTTI Complete Object Locator'
PUBLIC	??_R3SVC_Q@@8					; SVC_Q::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_7SVC_Q@@6B@					; SVC_Q::`vftable'
PUBLIC	??_R1A@?0A@EA@SVC_Q@@8				; SVC_Q::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7Kernel@@6B@					; Kernel::`vftable'
PUBLIC	??_R4QMatrix@@6B@				; QMatrix::`RTTI Complete Object Locator'
PUBLIC	??_R4Solver@@6B@				; Solver::`RTTI Complete Object Locator'
PUBLIC	??_R2SVR_Q@@8					; SVR_Q::`RTTI Base Class Array'
PUBLIC	??_R2Kernel@@8					; Kernel::`RTTI Base Class Array'
PUBLIC	??_7QMatrix@@6B@				; QMatrix::`vftable'
PUBLIC	??_R1A@?0A@EA@QMatrix@@8			; QMatrix::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7SVR_Q@@6B@					; SVR_Q::`vftable'
PUBLIC	??_R4Solver_NU@@6B@				; Solver_NU::`RTTI Complete Object Locator'
PUBLIC	??_7Solver_NU@@6B@				; Solver_NU::`vftable'
PUBLIC	??_R4ONE_CLASS_Q@@6B@				; ONE_CLASS_Q::`RTTI Complete Object Locator'
PUBLIC	??_R3Kernel@@8					; Kernel::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_7ONE_CLASS_Q@@6B@				; ONE_CLASS_Q::`vftable'
PUBLIC	??_R0?AVSolver_NU@@@8				; Solver_NU `RTTI Type Descriptor'
PUBLIC	??_R0?AVQMatrix@@@8				; QMatrix `RTTI Type Descriptor'
PUBLIC	??_R4SVR_Q@@6B@					; SVR_Q::`RTTI Complete Object Locator'
PUBLIC	??_7Solver@@6B@					; Solver::`vftable'
PUBLIC	??_R0?AVKernel@@@8				; Kernel `RTTI Type Descriptor'
PUBLIC	??_R2Solver_NU@@8				; Solver_NU::`RTTI Base Class Array'
PUBLIC	??_R3Solver@@8					; Solver::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R1A@?0A@EA@ONE_CLASS_Q@@8			; ONE_CLASS_Q::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R2ONE_CLASS_Q@@8				; ONE_CLASS_Q::`RTTI Base Class Array'
PUBLIC	??_R0?AVONE_CLASS_Q@@@8				; ONE_CLASS_Q `RTTI Type Descriptor'
PUBLIC	??_R3Solver_NU@@8				; Solver_NU::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R3QMatrix@@8					; QMatrix::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVSolver@@@8				; Solver `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@EA@Solver@@8				; Solver::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R2SVC_Q@@8					; SVC_Q::`RTTI Base Class Array'
PUBLIC	??_R0?AVSVR_Q@@@8				; SVR_Q `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@EA@Kernel@@8				; Kernel::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@SVR_Q@@8				; SVR_Q::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__imp_??2@YAPEAX_K@Z:PROC
EXTRN	__imp_getc:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	__imp_fseek:PROC
EXTRN	__imp__HUGE:QWORD
EXTRN	__imp_setlocale:PROC
EXTRN	__imp_ftell:PROC
EXTRN	__imp_ferror:PROC
EXTRN	__imp_??3@YAXPEAX@Z:PROC
EXTRN	__imp__purecall:PROC
EXTRN	__imp_rand:PROC
EXTRN	__imp_strdup:PROC
EXTRN	__imp_fflush:PROC
EXTRN	__imp_fputs:PROC
EXTRN	__imp_calloc:PROC
EXTRN	__imp_vsprintf:PROC
EXTRN	__imp_fscanf:PROC
EXTRN	_purecall:PROC
line	DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_R1A@?0A@EA@SVR_Q@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SVR_Q@@8 DD imagerel ??_R0?AVSVR_Q@@@8	; SVR_Q::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3SVR_Q@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Kernel@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Kernel@@8 DD imagerel ??_R0?AVKernel@@@8	; Kernel::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3Kernel@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSVR_Q@@@8
data$r	SEGMENT
??_R0?AVSVR_Q@@@8 DQ FLAT:??_7type_info@@6B@		; SVR_Q `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVSVR_Q@@', 00H
data$r	ENDS
;	COMDAT ??_R2SVC_Q@@8
rdata$r	SEGMENT
??_R2SVC_Q@@8 DD imagerel ??_R1A@?0A@EA@SVC_Q@@8	; SVC_Q::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@Kernel@@8
	DD	imagerel ??_R1A@?0A@EA@QMatrix@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Solver@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Solver@@8 DD imagerel ??_R0?AVSolver@@@8	; Solver::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3Solver@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSolver@@@8
data$r	SEGMENT
??_R0?AVSolver@@@8 DQ FLAT:??_7type_info@@6B@		; Solver `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVSolver@@', 00H
data$r	ENDS
;	COMDAT ??_R3QMatrix@@8
rdata$r	SEGMENT
??_R3QMatrix@@8 DD 00H					; QMatrix::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2QMatrix@@8
rdata$r	ENDS
;	COMDAT ??_R3Solver_NU@@8
rdata$r	SEGMENT
??_R3Solver_NU@@8 DD 00H				; Solver_NU::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2Solver_NU@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVONE_CLASS_Q@@@8
data$r	SEGMENT
??_R0?AVONE_CLASS_Q@@@8 DQ FLAT:??_7type_info@@6B@	; ONE_CLASS_Q `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVONE_CLASS_Q@@', 00H
data$r	ENDS
;	COMDAT ??_R2ONE_CLASS_Q@@8
rdata$r	SEGMENT
??_R2ONE_CLASS_Q@@8 DD imagerel ??_R1A@?0A@EA@ONE_CLASS_Q@@8 ; ONE_CLASS_Q::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@Kernel@@8
	DD	imagerel ??_R1A@?0A@EA@QMatrix@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ONE_CLASS_Q@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ONE_CLASS_Q@@8 DD imagerel ??_R0?AVONE_CLASS_Q@@@8 ; ONE_CLASS_Q::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3ONE_CLASS_Q@@8
rdata$r	ENDS
;	COMDAT ??_R3Solver@@8
rdata$r	SEGMENT
??_R3Solver@@8 DD 00H					; Solver::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2Solver@@8
rdata$r	ENDS
;	COMDAT ??_R2Solver_NU@@8
rdata$r	SEGMENT
??_R2Solver_NU@@8 DD imagerel ??_R1A@?0A@EA@Solver_NU@@8 ; Solver_NU::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@Solver@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R0?AVKernel@@@8
data$r	SEGMENT
??_R0?AVKernel@@@8 DQ FLAT:??_7type_info@@6B@		; Kernel `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVKernel@@', 00H
data$r	ENDS
;	COMDAT ??_7Solver@@6B@
CONST	SEGMENT
??_7Solver@@6B@ DQ FLAT:??_R4Solver@@6B@		; Solver::`vftable'
	DQ	FLAT:??_ESolver@@UEAAPEAXI@Z
	DQ	FLAT:?select_working_set@Solver@@MEAAHAEAH0@Z
	DQ	FLAT:?calculate_rho@Solver@@MEAANXZ
	DQ	FLAT:?do_shrinking@Solver@@MEAAXXZ
CONST	ENDS
;	COMDAT ??_R4SVR_Q@@6B@
rdata$r	SEGMENT
??_R4SVR_Q@@6B@ DD 01H					; SVR_Q::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVSVR_Q@@@8
	DD	imagerel ??_R3SVR_Q@@8
	DD	imagerel ??_R4SVR_Q@@6B@
rdata$r	ENDS
;	COMDAT ??_R0?AVQMatrix@@@8
data$r	SEGMENT
??_R0?AVQMatrix@@@8 DQ FLAT:??_7type_info@@6B@		; QMatrix `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVQMatrix@@', 00H
data$r	ENDS
;	COMDAT ??_R0?AVSolver_NU@@@8
data$r	SEGMENT
??_R0?AVSolver_NU@@@8 DQ FLAT:??_7type_info@@6B@	; Solver_NU `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVSolver_NU@@', 00H
data$r	ENDS
;	COMDAT ??_7ONE_CLASS_Q@@6B@
CONST	SEGMENT
??_7ONE_CLASS_Q@@6B@ DQ FLAT:??_R4ONE_CLASS_Q@@6B@	; ONE_CLASS_Q::`vftable'
	DQ	FLAT:?get_Q@ONE_CLASS_Q@@UEBAPEAMHH@Z
	DQ	FLAT:?get_QD@ONE_CLASS_Q@@UEBAPEANXZ
	DQ	FLAT:?swap_index@ONE_CLASS_Q@@UEBAXHH@Z
	DQ	FLAT:??_EONE_CLASS_Q@@UEAAPEAXI@Z
CONST	ENDS
;	COMDAT ??_R3Kernel@@8
rdata$r	SEGMENT
??_R3Kernel@@8 DD 00H					; Kernel::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2Kernel@@8
rdata$r	ENDS
;	COMDAT ??_R4ONE_CLASS_Q@@6B@
rdata$r	SEGMENT
??_R4ONE_CLASS_Q@@6B@ DD 01H				; ONE_CLASS_Q::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVONE_CLASS_Q@@@8
	DD	imagerel ??_R3ONE_CLASS_Q@@8
	DD	imagerel ??_R4ONE_CLASS_Q@@6B@
rdata$r	ENDS
;	COMDAT ??_7Solver_NU@@6B@
CONST	SEGMENT
??_7Solver_NU@@6B@ DQ FLAT:??_R4Solver_NU@@6B@		; Solver_NU::`vftable'
	DQ	FLAT:??_ESolver_NU@@UEAAPEAXI@Z
	DQ	FLAT:?select_working_set@Solver_NU@@EEAAHAEAH0@Z
	DQ	FLAT:?calculate_rho@Solver_NU@@EEAANXZ
	DQ	FLAT:?do_shrinking@Solver_NU@@EEAAXXZ
CONST	ENDS
;	COMDAT ??_R4Solver_NU@@6B@
rdata$r	SEGMENT
??_R4Solver_NU@@6B@ DD 01H				; Solver_NU::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVSolver_NU@@@8
	DD	imagerel ??_R3Solver_NU@@8
	DD	imagerel ??_R4Solver_NU@@6B@
rdata$r	ENDS
;	COMDAT ??_7SVR_Q@@6B@
CONST	SEGMENT
??_7SVR_Q@@6B@ DQ FLAT:??_R4SVR_Q@@6B@			; SVR_Q::`vftable'
	DQ	FLAT:?get_Q@SVR_Q@@UEBAPEAMHH@Z
	DQ	FLAT:?get_QD@SVR_Q@@UEBAPEANXZ
	DQ	FLAT:?swap_index@SVR_Q@@UEBAXHH@Z
	DQ	FLAT:??_ESVR_Q@@UEAAPEAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@QMatrix@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@QMatrix@@8 DD imagerel ??_R0?AVQMatrix@@@8 ; QMatrix::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3QMatrix@@8
rdata$r	ENDS
;	COMDAT ??_7QMatrix@@6B@
CONST	SEGMENT
??_7QMatrix@@6B@ DQ FLAT:??_R4QMatrix@@6B@		; QMatrix::`vftable'
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
	DQ	FLAT:??_EQMatrix@@UEAAPEAXI@Z
CONST	ENDS
;	COMDAT ??_R2Kernel@@8
rdata$r	SEGMENT
??_R2Kernel@@8 DD imagerel ??_R1A@?0A@EA@Kernel@@8	; Kernel::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@QMatrix@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R2SVR_Q@@8
rdata$r	SEGMENT
??_R2SVR_Q@@8 DD imagerel ??_R1A@?0A@EA@SVR_Q@@8	; SVR_Q::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@Kernel@@8
	DD	imagerel ??_R1A@?0A@EA@QMatrix@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R4Solver@@6B@
rdata$r	SEGMENT
??_R4Solver@@6B@ DD 01H					; Solver::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVSolver@@@8
	DD	imagerel ??_R3Solver@@8
	DD	imagerel ??_R4Solver@@6B@
rdata$r	ENDS
;	COMDAT ??_R4QMatrix@@6B@
rdata$r	SEGMENT
??_R4QMatrix@@6B@ DD 01H				; QMatrix::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVQMatrix@@@8
	DD	imagerel ??_R3QMatrix@@8
	DD	imagerel ??_R4QMatrix@@6B@
rdata$r	ENDS
;	COMDAT ??_7Kernel@@6B@
CONST	SEGMENT
??_7Kernel@@6B@ DQ FLAT:??_R4Kernel@@6B@		; Kernel::`vftable'
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
	DQ	FLAT:?swap_index@Kernel@@UEBAXHH@Z
	DQ	FLAT:??_EKernel@@UEAAPEAXI@Z
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@SVC_Q@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SVC_Q@@8 DD imagerel ??_R0?AVSVC_Q@@@8	; SVC_Q::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3SVC_Q@@8
rdata$r	ENDS
;	COMDAT ??_7SVC_Q@@6B@
CONST	SEGMENT
??_7SVC_Q@@6B@ DQ FLAT:??_R4SVC_Q@@6B@			; SVC_Q::`vftable'
	DQ	FLAT:?get_Q@SVC_Q@@UEBAPEAMHH@Z
	DQ	FLAT:?get_QD@SVC_Q@@UEBAPEANXZ
	DQ	FLAT:?swap_index@SVC_Q@@UEBAXHH@Z
	DQ	FLAT:??_ESVC_Q@@UEAAPEAXI@Z
CONST	ENDS
;	COMDAT ??_R3SVC_Q@@8
rdata$r	SEGMENT
??_R3SVC_Q@@8 DD 00H					; SVC_Q::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2SVC_Q@@8
rdata$r	ENDS
;	COMDAT ??_R4SVC_Q@@6B@
rdata$r	SEGMENT
??_R4SVC_Q@@6B@ DD 01H					; SVC_Q::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVSVC_Q@@@8
	DD	imagerel ??_R3SVC_Q@@8
	DD	imagerel ??_R4SVC_Q@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Solver_NU@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Solver_NU@@8 DD imagerel ??_R0?AVSolver_NU@@@8 ; Solver_NU::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3Solver_NU@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSVC_Q@@@8
data$r	SEGMENT
??_R0?AVSVC_Q@@@8 DQ FLAT:??_7type_info@@6B@		; SVC_Q `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVSVC_Q@@', 00H
data$r	ENDS
;	COMDAT ??_R4Kernel@@6B@
rdata$r	SEGMENT
??_R4Kernel@@6B@ DD 01H					; Kernel::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVKernel@@@8
	DD	imagerel ??_R3Kernel@@8
	DD	imagerel ??_R4Kernel@@6B@
rdata$r	ENDS
;	COMDAT ??_R2Solver@@8
rdata$r	SEGMENT
??_R2Solver@@8 DD imagerel ??_R1A@?0A@EA@Solver@@8	; Solver::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R2QMatrix@@8
rdata$r	SEGMENT
??_R2QMatrix@@8 DD imagerel ??_R1A@?0A@EA@QMatrix@@8	; QMatrix::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3ONE_CLASS_Q@@8
rdata$r	SEGMENT
??_R3ONE_CLASS_Q@@8 DD 00H				; ONE_CLASS_Q::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2ONE_CLASS_Q@@8
rdata$r	ENDS
;	COMDAT ??_R3SVR_Q@@8
rdata$r	SEGMENT
??_R3SVR_Q@@8 DD 00H					; SVR_Q::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2SVR_Q@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BL@BPMHDDK@specified?5nu?5is?5infeasible?$AA@
CONST	SEGMENT
??_C@_0BL@BPMHDDK@specified?5nu?5is?5infeasible?$AA@ DB 'specified nu is '
	DB	'infeasible', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@EEEIGAJP@one?9class?5SVM?5probability?5output@
CONST	SEGMENT
??_C@_0DD@EEEIGAJP@one?9class?5SVM?5probability?5output@ DB 'one-class SV'
	DB	'M probability output not supported yet', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@DDLMKPC@probability?5?$CB?$DN?50?5and?5probability@
CONST	SEGMENT
??_C@_0CG@DDLMKPC@probability?5?$CB?$DN?50?5and?5probability@ DB 'probabi'
	DB	'lity != 0 and probability != 1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@HOJIFMAA@shrinking?5?$CB?$DN?50?5and?5shrinking?5?$CB?$DN?5@
CONST	SEGMENT
??_C@_0CC@HOJIFMAA@shrinking?5?$CB?$DN?50?5and?5shrinking?5?$CB?$DN?5@ DB 's'
	DB	'hrinking != 0 and shrinking != 1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05NJCIELJD@p?5?$DM?50?$AA@
CONST	SEGMENT
??_C@_05NJCIELJD@p?5?$DM?50?$AA@ DB 'p < 0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PNBOOBOD@nu?5?$DM?$DN?50?5or?5nu?5?$DO?51?$AA@
CONST	SEGMENT
??_C@_0BC@PNBOOBOD@nu?5?$DM?$DN?50?5or?5nu?5?$DO?51?$AA@ DB 'nu <= 0 or n'
	DB	'u > 1', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06JBEHEPLL@C?5?$DM?$DN?50?$AA@
CONST	SEGMENT
??_C@_06JBEHEPLL@C?5?$DM?$DN?50?$AA@ DB 'C <= 0', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PIOFHEEC@eps?5?$DM?$DN?50?$AA@
CONST	SEGMENT
??_C@_08PIOFHEEC@eps?5?$DM?$DN?50?$AA@ DB 'eps <= 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IIGEGFEP@cache_size?5?$DM?$DN?50?$AA@
CONST	SEGMENT
??_C@_0BA@IIGEGFEP@cache_size?5?$DM?$DN?50?$AA@ DB 'cache_size <= 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@CBNKJINA@degree?5of?5polynomial?5kernel?5?$DM?50?$AA@
CONST	SEGMENT
??_C@_0CA@CBNKJINA@degree?5of?5polynomial?5kernel?5?$DM?50?$AA@ DB 'degre'
	DB	'e of polynomial kernel < 0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09JKEGEBNJ@gamma?5?$DM?50?$AA@
CONST	SEGMENT
??_C@_09JKEGEBNJ@gamma?5?$DM?50?$AA@ DB 'gamma < 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IGHBPHDC@unknown?5kernel?5type?$AA@
CONST	SEGMENT
??_C@_0BE@IGHBPHDC@unknown?5kernel?5type?$AA@ DB 'unknown kernel type', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EICJKGGE@unknown?5svm?5type?$AA@
CONST	SEGMENT
??_C@_0BB@EICJKGGE@unknown?5svm?5type?$AA@ DB 'unknown svm type', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@GKEEPFK@unknown?5text?5in?5model?5file?3?5?$FL?$CFs?$FN@
CONST	SEGMENT
??_C@_0CC@GKEEPFK@unknown?5text?5in?5model?5file?3?5?$FL?$CFs?$FN@ DB 'un'
	DB	'known text in model file: [%s]', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02ICKFEMNG@SV?$AA@
CONST	SEGMENT
??_C@_02ICKFEMNG@SV?$AA@ DB 'SV', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08IGIDGOJJ@total_sv?$AA@
CONST	SEGMENT
??_C@_08IGIDGOJJ@total_sv?$AA@ DB 'total_sv', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08LFCCDFDG@nr_class?$AA@
CONST	SEGMENT
??_C@_08LFCCDFDG@nr_class?$AA@ DB 'nr_class', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05EENLEFGE@coef0?$AA@
CONST	SEGMENT
??_C@_05EENLEFGE@coef0?$AA@ DB 'coef0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DLDNIBIK@?$CFlf?$AA@
CONST	SEGMENT
??_C@_03DLDNIBIK@?$CFlf?$AA@ DB '%lf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KDLBCAI@gamma?$AA@
CONST	SEGMENT
??_C@_05KDLBCAI@gamma?$AA@ DB 'gamma', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd?$AA@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd?$AA@ DB '%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PJOBIDPN@degree?$AA@
CONST	SEGMENT
??_C@_06PJOBIDPN@degree?$AA@ DB 'degree', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@PECNMOKG@unknown?5kernel?5function?4?6?$AA@
CONST	SEGMENT
??_C@_0BK@PECNMOKG@unknown?5kernel?5function?4?6?$AA@ DB 'unknown kernel '
	DB	'function.', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OFKPKILI@kernel_type?$AA@
CONST	SEGMENT
??_C@_0M@OFKPKILI@kernel_type?$AA@ DB 'kernel_type', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PGBIGDDH@unknown?5svm?5type?4?6?$AA@
CONST	SEGMENT
??_C@_0BD@PGBIGDDH@unknown?5svm?5type?4?6?$AA@ DB 'unknown svm type.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08PLEAEFPK@svm_type?$AA@
CONST	SEGMENT
??_C@_08PLEAEFPK@svm_type?$AA@ DB 'svm_type', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04CFBKLHHN@?$CF80s?$AA@
CONST	SEGMENT
??_C@_04CFBKLHHN@?$CF80s?$AA@ DB '%80s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08ENDBFEEJ@?$CFd?3?$CF?48g?5?$AA@
CONST	SEGMENT
??_C@_08ENDBFEEJ@?$CFd?3?$CF?48g?5?$AA@ DB '%d:%.8g ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05OMGAOBIE@0?3?$CFd?5?$AA@
CONST	SEGMENT
??_C@_05OMGAOBIE@0?3?$CFd?5?$AA@ DB '0:%d ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDKNJNLA@?$CF?416g?5?$AA@
CONST	SEGMENT
??_C@_06FDKNJNLA@?$CF?416g?5?$AA@ DB '%.16g ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03JFNNDKCH@SV?6?$AA@
CONST	SEGMENT
??_C@_03JFNNDKCH@SV?6?$AA@ DB 'SV', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EDGNJEFE@nr_sv?$AA@
CONST	SEGMENT
??_C@_05EDGNJEFE@nr_sv?$AA@ DB 'nr_sv', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CMFEDFKO@probB?$AA@
CONST	SEGMENT
??_C@_05CMFEDFKO@probB?$AA@ DB 'probB', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HHJGGGN@probA?$AA@
CONST	SEGMENT
??_C@_05HHJGGGN@probA?$AA@ DB 'probA', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03EBJOKFHF@?5?$CFd?$AA@
CONST	SEGMENT
??_C@_03EBJOKFHF@?5?$CFd?$AA@ DB ' %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IDCCNNGI@label?$AA@
CONST	SEGMENT
??_C@_05IDCCNNGI@label?$AA@ DB 'label', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03GKLDPGLG@?5?$CFg?$AA@
CONST	SEGMENT
??_C@_03GKLDPGLG@?5?$CFg?$AA@ DB ' %g', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03LLCMKFAE@rho?$AA@
CONST	SEGMENT
??_C@_03LLCMKFAE@rho?$AA@ DB 'rho', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HFGIFOOH@total_sv?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0N@HFGIFOOH@total_sv?5?$CFd?6?$AA@ DB 'total_sv %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IEFHKFL@nr_class?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0N@IEFHKFL@nr_class?5?$CFd?6?$AA@ DB 'nr_class %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09DADCPDAF@coef0?5?$CFg?6?$AA@
CONST	SEGMENT
??_C@_09DADCPDAF@coef0?5?$CFg?6?$AA@ DB 'coef0 %g', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09OHCLBMPA@gamma?5?$CFg?6?$AA@
CONST	SEGMENT
??_C@_09OHCLBMPA@gamma?5?$CFg?6?$AA@ DB 'gamma %g', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PHGHBIMI@degree?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0L@PHGHBIMI@degree?5?$CFd?6?$AA@ DB 'degree %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MCHJCPH@kernel_type?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BA@MCHJCPH@kernel_type?5?$CFs?6?$AA@ DB 'kernel_type %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LPOJJDPC@svm_type?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0N@LPOJJDPC@svm_type?5?$CFs?6?$AA@ DB 'svm_type %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C?$AA@
CONST	SEGMENT
??_C@_01GFHCPBMG@C?$AA@ DB 'C', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01NOFIACDB@w?$AA@
CONST	SEGMENT
??_C@_01NOFIACDB@w?$AA@ DB 'w', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CGGEEMOM@precomputed?$AA@
CONST	SEGMENT
??_C@_0M@CGGEEMOM@precomputed?$AA@ DB 'precomputed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07PHKNIKJE@sigmoid?$AA@
CONST	SEGMENT
??_C@_07PHKNIKJE@sigmoid?$AA@ DB 'sigmoid', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03GHHJJLJL@rbf?$AA@
CONST	SEGMENT
??_C@_03GHHJJLJL@rbf?$AA@ DB 'rbf', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MGAELPOI@polynomial?$AA@
CONST	SEGMENT
??_C@_0L@MGAELPOI@polynomial?$AA@ DB 'polynomial', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HPJICMPM@linear?$AA@
CONST	SEGMENT
??_C@_06HPJICMPM@linear?$AA@ DB 'linear', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GMEJNDLF@nu_svr?$AA@
CONST	SEGMENT
??_C@_06GMEJNDLF@nu_svr?$AA@ DB 'nu_svr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GBLPMGDD@epsilon_svr?$AA@
CONST	SEGMENT
??_C@_0M@GBLPMGDD@epsilon_svr?$AA@ DB 'epsilon_svr', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09OGDDCOCB@one_class?$AA@
CONST	SEGMENT
??_C@_09OGDDCOCB@one_class?$AA@ DB 'one_class', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06DPJAPAKF@nu_svc?$AA@
CONST	SEGMENT
??_C@_06DPJAPAKF@nu_svc?$AA@ DB 'nu_svc', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BNDIFIEG@c_svc?$AA@
CONST	SEGMENT
??_C@_05BNDIFIEG@c_svc?$AA@ DB 'c_svc', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@OGMAKHGK@Model?5doesn?8t?5contain?5informatio@
CONST	SEGMENT
??_C@_0EB@OGMAKHGK@Model?5doesn?8t?5contain?5informatio@ DB 'Model doesn'''
	DB	't contain information for SVR probability inference', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GF@JGALFEAO@WARNING?3?5?$CD?5folds?5?$DO?5?$CD?5data?4?5Will?5@
CONST	SEGMENT
??_C@_0GF@JGALFEAO@WARNING?3?5?$CD?5folds?5?$DO?5?$CD?5data?4?5Will?5@ DB 'W'
	DB	'ARNING: # folds > # data. Will use # folds = # data instead ('
	DB	'i.e., leave-one-out cross validation)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BBAFECEM@Total?5nSV?5?$DN?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BA@BBAFECEM@Total?5nSV?5?$DN?5?$CFd?6?$AA@ DB 'Total nSV = %d', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@FLPMDBA@warning?3?5class?5label?5?$CFd?5specifie@
CONST	SEGMENT
??_C@_0DK@FLPMDBA@warning?3?5class?5label?5?$CFd?5specifie@ DB 'warning: '
	DB	'class label %d specified in weight is not found', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0HK@IGKEJBGD@Prob?4?5model?5for?5test?5data?3?5targe@
CONST	SEGMENT
??_C@_0HK@IGKEJBGD@Prob?4?5model?5for?5test?5data?3?5targe@ DB 'Prob. mod'
	DB	'el for test data: target value = predicted value + z,', 0aH, 'z'
	DB	': Laplace distribution e^(-|z|/sigma)/(2sigma),sigma= %g', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@CILMGJKJ@Exceeds?5max_iter?5in?5multiclass_p@
CONST	SEGMENT
??_C@_0CF@CILMGJKJ@Exceeds?5max_iter?5in?5multiclass_p@ DB 'Exceeds max_i'
	DB	'ter in multiclass_prob', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@EIIAEMPF@Reaching?5maximal?5iterations?5in?5t@
CONST	SEGMENT
??_C@_0EA@EIIAEMPF@Reaching?5maximal?5iterations?5in?5t@ DB 'Reaching max'
	DB	'imal iterations in two-class probability estimates', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@HBKAMNED@Line?5search?5fails?5in?5two?9class?5p@
CONST	SEGMENT
??_C@_0DG@HBKAMNED@Line?5search?5fails?5in?5two?9class?5p@ DB 'Line searc'
	DB	'h fails in two-class probability estimates', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BNNBJNOM@nSV?5?$DN?5?$CFd?0?5nBSV?5?$DN?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BF@BNNBJNOM@nSV?5?$DN?5?$CFd?0?5nBSV?5?$DN?5?$CFd?6?$AA@ DB 'nSV ='
	DB	' %d, nBSV = %d', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OAIILCOL@obj?5?$DN?5?$CFf?0?5rho?5?$DN?5?$CFf?6?$AA@
CONST	SEGMENT
??_C@_0BE@OAIILCOL@obj?5?$DN?5?$CFf?0?5rho?5?$DN?5?$CFf?6?$AA@ DB 'obj = '
	DB	'%f, rho = %f', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@POCCPKLM@epsilon?5?$DN?5?$CFf?6?$AA@
CONST	SEGMENT
??_C@_0O@POCCPKLM@epsilon?5?$DN?5?$CFf?6?$AA@ DB 'epsilon = %f', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07KKAOOHGH@C?5?$DN?5?$CFf?6?$AA@
CONST	SEGMENT
??_C@_07KKAOOHGH@C?5?$DN?5?$CFf?6?$AA@ DB 'C = %f', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08POCGCMGM@nu?5?$DN?5?$CFf?6?$AA@
CONST	SEGMENT
??_C@_08POCGCMGM@nu?5?$DN?5?$CFf?6?$AA@ DB 'nu = %f', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@EGOGEIIO@?6optimization?5finished?0?5?$CDiter?5?$DN?5@
CONST	SEGMENT
??_C@_0CE@EGOGEIIO@?6optimization?5finished?0?5?$CDiter?5?$DN?5@ DB 0aH, 'o'
	DB	'ptimization finished, #iter = %d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@INEBNJKC@?6WARNING?3?5reaching?5max?5number?5of@
CONST	SEGMENT
??_C@_0CN@INEBNJKC@?6WARNING?3?5reaching?5max?5number?5of@ DB 0aH, 'WARNI'
	DB	'NG: reaching max number of iterations', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01NBENCBCI@?$CK?$AA@
CONST	SEGMENT
??_C@_01NBENCBCI@?$CK?$AA@ DB '*', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LFCBOECM@?4?$AA@
CONST	SEGMENT
??_C@_01LFCBOECM@?4?$AA@ DB '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@HKJHFHIK@?6WARNING?3?5using?5?9h?50?5may?5be?5fast@
CONST	SEGMENT
??_C@_0CE@HKJHFHIK@?6WARNING?3?5using?5?9h?50?5may?5be?5fast@ DB 0aH, 'WA'
	DB	'RNING: using -h 0 may be faster', 0aH, 00H	; `string'
svm_print_string DQ FLAT:?print_string_stdout@@YAXPEBD@Z
PUBLIC	??_GSVR_Q@@UEAAPEAXI@Z				; SVR_Q::`scalar deleting destructor'
PUBLIC	??1SVR_Q@@UEAA@XZ				; SVR_Q::~SVR_Q
PUBLIC	?get_QD@SVR_Q@@UEBAPEANXZ			; SVR_Q::get_QD
PUBLIC	?get_Q@SVR_Q@@UEBAPEAMHH@Z			; SVR_Q::get_Q
PUBLIC	?swap_index@SVR_Q@@UEBAXHH@Z			; SVR_Q::swap_index
PUBLIC	??_GONE_CLASS_Q@@UEAAPEAXI@Z			; ONE_CLASS_Q::`scalar deleting destructor'
PUBLIC	??1ONE_CLASS_Q@@UEAA@XZ				; ONE_CLASS_Q::~ONE_CLASS_Q
PUBLIC	?swap_index@ONE_CLASS_Q@@UEBAXHH@Z		; ONE_CLASS_Q::swap_index
PUBLIC	?get_QD@ONE_CLASS_Q@@UEBAPEANXZ			; ONE_CLASS_Q::get_QD
PUBLIC	?get_Q@ONE_CLASS_Q@@UEBAPEAMHH@Z		; ONE_CLASS_Q::get_Q
PUBLIC	??_GCache@@QEAAPEAXI@Z				; Cache::`scalar deleting destructor'
PUBLIC	??_GSVC_Q@@UEAAPEAXI@Z				; SVC_Q::`scalar deleting destructor'
PUBLIC	??1SVC_Q@@UEAA@XZ				; SVC_Q::~SVC_Q
PUBLIC	?swap_index@SVC_Q@@UEBAXHH@Z			; SVC_Q::swap_index
PUBLIC	?get_QD@SVC_Q@@UEBAPEANXZ			; SVC_Q::get_QD
PUBLIC	?get_Q@SVC_Q@@UEBAPEAMHH@Z			; SVC_Q::get_Q
PUBLIC	?calculate_rho@Solver_NU@@EEAANXZ		; Solver_NU::calculate_rho
PUBLIC	?do_shrinking@Solver_NU@@EEAAXXZ		; Solver_NU::do_shrinking
PUBLIC	?be_shrunk@Solver_NU@@AEAA_NHNNNN@Z		; Solver_NU::be_shrunk
PUBLIC	?select_working_set@Solver_NU@@EEAAHAEAH0@Z	; Solver_NU::select_working_set
PUBLIC	??1Solver_NU@@UEAA@XZ				; Solver_NU::~Solver_NU
PUBLIC	??_GSolver_NU@@UEAAPEAXI@Z			; Solver_NU::`scalar deleting destructor'
PUBLIC	?calculate_rho@Solver@@MEAANXZ			; Solver::calculate_rho
PUBLIC	?do_shrinking@Solver@@MEAAXXZ			; Solver::do_shrinking
PUBLIC	?be_shrunk@Solver@@AEAA_NHNN@Z			; Solver::be_shrunk
PUBLIC	?select_working_set@Solver@@MEAAHAEAH0@Z	; Solver::select_working_set
PUBLIC	?reconstruct_gradient@Solver@@IEAAXXZ		; Solver::reconstruct_gradient
PUBLIC	?swap_index@Solver@@IEAAXHH@Z			; Solver::swap_index
PUBLIC	??_GSolver@@UEAAPEAXI@Z				; Solver::`scalar deleting destructor'
PUBLIC	?is_free@Solver@@IEAA_NH@Z			; Solver::is_free
PUBLIC	?is_lower_bound@Solver@@IEAA_NH@Z		; Solver::is_lower_bound
PUBLIC	?is_upper_bound@Solver@@IEAA_NH@Z		; Solver::is_upper_bound
PUBLIC	??1Solver@@UEAA@XZ				; Solver::~Solver
PUBLIC	?dot@Kernel@@CANAEBUsvm_node@@0@Z		; Kernel::dot
PUBLIC	??1Kernel@@UEAA@XZ				; Kernel::~Kernel
PUBLIC	??_GKernel@@UEAAPEAXI@Z				; Kernel::`scalar deleting destructor'
PUBLIC	?kernel_precomputed@Kernel@@AEBANHH@Z		; Kernel::kernel_precomputed
PUBLIC	?kernel_sigmoid@Kernel@@AEBANHH@Z		; Kernel::kernel_sigmoid
PUBLIC	?kernel_rbf@Kernel@@AEBANHH@Z			; Kernel::kernel_rbf
PUBLIC	?kernel_poly@Kernel@@AEBANHH@Z			; Kernel::kernel_poly
PUBLIC	?kernel_linear@Kernel@@AEBANHH@Z		; Kernel::kernel_linear
PUBLIC	?swap_index@Kernel@@UEBAXHH@Z			; Kernel::swap_index
PUBLIC	??_GQMatrix@@UEAAPEAXI@Z			; QMatrix::`scalar deleting destructor'
PUBLIC	??1QMatrix@@UEAA@XZ				; QMatrix::~QMatrix
PUBLIC	?swap_index@Cache@@QEAAXHH@Z			; Cache::swap_index
PUBLIC	?get_data@Cache@@QEAAHHPEAPEAMH@Z		; Cache::get_data
PUBLIC	?lru_insert@Cache@@AEAAXPEAUhead_t@1@@Z		; Cache::lru_insert
PUBLIC	?lru_delete@Cache@@AEAAXPEAUhead_t@1@@Z		; Cache::lru_delete
PUBLIC	??1Cache@@QEAA@XZ				; Cache::~Cache
EXTRN	??_EONE_CLASS_Q@@UEAAPEAXI@Z:PROC		; ONE_CLASS_Q::`vector deleting destructor'
EXTRN	??_ESolver@@UEAAPEAXI@Z:PROC			; Solver::`vector deleting destructor'
EXTRN	??_EKernel@@UEAAPEAXI@Z:PROC			; Kernel::`vector deleting destructor'
EXTRN	??_ESVC_Q@@UEAAPEAXI@Z:PROC			; SVC_Q::`vector deleting destructor'
EXTRN	??_ESVR_Q@@UEAAPEAXI@Z:PROC			; SVR_Q::`vector deleting destructor'
EXTRN	??_ESolver_NU@@UEAAPEAXI@Z:PROC			; Solver_NU::`vector deleting destructor'
EXTRN	??_EQMatrix@@UEAAPEAXI@Z:PROC			; QMatrix::`vector deleting destructor'
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GSVR_Q@@UEAAPEAXI@Z DD imagerel $LN6
	DD	imagerel $LN6+48
	DD	imagerel $unwind$??_GSVR_Q@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1SVR_Q@@UEAA@XZ DD imagerel $LN22
	DD	imagerel $LN22+219
	DD	imagerel $unwind$??1SVR_Q@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?get_Q@SVR_Q@@UEBAPEAMHH@Z DD imagerel $LN24
	DD	imagerel $LN24+17
	DD	imagerel $unwind$?get_Q@SVR_Q@@UEBAPEAMHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?get_Q@SVR_Q@@UEBAPEAMHH@Z DD imagerel $LN24+17
	DD	imagerel $LN24+439
	DD	imagerel $chain$3$?get_Q@SVR_Q@@UEBAPEAMHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?get_Q@SVR_Q@@UEBAPEAMHH@Z DD imagerel $LN24+439
	DD	imagerel $LN24+513
	DD	imagerel $chain$4$?get_Q@SVR_Q@@UEBAPEAMHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GONE_CLASS_Q@@UEAAPEAXI@Z DD imagerel $LN6
	DD	imagerel $LN6+48
	DD	imagerel $unwind$??_GONE_CLASS_Q@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1ONE_CLASS_Q@@UEAA@XZ DD imagerel $LN22
	DD	imagerel $LN22+179
	DD	imagerel $unwind$??1ONE_CLASS_Q@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?swap_index@ONE_CLASS_Q@@UEBAXHH@Z DD imagerel $LN13
	DD	imagerel $LN13+137
	DD	imagerel $unwind$?swap_index@ONE_CLASS_Q@@UEBAXHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?get_Q@ONE_CLASS_Q@@UEBAPEAMHH@Z DD imagerel $LN13
	DD	imagerel $LN13+46
	DD	imagerel $unwind$?get_Q@ONE_CLASS_Q@@UEBAPEAMHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?get_Q@ONE_CLASS_Q@@UEBAPEAMHH@Z DD imagerel $LN13+46
	DD	imagerel $LN13+126
	DD	imagerel $chain$1$?get_Q@ONE_CLASS_Q@@UEBAPEAMHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?get_Q@ONE_CLASS_Q@@UEBAPEAMHH@Z DD imagerel $LN13+126
	DD	imagerel $LN13+145
	DD	imagerel $chain$2$?get_Q@ONE_CLASS_Q@@UEBAPEAMHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GCache@@QEAAPEAXI@Z DD imagerel $LN14
	DD	imagerel $LN14+89
	DD	imagerel $unwind$??_GCache@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GSVC_Q@@UEAAPEAXI@Z DD imagerel $LN6
	DD	imagerel $LN6+48
	DD	imagerel $unwind$??_GSVC_Q@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1SVC_Q@@UEAA@XZ DD imagerel $LN22
	DD	imagerel $LN22+190
	DD	imagerel $unwind$??1SVC_Q@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?swap_index@SVC_Q@@UEBAXHH@Z DD imagerel $LN15
	DD	imagerel $LN15+155
	DD	imagerel $unwind$?swap_index@SVC_Q@@UEBAXHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?get_Q@SVC_Q@@UEBAPEAMHH@Z DD imagerel $LN13
	DD	imagerel $LN13+52
	DD	imagerel $unwind$?get_Q@SVC_Q@@UEBAPEAMHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?get_Q@SVC_Q@@UEBAPEAMHH@Z DD imagerel $LN13+52
	DD	imagerel $LN13+176
	DD	imagerel $chain$3$?get_Q@SVC_Q@@UEBAPEAMHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?get_Q@SVC_Q@@UEBAPEAMHH@Z DD imagerel $LN13+176
	DD	imagerel $LN13+192
	DD	imagerel $chain$4$?get_Q@SVC_Q@@UEBAPEAMHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?calculate_rho@Solver_NU@@EEAANXZ DD imagerel $LN49
	DD	imagerel $LN49+328
	DD	imagerel $unwind$?calculate_rho@Solver_NU@@EEAANXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_shrinking@Solver_NU@@EEAAXXZ DD imagerel $LN77
	DD	imagerel $LN77+283
	DD	imagerel $unwind$?do_shrinking@Solver_NU@@EEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?do_shrinking@Solver_NU@@EEAAXXZ DD imagerel $LN77+283
	DD	imagerel $LN77+550
	DD	imagerel $chain$0$?do_shrinking@Solver_NU@@EEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?do_shrinking@Solver_NU@@EEAAXXZ DD imagerel $LN77+550
	DD	imagerel $LN77+592
	DD	imagerel $chain$1$?do_shrinking@Solver_NU@@EEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?select_working_set@Solver_NU@@EEAAHAEAH0@Z DD imagerel $LN74
	DD	imagerel $LN74+25
	DD	imagerel $unwind$?select_working_set@Solver_NU@@EEAAHAEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$?select_working_set@Solver_NU@@EEAAHAEAH0@Z DD imagerel $LN74+25
	DD	imagerel $LN74+627
	DD	imagerel $chain$9$?select_working_set@Solver_NU@@EEAAHAEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$10$?select_working_set@Solver_NU@@EEAAHAEAH0@Z DD imagerel $LN74+627
	DD	imagerel $LN74+676
	DD	imagerel $chain$10$?select_working_set@Solver_NU@@EEAAHAEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$11$?select_working_set@Solver_NU@@EEAAHAEAH0@Z DD imagerel $LN74+676
	DD	imagerel $LN74+928
	DD	imagerel $chain$11$?select_working_set@Solver_NU@@EEAAHAEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$12$?select_working_set@Solver_NU@@EEAAHAEAH0@Z DD imagerel $LN74+928
	DD	imagerel $LN74+994
	DD	imagerel $chain$12$?select_working_set@Solver_NU@@EEAAHAEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$13$?select_working_set@Solver_NU@@EEAAHAEAH0@Z DD imagerel $LN74+994
	DD	imagerel $LN74+1022
	DD	imagerel $chain$13$?select_working_set@Solver_NU@@EEAAHAEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$14$?select_working_set@Solver_NU@@EEAAHAEAH0@Z DD imagerel $LN74+1022
	DD	imagerel $LN74+1096
	DD	imagerel $chain$14$?select_working_set@Solver_NU@@EEAAHAEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GSolver_NU@@UEAAPEAXI@Z DD imagerel $LN10
	DD	imagerel $LN10+39
	DD	imagerel $unwind$??_GSolver_NU@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?calculate_rho@Solver@@MEAANXZ DD imagerel $LN41
	DD	imagerel $LN41+55
	DD	imagerel $unwind$?calculate_rho@Solver@@MEAANXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?calculate_rho@Solver@@MEAANXZ DD imagerel $LN41+55
	DD	imagerel $LN41+167
	DD	imagerel $chain$0$?calculate_rho@Solver@@MEAANXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?calculate_rho@Solver@@MEAANXZ DD imagerel $LN41+167
	DD	imagerel $LN41+208
	DD	imagerel $chain$1$?calculate_rho@Solver@@MEAANXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_shrinking@Solver@@MEAAXXZ DD imagerel $LN79
	DD	imagerel $LN79+278
	DD	imagerel $unwind$?do_shrinking@Solver@@MEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?do_shrinking@Solver@@MEAAXXZ DD imagerel $LN79+278
	DD	imagerel $LN79+508
	DD	imagerel $chain$0$?do_shrinking@Solver@@MEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?do_shrinking@Solver@@MEAAXXZ DD imagerel $LN79+508
	DD	imagerel $LN79+535
	DD	imagerel $chain$1$?do_shrinking@Solver@@MEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?select_working_set@Solver@@MEAAHAEAH0@Z DD imagerel $LN76
	DD	imagerel $LN76+14
	DD	imagerel $unwind$?select_working_set@Solver@@MEAAHAEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?select_working_set@Solver@@MEAAHAEAH0@Z DD imagerel $LN76+14
	DD	imagerel $LN76+18
	DD	imagerel $chain$0$?select_working_set@Solver@@MEAAHAEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$?select_working_set@Solver@@MEAAHAEAH0@Z DD imagerel $LN76+18
	DD	imagerel $LN76+550
	DD	imagerel $chain$7$?select_working_set@Solver@@MEAAHAEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$?select_working_set@Solver@@MEAAHAEAH0@Z DD imagerel $LN76+550
	DD	imagerel $LN76+566
	DD	imagerel $chain$8$?select_working_set@Solver@@MEAAHAEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$?select_working_set@Solver@@MEAAHAEAH0@Z DD imagerel $LN76+566
	DD	imagerel $LN76+861
	DD	imagerel $chain$9$?select_working_set@Solver@@MEAAHAEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$10$?select_working_set@Solver@@MEAAHAEAH0@Z DD imagerel $LN76+861
	DD	imagerel $LN76+922
	DD	imagerel $chain$10$?select_working_set@Solver@@MEAAHAEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$11$?select_working_set@Solver@@MEAAHAEAH0@Z DD imagerel $LN76+922
	DD	imagerel $LN76+961
	DD	imagerel $chain$11$?select_working_set@Solver@@MEAAHAEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reconstruct_gradient@Solver@@IEAAXXZ DD imagerel $LN62
	DD	imagerel $LN62+25
	DD	imagerel $unwind$?reconstruct_gradient@Solver@@IEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?reconstruct_gradient@Solver@@IEAAXXZ DD imagerel $LN62+25
	DD	imagerel $LN62+454
	DD	imagerel $chain$2$?reconstruct_gradient@Solver@@IEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?reconstruct_gradient@Solver@@IEAAXXZ DD imagerel $LN62+454
	DD	imagerel $LN62+460
	DD	imagerel $chain$3$?reconstruct_gradient@Solver@@IEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?swap_index@Solver@@IEAAXHH@Z DD imagerel $LN18
	DD	imagerel $LN18+199
	DD	imagerel $unwind$?swap_index@Solver@@IEAAXHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GSolver@@UEAAPEAXI@Z DD imagerel $LN8
	DD	imagerel $LN8+39
	DD	imagerel $unwind$??_GSolver@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dot@Kernel@@CANAEBUsvm_node@@0@Z DD imagerel $LN20
	DD	imagerel $LN20+206
	DD	imagerel $unwind$?dot@Kernel@@CANAEBUsvm_node@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1Kernel@@UEAA@XZ DD imagerel $LN6
	DD	imagerel $LN6+55
	DD	imagerel $unwind$??1Kernel@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GKernel@@UEAAPEAXI@Z DD imagerel $LN10
	DD	imagerel $LN10+83
	DD	imagerel $unwind$??_GKernel@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?kernel_sigmoid@Kernel@@AEBANHH@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$?kernel_sigmoid@Kernel@@AEBANHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?kernel_rbf@Kernel@@AEBANHH@Z DD imagerel $LN4
	DD	imagerel $LN4+87
	DD	imagerel $unwind$?kernel_rbf@Kernel@@AEBANHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?kernel_poly@Kernel@@AEBANHH@Z DD imagerel $LN16
	DD	imagerel $LN16+112
	DD	imagerel $unwind$?kernel_poly@Kernel@@AEBANHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GQMatrix@@UEAAPEAXI@Z DD imagerel $LN8
	DD	imagerel $LN8+39
	DD	imagerel $unwind$??_GQMatrix@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?swap_index@Cache@@QEAAXHH@Z DD imagerel $LN40
	DD	imagerel $LN40+32
	DD	imagerel $unwind$?swap_index@Cache@@QEAAXHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?swap_index@Cache@@QEAAXHH@Z DD imagerel $LN40+32
	DD	imagerel $LN40+274
	DD	imagerel $chain$1$?swap_index@Cache@@QEAAXHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?swap_index@Cache@@QEAAXHH@Z DD imagerel $LN40+274
	DD	imagerel $LN40+410
	DD	imagerel $chain$4$?swap_index@Cache@@QEAAXHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$?swap_index@Cache@@QEAAXHH@Z DD imagerel $LN40+410
	DD	imagerel $LN40+420
	DD	imagerel $chain$5$?swap_index@Cache@@QEAAXHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$?swap_index@Cache@@QEAAXHH@Z DD imagerel $LN40+420
	DD	imagerel $LN40+428
	DD	imagerel $chain$6$?swap_index@Cache@@QEAAXHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?get_data@Cache@@QEAAHHPEAPEAMH@Z DD imagerel $LN20
	DD	imagerel $LN20+81
	DD	imagerel $unwind$?get_data@Cache@@QEAAHHPEAPEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?get_data@Cache@@QEAAHHPEAPEAMH@Z DD imagerel $LN20+81
	DD	imagerel $LN20+160
	DD	imagerel $chain$1$?get_data@Cache@@QEAAHHPEAPEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?get_data@Cache@@QEAAHHPEAPEAMH@Z DD imagerel $LN20+160
	DD	imagerel $LN20+249
	DD	imagerel $chain$2$?get_data@Cache@@QEAAHHPEAPEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1Cache@@QEAA@XZ DD imagerel $LN11
	DD	imagerel $LN11+77
	DD	imagerel $unwind$??1Cache@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?info@@YAXPEBDZZ DD imagerel ?info@@YAXPEBDZZ
	DD	imagerel ?info@@YAXPEBDZZ+97
	DD	imagerel $unwind$?info@@YAXPEBDZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?print_string_stdout@@YAXPEBD@Z DD imagerel ?print_string_stdout@@YAXPEBD@Z
	DD	imagerel ?print_string_stdout@@YAXPEBD@Z+50
	DD	imagerel $unwind$?print_string_stdout@@YAXPEBD@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?print_string_stdout@@YAXPEBD@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?info@@YAXPEBDZZ DD 022c19H
	DD	047011aH
	DD	imagerel __GSHandlerCheck
	DD	0220H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1Cache@@QEAA@XZ DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?get_data@Cache@@QEAAHHPEAPEAMH@Z DD 021H
	DD	imagerel $LN20
	DD	imagerel $LN20+81
	DD	imagerel $unwind$?get_data@Cache@@QEAAHHPEAPEAMH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?get_data@Cache@@QEAAHHPEAPEAMH@Z DD 040a21H
	DD	09c40aH
	DD	087405H
	DD	imagerel $LN20
	DD	imagerel $LN20+81
	DD	imagerel $unwind$?get_data@Cache@@QEAAHHPEAPEAMH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?get_data@Cache@@QEAAHHPEAPEAMH@Z DD 081301H
	DD	0b5413H
	DD	0a3413H
	DD	0f00f3213H
	DD	0600be00dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$?swap_index@Cache@@QEAAXHH@Z DD 021H
	DD	imagerel $LN40
	DD	imagerel $LN40+32
	DD	imagerel $unwind$?swap_index@Cache@@QEAAXHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$?swap_index@Cache@@QEAAXHH@Z DD 021H
	DD	imagerel $LN40+32
	DD	imagerel $LN40+274
	DD	imagerel $chain$1$?swap_index@Cache@@QEAAXHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?swap_index@Cache@@QEAAXHH@Z DD 060f21H
	DD	04f40fH
	DD	0cd40aH
	DD	0bc405H
	DD	imagerel $LN40+32
	DD	imagerel $LN40+274
	DD	imagerel $chain$1$?swap_index@Cache@@QEAAXHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?swap_index@Cache@@QEAAXHH@Z DD 040e21H
	DD	05e40eH
	DD	0a3405H
	DD	imagerel $LN40
	DD	imagerel $LN40+32
	DD	imagerel $unwind$?swap_index@Cache@@QEAAXHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?swap_index@Cache@@QEAAXHH@Z DD 040801H
	DD	070045208H
	DD	050026003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GQMatrix@@UEAAPEAXI@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?kernel_poly@Kernel@@AEBANHH@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?kernel_rbf@Kernel@@AEBANHH@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?kernel_sigmoid@Kernel@@AEBANHH@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GKernel@@UEAAPEAXI@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1Kernel@@UEAA@XZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dot@Kernel@@CANAEBUsvm_node@@0@Z DD 020501H
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GSolver@@UEAAPEAXI@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?swap_index@Solver@@IEAAXHH@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?reconstruct_gradient@Solver@@IEAAXXZ DD 021H
	DD	imagerel $LN62
	DD	imagerel $LN62+25
	DD	imagerel $unwind$?reconstruct_gradient@Solver@@IEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?reconstruct_gradient@Solver@@IEAAXXZ DD 061121H
	DD	087411H
	DD	07640cH
	DD	065405H
	DD	imagerel $LN62
	DD	imagerel $LN62+25
	DD	imagerel $unwind$?reconstruct_gradient@Solver@@IEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reconstruct_gradient@Solver@@IEAAXXZ DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$11$?select_working_set@Solver@@MEAAHAEAH0@Z DD 021H
	DD	imagerel $LN76
	DD	imagerel $LN76+14
	DD	imagerel $unwind$?select_working_set@Solver@@MEAAHAEAH0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$10$?select_working_set@Solver@@MEAAHAEAH0@Z DD 021H
	DD	imagerel $LN76+550
	DD	imagerel $LN76+566
	DD	imagerel $chain$8$?select_working_set@Solver@@MEAAHAEAH0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$?select_working_set@Solver@@MEAAHAEAH0@Z DD 020521H
	DD	057805H
	DD	imagerel $LN76+550
	DD	imagerel $LN76+566
	DD	imagerel $chain$8$?select_working_set@Solver@@MEAAHAEAH0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$?select_working_set@Solver@@MEAAHAEAH0@Z DD 0c0021H
	DD	02a800H
	DD	039800H
	DD	048800H
	DD	066800H
	DD	0ee400H
	DD	0166400H
	DD	imagerel $LN76+14
	DD	imagerel $LN76+18
	DD	imagerel $chain$0$?select_working_set@Solver@@MEAAHAEAH0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$?select_working_set@Solver@@MEAAHAEAH0@Z DD 0e3721H
	DD	02a837H
	DD	039832H
	DD	04881bH
	DD	066816H
	DD	0ee40fH
	DD	016640bH
	DD	0155404H
	DD	imagerel $LN76+14
	DD	imagerel $LN76+18
	DD	imagerel $chain$0$?select_working_set@Solver@@MEAAHAEAH0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?select_working_set@Solver@@MEAAHAEAH0@Z DD 020421H
	DD	0143404H
	DD	imagerel $LN76
	DD	imagerel $LN76+14
	DD	imagerel $unwind$?select_working_set@Solver@@MEAAHAEAH0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?select_working_set@Solver@@MEAAHAEAH0@Z DD 050e01H
	DD	0f00ae20eH
	DD	0c006d008H
	DD	07004H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?do_shrinking@Solver@@MEAAXXZ DD 021H
	DD	imagerel $LN79
	DD	imagerel $LN79+278
	DD	imagerel $unwind$?do_shrinking@Solver@@MEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?do_shrinking@Solver@@MEAAXXZ DD 020521H
	DD	0c7405H
	DD	imagerel $LN79
	DD	imagerel $LN79+278
	DD	imagerel $unwind$?do_shrinking@Solver@@MEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_shrinking@Solver@@MEAAXXZ DD 0a2601H
	DD	028826H
	DD	03781bH
	DD	046816H
	DD	0d340aH
	DD	06006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?calculate_rho@Solver@@MEAANXZ DD 021H
	DD	imagerel $LN41
	DD	imagerel $LN41+55
	DD	imagerel $unwind$?calculate_rho@Solver@@MEAANXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?calculate_rho@Solver@@MEAANXZ DD 020421H
	DD	03404H
	DD	imagerel $LN41
	DD	imagerel $LN41+55
	DD	imagerel $unwind$?calculate_rho@Solver@@MEAANXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?calculate_rho@Solver@@MEAANXZ DD 010401H
	DD	0204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GSolver_NU@@UEAAPEAXI@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$14$?select_working_set@Solver_NU@@EEAAHAEAH0@Z DD 021H
	DD	imagerel $LN74
	DD	imagerel $LN74+25
	DD	imagerel $unwind$?select_working_set@Solver_NU@@EEAAHAEAH0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$13$?select_working_set@Solver_NU@@EEAAHAEAH0@Z DD 040021H
	DD	02c800H
	DD	03b800H
	DD	imagerel $LN74
	DD	imagerel $LN74+25
	DD	imagerel $unwind$?select_working_set@Solver_NU@@EEAAHAEAH0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$12$?select_working_set@Solver_NU@@EEAAHAEAH0@Z DD 021H
	DD	imagerel $LN74+627
	DD	imagerel $LN74+676
	DD	imagerel $chain$10$?select_working_set@Solver_NU@@EEAAHAEAH0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$11$?select_working_set@Solver_NU@@EEAAHAEAH0@Z DD 020621H
	DD	068806H
	DD	imagerel $LN74+627
	DD	imagerel $LN74+676
	DD	imagerel $chain$10$?select_working_set@Solver_NU@@EEAAHAEAH0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$10$?select_working_set@Solver_NU@@EEAAHAEAH0@Z DD 0120021H
	DD	02c800H
	DD	03b800H
	DD	04a800H
	DD	059800H
	DD	077800H
	DD	086800H
	DD	012c400H
	DD	0137400H
	DD	0146400H
	DD	imagerel $LN74
	DD	imagerel $LN74+25
	DD	imagerel $unwind$?select_working_set@Solver_NU@@EEAAHAEAH0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$?select_working_set@Solver_NU@@EEAAHAEAH0@Z DD 0144921H
	DD	02c849H
	DD	03b843H
	DD	04a83dH
	DD	059824H
	DD	07781fH
	DD	08681bH
	DD	012c413H
	DD	013740fH
	DD	014640bH
	DD	01a5404H
	DD	imagerel $LN74
	DD	imagerel $LN74+25
	DD	imagerel $unwind$?select_working_set@Solver_NU@@EEAAHAEAH0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?select_working_set@Solver_NU@@EEAAHAEAH0@Z DD 061901H
	DD	0150119H
	DD	0e010f012H
	DD	0300cd00eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?do_shrinking@Solver_NU@@EEAAXXZ DD 021H
	DD	imagerel $LN77
	DD	imagerel $LN77+283
	DD	imagerel $unwind$?do_shrinking@Solver_NU@@EEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?do_shrinking@Solver_NU@@EEAAXXZ DD 020821H
	DD	0107408H
	DD	imagerel $LN77
	DD	imagerel $LN77+283
	DD	imagerel $unwind$?do_shrinking@Solver_NU@@EEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_shrinking@Solver_NU@@EEAAXXZ DD 0e4401H
	DD	02a844H
	DD	03982fH
	DD	048829H
	DD	057823H
	DD	066816H
	DD	011340aH
	DD	06006d20aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?calculate_rho@Solver_NU@@EEAANXZ DD 082701H
	DD	07827H
	DD	016820H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?get_Q@SVC_Q@@UEBAPEAMHH@Z DD 021H
	DD	imagerel $LN13
	DD	imagerel $LN13+52
	DD	imagerel $unwind$?get_Q@SVC_Q@@UEBAPEAMHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?get_Q@SVC_Q@@UEBAPEAMHH@Z DD 081421H
	DD	04f414H
	DD	0dd40fH
	DD	0c640aH
	DD	0b3405H
	DD	imagerel $LN13
	DD	imagerel $LN13+52
	DD	imagerel $unwind$?get_Q@SVC_Q@@UEBAPEAMHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?get_Q@SVC_Q@@UEBAPEAMHH@Z DD 050b01H
	DD	0e007420bH
	DD	07003c005H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?swap_index@SVC_Q@@UEBAXHH@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1SVC_Q@@UEAA@XZ DD imagerel ??1SVC_Q@@UEAA@XZ
	DD	0ffffffffH
	DD	imagerel ??1SVC_Q@@UEAA@XZ+47
	DD	00H
	DD	imagerel ??1SVC_Q@@UEAA@XZ+129
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1SVC_Q@@UEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???1SVC_Q@@UEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1SVC_Q@@UEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??1SVC_Q@@UEAA@XZ
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??1SVC_Q@@UEAA@XZ
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1SVC_Q@@UEAA@XZ DD 082211H
	DD	0b6422H
	DD	0a541dH
	DD	093418H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1SVC_Q@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GSVC_Q@@UEAAPEAXI@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GCache@@QEAAPEAXI@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?get_Q@ONE_CLASS_Q@@UEBAPEAMHH@Z DD 021H
	DD	imagerel $LN13
	DD	imagerel $LN13+46
	DD	imagerel $unwind$?get_Q@ONE_CLASS_Q@@UEBAPEAMHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?get_Q@ONE_CLASS_Q@@UEBAPEAMHH@Z DD 040a21H
	DD	0ae40aH
	DD	097405H
	DD	imagerel $LN13
	DD	imagerel $LN13+46
	DD	imagerel $unwind$?get_Q@ONE_CLASS_Q@@UEBAPEAMHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?get_Q@ONE_CLASS_Q@@UEBAPEAMHH@Z DD 060d01H
	DD	0b340dH
	DD	0f009320dH
	DD	050066007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?swap_index@ONE_CLASS_Q@@UEBAXHH@Z DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1ONE_CLASS_Q@@UEAA@XZ DD imagerel ??1ONE_CLASS_Q@@UEAA@XZ
	DD	0ffffffffH
	DD	imagerel ??1ONE_CLASS_Q@@UEAA@XZ+47
	DD	00H
	DD	imagerel ??1ONE_CLASS_Q@@UEAA@XZ+118
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1ONE_CLASS_Q@@UEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???1ONE_CLASS_Q@@UEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1ONE_CLASS_Q@@UEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??1ONE_CLASS_Q@@UEAA@XZ
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??1ONE_CLASS_Q@@UEAA@XZ
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1ONE_CLASS_Q@@UEAA@XZ DD 082211H
	DD	0b6422H
	DD	0a541dH
	DD	093418H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1ONE_CLASS_Q@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GONE_CLASS_Q@@UEAAPEAXI@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?get_Q@SVR_Q@@UEBAPEAMHH@Z DD 021H
	DD	imagerel $LN24
	DD	imagerel $LN24+17
	DD	imagerel $unwind$?get_Q@SVR_Q@@UEBAPEAMHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?get_Q@SVR_Q@@UEBAPEAMHH@Z DD 082121H
	DD	04f421H
	DD	0dd412H
	DD	0cc40aH
	DD	0b6405H
	DD	imagerel $LN24
	DD	imagerel $LN24+17
	DD	imagerel $unwind$?get_Q@SVR_Q@@UEBAPEAMHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?get_Q@SVR_Q@@UEBAPEAMHH@Z DD 050a01H
	DD	0e006420aH
	DD	050037004H
	DD	03002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1SVR_Q@@UEAA@XZ DD imagerel ??1SVR_Q@@UEAA@XZ
	DD	0ffffffffH
	DD	imagerel ??1SVR_Q@@UEAA@XZ+47
	DD	00H
	DD	imagerel ??1SVR_Q@@UEAA@XZ+158
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1SVR_Q@@UEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???1SVR_Q@@UEAA@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1SVR_Q@@UEAA@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??1SVR_Q@@UEAA@XZ
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??1SVR_Q@@UEAA@XZ
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1SVR_Q@@UEAA@XZ DD 082211H
	DD	0b6422H
	DD	0a541dH
	DD	093418H
	DD	07006520aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1SVR_Q@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GSVR_Q@@UEAAPEAXI@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
;	COMDAT ?powi@@YANNH@Z
_TEXT	SEGMENT
base$ = 8
times$ = 16
?powi@@YANNH@Z PROC					; powi, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 28
  00000	0f 28 c8	 movaps	 xmm1, xmm0
; Line 29
  00003	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@3ff0000000000000
  0000b	8b c2		 mov	 eax, edx
; Line 31
  0000d	85 d2		 test	 edx, edx
  0000f	7e 27		 jle	 SHORT $LN12@powi
$LL4@powi:
; Line 33
  00011	8b c8		 mov	 ecx, eax
  00013	81 e1 01 00 00
	80		 and	 ecx, -2147483647	; ffffffff80000001H
  00019	7d 07		 jge	 SHORT $LN11@powi
  0001b	ff c9		 dec	 ecx
  0001d	83 c9 fe	 or	 ecx, -2
  00020	ff c1		 inc	 ecx
$LN11@powi:
  00022	83 f9 01	 cmp	 ecx, 1
  00025	75 04		 jne	 SHORT $LN1@powi
  00027	f2 0f 59 c1	 mulsd	 xmm0, xmm1
$LN1@powi:
; Line 31
  0002b	99		 cdq
; Line 34
  0002c	f2 0f 59 c9	 mulsd	 xmm1, xmm1
  00030	2b c2		 sub	 eax, edx
  00032	d1 f8		 sar	 eax, 1
  00034	85 c0		 test	 eax, eax
  00036	7f d9		 jg	 SHORT $LL4@powi
$LN12@powi:
; Line 37
  00038	c3		 ret	 0
?powi@@YANNH@Z ENDP					; powi
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?print_string_stdout@@YAXPEBD@Z
_TEXT	SEGMENT
s$ = 48
?print_string_stdout@@YAXPEBD@Z PROC			; print_string_stdout, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 43
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
; Line 44
  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0000f	48 8b cb	 mov	 rcx, rbx
  00012	48 8d 50 30	 lea	 rdx, QWORD PTR [rax+48]
  00016	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fputs
; Line 45
  0001c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00022	48 8d 48 30	 lea	 rcx, QWORD PTR [rax+48]
; Line 46
  00026	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002a	5b		 pop	 rbx
; Line 45
  0002b	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_fflush
?print_string_stdout@@YAXPEBD@Z ENDP			; print_string_stdout
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?info@@YAXPEBDZZ
_TEXT	SEGMENT
buf$ = 32
__$ArrayPad$ = 544
fmt$ = 576
?info@@YAXPEBDZZ PROC					; info, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 50
  00000	4c 8b dc	 mov	 r11, rsp
  00003	49 89 4b 08	 mov	 QWORD PTR [r11+8], rcx
  00007	49 89 53 10	 mov	 QWORD PTR [r11+16], rdx
  0000b	4d 89 43 18	 mov	 QWORD PTR [r11+24], r8
  0000f	4d 89 4b 20	 mov	 QWORD PTR [r11+32], r9
  00013	48 81 ec 38 02
	00 00		 sub	 rsp, 568		; 00000238H
  0001a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00021	48 33 c4	 xor	 rax, rsp
  00024	48 89 84 24 20
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
; Line 54
  0002c	48 8b d1	 mov	 rdx, rcx
  0002f	4d 8d 43 10	 lea	 r8, QWORD PTR [r11+16]
  00033	48 8d 4c 24 20	 lea	 rcx, QWORD PTR buf$[rsp]
  00038	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_vsprintf
; Line 56
  0003e	48 8d 4c 24 20	 lea	 rcx, QWORD PTR buf$[rsp]
  00043	ff 15 00 00 00
	00		 call	 QWORD PTR svm_print_string
; Line 57
  00049	48 8b 8c 24 20
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00051	48 33 cc	 xor	 rcx, rsp
  00054	e8 00 00 00 00	 call	 __security_check_cookie
  00059	48 81 c4 38 02
	00 00		 add	 rsp, 568		; 00000238H
  00060	c3		 ret	 0
?info@@YAXPEBDZZ ENDP					; info
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1Cache@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1Cache@@QEAA@XZ PROC					; Cache::~Cache, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 105
$LN11:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 106
  0000f	48 8b 59 18	 mov	 rbx, QWORD PTR [rcx+24]
  00013	48 8d 79 10	 lea	 rdi, QWORD PTR [rcx+16]
  00017	48 8b f1	 mov	 rsi, rcx
  0001a	48 3b df	 cmp	 rbx, rdi
  0001d	74 14		 je	 SHORT $LN1@Cache
  0001f	90		 npad	 1
$LL3@Cache:
; Line 107
  00020	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00024	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  0002a	48 8b 5b 08	 mov	 rbx, QWORD PTR [rbx+8]
  0002e	48 3b df	 cmp	 rbx, rdi
  00031	75 ed		 jne	 SHORT $LL3@Cache
$LN1@Cache:
; Line 108
  00033	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
; Line 109
  00037	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0003c	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00041	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00045	5f		 pop	 rdi
; Line 108
  00046	48 ff 25 00 00
	00 00		 rex_jmp QWORD PTR __imp_free
??1Cache@@QEAA@XZ ENDP					; Cache::~Cache
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?lru_delete@Cache@@AEAAXPEAUhead_t@1@@Z
_TEXT	SEGMENT
this$dead$ = 8
h$ = 16
?lru_delete@Cache@@AEAAXPEAUhead_t@1@@Z PROC		; Cache::lru_delete, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 114
  00000	48 8b 0a	 mov	 rcx, QWORD PTR [rdx]
  00003	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  00007	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
; Line 115
  0000b	48 8b 4a 08	 mov	 rcx, QWORD PTR [rdx+8]
  0000f	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00012	48 89 01	 mov	 QWORD PTR [rcx], rax
; Line 116
  00015	c3		 ret	 0
?lru_delete@Cache@@AEAAXPEAUhead_t@1@@Z ENDP		; Cache::lru_delete
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?lru_insert@Cache@@AEAAXPEAUhead_t@1@@Z
_TEXT	SEGMENT
this$ = 8
h$ = 16
?lru_insert@Cache@@AEAAXPEAUhead_t@1@@Z PROC		; Cache::lru_insert, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 121
  00000	48 8d 41 10	 lea	 rax, QWORD PTR [rcx+16]
  00004	48 89 42 08	 mov	 QWORD PTR [rdx+8], rax
; Line 122
  00008	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0000b	48 89 02	 mov	 QWORD PTR [rdx], rax
; Line 123
  0000e	48 89 50 08	 mov	 QWORD PTR [rax+8], rdx
; Line 124
  00012	48 8b 42 08	 mov	 rax, QWORD PTR [rdx+8]
  00016	48 89 10	 mov	 QWORD PTR [rax], rdx
; Line 125
  00019	c3		 ret	 0
?lru_insert@Cache@@AEAAXPEAUhead_t@1@@Z ENDP		; Cache::lru_insert
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?get_data@Cache@@QEAAHHPEAPEAMH@Z
_TEXT	SEGMENT
this$ = 64
index$ = 72
data$ = 80
len$ = 88
?get_data@Cache@@QEAAHHPEAPEAMH@Z PROC			; Cache::get_data, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 128
$LN20:
  00000	48 89 5c 24 18	 mov	 QWORD PTR [rsp+24], rbx
  00005	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  0000a	56		 push	 rsi
  0000b	41 56		 push	 r14
  0000d	41 57		 push	 r15
  0000f	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 129
  00013	48 63 da	 movsxd	 rbx, edx
  00016	4d 63 f1	 movsxd	 r14, r9d
  00019	4d 8b f8	 mov	 r15, r8
  0001c	48 c1 e3 05	 shl	 rbx, 5
  00020	48 8b f1	 mov	 rsi, rcx
  00023	48 03 59 08	 add	 rbx, QWORD PTR [rcx+8]
; Line 130
  00027	83 7b 18 00	 cmp	 DWORD PTR [rbx+24], 0
  0002b	74 15		 je	 SHORT $LN7@get_data
; Line 114
  0002d	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  00031	48 8b 13	 mov	 rdx, QWORD PTR [rbx]
  00034	48 89 42 08	 mov	 QWORD PTR [rdx+8], rax
; Line 115
  00038	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  0003c	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  0003f	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN7@get_data:
; Line 131
  00042	41 8b ee	 mov	 ebp, r14d
  00045	2b 6b 18	 sub	 ebp, DWORD PTR [rbx+24]
; Line 133
  00048	85 ed		 test	 ebp, ebp
  0004a	7e 76		 jle	 SHORT $LN11@get_data
; Line 136
  0004c	39 6e 04	 cmp	 DWORD PTR [rsi+4], ebp
  0004f	7d 4f		 jge	 SHORT $LN1@get_data
  00051	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  00056	4c 89 64 24 48	 mov	 QWORD PTR [rsp+72], r12
  0005b	45 33 e4	 xor	 r12d, r12d
  0005e	66 90		 npad	 2
$LL2@get_data:
; Line 138
  00060	48 8b 7e 18	 mov	 rdi, QWORD PTR [rsi+24]
; Line 114
  00064	48 8b 0f	 mov	 rcx, QWORD PTR [rdi]
  00067	48 8b 47 08	 mov	 rax, QWORD PTR [rdi+8]
  0006b	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
; Line 115
  0006f	48 8b 4f 08	 mov	 rcx, QWORD PTR [rdi+8]
  00073	48 8b 07	 mov	 rax, QWORD PTR [rdi]
  00076	48 89 01	 mov	 QWORD PTR [rcx], rax
; Line 140
  00079	48 8b 4f 10	 mov	 rcx, QWORD PTR [rdi+16]
  0007d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
; Line 141
  00083	8b 47 18	 mov	 eax, DWORD PTR [rdi+24]
  00086	01 46 04	 add	 DWORD PTR [rsi+4], eax
; Line 142
  00089	4c 89 67 10	 mov	 QWORD PTR [rdi+16], r12
; Line 143
  0008d	44 89 67 18	 mov	 DWORD PTR [rdi+24], r12d
  00091	39 6e 04	 cmp	 DWORD PTR [rsi+4], ebp
  00094	7c ca		 jl	 SHORT $LL2@get_data
  00096	4c 8b 64 24 48	 mov	 r12, QWORD PTR [rsp+72]
  0009b	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
$LN1@get_data:
; Line 147
  000a0	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  000a4	49 8b d6	 mov	 rdx, r14
  000a7	48 c1 e2 02	 shl	 rdx, 2
  000ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_realloc
  000b1	48 89 43 10	 mov	 QWORD PTR [rbx+16], rax
; Line 148
  000b5	29 6e 04	 sub	 DWORD PTR [rsi+4], ebp
; Line 21
  000b8	8b 43 18	 mov	 eax, DWORD PTR [rbx+24]
  000bb	44 89 73 18	 mov	 DWORD PTR [rbx+24], r14d
  000bf	44 8b f0	 mov	 r14d, eax
$LN11@get_data:
; Line 155
  000c2	48 8b 6c 24 58	 mov	 rbp, QWORD PTR [rsp+88]
; Line 121
  000c7	48 8d 46 10	 lea	 rax, QWORD PTR [rsi+16]
  000cb	48 89 43 08	 mov	 QWORD PTR [rbx+8], rax
; Line 122
  000cf	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d2	48 89 03	 mov	 QWORD PTR [rbx], rax
; Line 123
  000d5	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
; Line 124
  000d9	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  000dd	48 89 18	 mov	 QWORD PTR [rax], rbx
; Line 153
  000e0	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
; Line 155
  000e4	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  000e9	49 89 07	 mov	 QWORD PTR [r15], rax
  000ec	41 8b c6	 mov	 eax, r14d
  000ef	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000f3	41 5f		 pop	 r15
  000f5	41 5e		 pop	 r14
  000f7	5e		 pop	 rsi
  000f8	c3		 ret	 0
?get_data@Cache@@QEAAHHPEAPEAMH@Z ENDP			; Cache::get_data
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?swap_index@Cache@@QEAAXHH@Z
_TEXT	SEGMENT
this$ = 80
i$ = 88
j$ = 96
?swap_index@Cache@@QEAAXHH@Z PROC			; Cache::swap_index, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 158
$LN40:
  00000	40 55		 push	 rbp
  00002	56		 push	 rsi
  00003	57		 push	 rdi
  00004	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  00008	49 63 e8	 movsxd	 rbp, r8d
  0000b	48 63 f2	 movsxd	 rsi, edx
  0000e	48 8b f9	 mov	 rdi, rcx
; Line 159
  00011	3b f5		 cmp	 esi, ebp
  00013	0f 84 8b 01 00
	00		 je	 $LN4@swap_index
; Line 161
  00019	48 8b 51 08	 mov	 rdx, QWORD PTR [rcx+8]
  0001d	4c 8b ce	 mov	 r9, rsi
  00020	48 89 5c 24 50	 mov	 QWORD PTR [rsp+80], rbx
  00025	49 c1 e1 05	 shl	 r9, 5
  00029	4c 89 74 24 28	 mov	 QWORD PTR [rsp+40], r14
  0002e	42 83 7c 0a 18
	00		 cmp	 DWORD PTR [rdx+r9+24], 0
  00034	74 19		 je	 SHORT $LN15@swap_index
; Line 114
  00036	4a 8b 0c 0a	 mov	 rcx, QWORD PTR [rdx+r9]
  0003a	4a 8b 44 0a 08	 mov	 rax, QWORD PTR [rdx+r9+8]
  0003f	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
; Line 115
  00043	4a 8b 4c 0a 08	 mov	 rcx, QWORD PTR [rdx+r9+8]
  00048	4a 8b 04 0a	 mov	 rax, QWORD PTR [rdx+r9]
  0004c	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN15@swap_index:
; Line 162
  0004f	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
  00053	4c 8b c5	 mov	 r8, rbp
  00056	49 c1 e0 05	 shl	 r8, 5
  0005a	42 83 7c 02 18
	00		 cmp	 DWORD PTR [rdx+r8+24], 0
  00060	74 19		 je	 SHORT $LN17@swap_index
; Line 114
  00062	4a 8b 0c 02	 mov	 rcx, QWORD PTR [rdx+r8]
  00066	4a 8b 44 02 08	 mov	 rax, QWORD PTR [rdx+r8+8]
  0006b	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
; Line 115
  0006f	4a 8b 4c 02 08	 mov	 rcx, QWORD PTR [rdx+r8+8]
  00074	4a 8b 04 02	 mov	 rax, QWORD PTR [rdx+r8]
  00078	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN17@swap_index:
; Line 163
  0007b	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
; Line 21
  0007f	4a 8b 4c 0a 10	 mov	 rcx, QWORD PTR [rdx+r9+16]
  00084	49 8b 44 10 10	 mov	 rax, QWORD PTR [r8+rdx+16]
  00089	4a 89 44 0a 10	 mov	 QWORD PTR [rdx+r9+16], rax
  0008e	49 89 4c 10 10	 mov	 QWORD PTR [r8+rdx+16], rcx
; Line 164
  00093	48 8b 57 08	 mov	 rdx, QWORD PTR [rdi+8]
; Line 21
  00097	42 8b 4c 0a 18	 mov	 ecx, DWORD PTR [rdx+r9+24]
  0009c	41 8b 44 10 18	 mov	 eax, DWORD PTR [r8+rdx+24]
  000a1	42 89 44 0a 18	 mov	 DWORD PTR [rdx+r9+24], eax
  000a6	41 89 4c 10 18	 mov	 DWORD PTR [r8+rdx+24], ecx
; Line 165
  000ab	48 8b 4f 08	 mov	 rcx, QWORD PTR [rdi+8]
  000af	49 03 c9	 add	 rcx, r9
  000b2	83 79 18 00	 cmp	 DWORD PTR [rcx+24], 0
  000b6	74 19		 je	 SHORT $LN23@swap_index
; Line 121
  000b8	48 8d 47 10	 lea	 rax, QWORD PTR [rdi+16]
  000bc	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
; Line 122
  000c0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c3	48 89 01	 mov	 QWORD PTR [rcx], rax
; Line 123
  000c6	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
; Line 124
  000ca	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  000ce	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN23@swap_index:
; Line 166
  000d1	48 8b 4f 08	 mov	 rcx, QWORD PTR [rdi+8]
  000d5	49 03 c8	 add	 rcx, r8
  000d8	83 79 18 00	 cmp	 DWORD PTR [rcx+24], 0
  000dc	74 19		 je	 SHORT $LN25@swap_index
; Line 121
  000de	48 8d 47 10	 lea	 rax, QWORD PTR [rdi+16]
  000e2	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
; Line 122
  000e6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000e9	48 89 01	 mov	 QWORD PTR [rcx], rax
; Line 123
  000ec	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
; Line 124
  000f0	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  000f4	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN25@swap_index:
; Line 168
  000f7	3b f5		 cmp	 esi, ebp
  000f9	7e 06		 jle	 SHORT $LN27@swap_index
; Line 21
  000fb	8b c6		 mov	 eax, esi
  000fd	8b f5		 mov	 esi, ebp
  000ff	8b e8		 mov	 ebp, eax
$LN27@swap_index:
; Line 169
  00101	48 8b 5f 18	 mov	 rbx, QWORD PTR [rdi+24]
  00105	4c 8d 77 10	 lea	 r14, QWORD PTR [rdi+16]
  00109	49 3b de	 cmp	 rbx, r14
  0010c	0f 84 88 00 00
	00		 je	 $LN38@swap_index
  00112	4c 89 64 24 58	 mov	 QWORD PTR [rsp+88], r12
  00117	4c 89 6c 24 60	 mov	 QWORD PTR [rsp+96], r13
  0011c	4c 89 7c 24 20	 mov	 QWORD PTR [rsp+32], r15
  00121	4c 63 fe	 movsxd	 r15, esi
  00124	4c 63 e5	 movsxd	 r12, ebp
  00127	45 33 ed	 xor	 r13d, r13d
  0012a	66 0f 1f 44 00
	00		 npad	 6
$LL6@swap_index:
; Line 171
  00130	8b 43 18	 mov	 eax, DWORD PTR [rbx+24]
  00133	3b c6		 cmp	 eax, esi
  00135	7e 4b		 jle	 SHORT $LN5@swap_index
; Line 173
  00137	3b c5		 cmp	 eax, ebp
  00139	7e 1a		 jle	 SHORT $LN2@swap_index
; Line 174
  0013b	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
; Line 21
  0013f	42 8b 04 a1	 mov	 eax, DWORD PTR [rcx+r12*4]
  00143	f3 42 0f 10 04
	b9		 movss	 xmm0, DWORD PTR [rcx+r15*4]
  00149	42 89 04 b9	 mov	 DWORD PTR [rcx+r15*4], eax
  0014d	f3 42 0f 11 04
	a1		 movss	 DWORD PTR [rcx+r12*4], xmm0
; Line 175
  00153	eb 2d		 jmp	 SHORT $LN5@swap_index
$LN2@swap_index:
; Line 114
  00155	48 8b 0b	 mov	 rcx, QWORD PTR [rbx]
  00158	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  0015c	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
; Line 115
  00160	48 8b 4b 08	 mov	 rcx, QWORD PTR [rbx+8]
  00164	48 8b 03	 mov	 rax, QWORD PTR [rbx]
  00167	48 89 01	 mov	 QWORD PTR [rcx], rax
; Line 179
  0016a	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  0016e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
; Line 180
  00174	8b 43 18	 mov	 eax, DWORD PTR [rbx+24]
  00177	01 47 04	 add	 DWORD PTR [rdi+4], eax
; Line 181
  0017a	4c 89 6b 10	 mov	 QWORD PTR [rbx+16], r13
; Line 182
  0017e	44 89 6b 18	 mov	 DWORD PTR [rbx+24], r13d
$LN5@swap_index:
; Line 169
  00182	48 8b 5b 08	 mov	 rbx, QWORD PTR [rbx+8]
  00186	49 3b de	 cmp	 rbx, r14
  00189	75 a5		 jne	 SHORT $LL6@swap_index
  0018b	4c 8b 7c 24 20	 mov	 r15, QWORD PTR [rsp+32]
  00190	4c 8b 6c 24 60	 mov	 r13, QWORD PTR [rsp+96]
  00195	4c 8b 64 24 58	 mov	 r12, QWORD PTR [rsp+88]
$LN38@swap_index:
  0019a	48 8b 5c 24 50	 mov	 rbx, QWORD PTR [rsp+80]
  0019f	4c 8b 74 24 28	 mov	 r14, QWORD PTR [rsp+40]
$LN4@swap_index:
; Line 186
  001a4	48 83 c4 30	 add	 rsp, 48			; 00000030H
  001a8	5f		 pop	 rdi
  001a9	5e		 pop	 rsi
  001aa	5d		 pop	 rbp
  001ab	c3		 ret	 0
?swap_index@Cache@@QEAAXHH@Z ENDP			; Cache::swap_index
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1QMatrix@@UEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1QMatrix@@UEAA@XZ PROC				; QMatrix::~QMatrix, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 200
  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7QMatrix@@6B@
  00007	48 89 01	 mov	 QWORD PTR [rcx], rax
  0000a	c3		 ret	 0
??1QMatrix@@UEAA@XZ ENDP				; QMatrix::~QMatrix
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??_GQMatrix@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GQMatrix@@UEAAPEAXI@Z PROC				; QMatrix::`scalar deleting destructor', COMDAT
$LN8:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 200
  00006	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7QMatrix@@6B@
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	48 89 01	 mov	 QWORD PTR [rcx], rax
  00013	f6 c2 01	 test	 dl, 1
  00016	74 06		 je	 SHORT $LN6@scalar
  00018	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??3@YAXPEAX@Z
$LN6@scalar:
  0001e	48 8b c3	 mov	 rax, rbx
  00021	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00025	5b		 pop	 rbx
  00026	c3		 ret	 0
??_GQMatrix@@UEAAPEAXI@Z ENDP				; QMatrix::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?swap_index@Kernel@@UEBAXHH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
j$ = 24
?swap_index@Kernel@@UEBAXHH@Z PROC			; Kernel::swap_index, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 218
  00000	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  00004	4c 63 d2	 movsxd	 r10, edx
  00007	4d 63 c8	 movsxd	 r9, r8d
  0000a	4d 8b c1	 mov	 r8, r9
  0000d	49 8b d2	 mov	 rdx, r10
  00010	48 03 d2	 add	 rdx, rdx
  00013	4d 03 c0	 add	 r8, r8
; Line 21
  00016	0f 10 0c d0	 movups	 xmm1, XMMWORD PTR [rax+rdx*8]
  0001a	42 0f 10 04 c0	 movups	 xmm0, XMMWORD PTR [rax+r8*8]
  0001f	0f 11 04 d0	 movups	 XMMWORD PTR [rax+rdx*8], xmm0
  00023	42 0f 11 0c c0	 movups	 XMMWORD PTR [rax+r8*8], xmm1
; Line 219
  00028	48 8b 51 18	 mov	 rdx, QWORD PTR [rcx+24]
  0002c	48 85 d2	 test	 rdx, rdx
  0002f	74 14		 je	 SHORT $LN6@swap_index
; Line 21
  00031	4a 8b 04 ca	 mov	 rax, QWORD PTR [rdx+r9*8]
  00035	f2 42 0f 10 04
	d2		 movsdx	 xmm0, QWORD PTR [rdx+r10*8]
  0003b	4a 89 04 d2	 mov	 QWORD PTR [rdx+r10*8], rax
  0003f	f2 42 0f 11 04
	ca		 movsdx	 QWORD PTR [rdx+r9*8], xmm0
$LN6@swap_index:
; Line 220
  00045	c3		 ret	 0
?swap_index@Kernel@@UEBAXHH@Z ENDP			; Kernel::swap_index
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?kernel_linear@Kernel@@AEBANHH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
j$ = 24
?kernel_linear@Kernel@@AEBANHH@Z PROC			; Kernel::kernel_linear, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 246
  00000	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  00004	48 63 ca	 movsxd	 rcx, edx
  00007	4d 63 c8	 movsxd	 r9, r8d
  0000a	49 c1 e1 04	 shl	 r9, 4
  0000e	48 c1 e1 04	 shl	 rcx, 4
  00012	4c 03 c8	 add	 r9, rax
  00015	48 03 c8	 add	 rcx, rax
  00018	49 8b d1	 mov	 rdx, r9
  0001b	e9 00 00 00 00	 jmp	 ?dot@Kernel@@CANAEBUsvm_node@@0@Z ; Kernel::dot
?kernel_linear@Kernel@@AEBANHH@Z ENDP			; Kernel::kernel_linear
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?kernel_poly@Kernel@@AEBANHH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
j$ = 64
?kernel_poly@Kernel@@AEBANHH@Z PROC			; Kernel::kernel_poly, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 249
$LN16:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
; Line 250
  00009	4d 63 c8	 movsxd	 r9, r8d
  0000c	49 c1 e1 04	 shl	 r9, 4
  00010	4c 03 49 10	 add	 r9, QWORD PTR [rcx+16]
  00014	48 63 ca	 movsxd	 rcx, edx
  00017	48 c1 e1 04	 shl	 rcx, 4
  0001b	49 8b d1	 mov	 rdx, r9
  0001e	48 03 4b 10	 add	 rcx, QWORD PTR [rbx+16]
  00022	e8 00 00 00 00	 call	 ?dot@Kernel@@CANAEBUsvm_node@@0@Z ; Kernel::dot
; Line 31
  00027	8b 43 24	 mov	 eax, DWORD PTR [rbx+36]
  0002a	f2 0f 10 0d 00
	00 00 00	 movsdx	 xmm1, QWORD PTR __real@3ff0000000000000
; Line 250
  00032	f2 0f 59 43 28	 mulsd	 xmm0, QWORD PTR [rbx+40]
  00037	f2 0f 58 43 30	 addsd	 xmm0, QWORD PTR [rbx+48]
; Line 31
  0003c	85 c0		 test	 eax, eax
  0003e	7e 27		 jle	 SHORT $LN14@kernel_pol
$LL6@kernel_pol:
; Line 33
  00040	8b c8		 mov	 ecx, eax
  00042	81 e1 01 00 00
	80		 and	 ecx, -2147483647	; ffffffff80000001H
  00048	7d 07		 jge	 SHORT $LN13@kernel_pol
  0004a	ff c9		 dec	 ecx
  0004c	83 c9 fe	 or	 ecx, -2
  0004f	ff c1		 inc	 ecx
$LN13@kernel_pol:
  00051	83 f9 01	 cmp	 ecx, 1
  00054	75 04		 jne	 SHORT $LN3@kernel_pol
  00056	f2 0f 59 c8	 mulsd	 xmm1, xmm0
$LN3@kernel_pol:
; Line 31
  0005a	99		 cdq
; Line 34
  0005b	f2 0f 59 c0	 mulsd	 xmm0, xmm0
  0005f	2b c2		 sub	 eax, edx
  00061	d1 f8		 sar	 eax, 1
  00063	85 c0		 test	 eax, eax
  00065	7f d9		 jg	 SHORT $LL6@kernel_pol
$LN14@kernel_pol:
; Line 250
  00067	0f 28 c1	 movaps	 xmm0, xmm1
; Line 251
  0006a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006e	5b		 pop	 rbx
  0006f	c3		 ret	 0
?kernel_poly@Kernel@@AEBANHH@Z ENDP			; Kernel::kernel_poly
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?kernel_rbf@Kernel@@AEBANHH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
j$ = 64
?kernel_rbf@Kernel@@AEBANHH@Z PROC			; Kernel::kernel_rbf, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 253
$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
; Line 254
  00009	48 63 ca	 movsxd	 rcx, edx
  0000c	49 63 d0	 movsxd	 rdx, r8d
  0000f	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00013	f2 0f 10 1c d0	 movsdx	 xmm3, QWORD PTR [rax+rdx*8]
  00018	48 c1 e2 04	 shl	 rdx, 4
  0001c	f2 0f 58 1c c8	 addsd	 xmm3, QWORD PTR [rax+rcx*8]
  00021	48 03 53 10	 add	 rdx, QWORD PTR [rbx+16]
  00025	48 c1 e1 04	 shl	 rcx, 4
  00029	48 03 4b 10	 add	 rcx, QWORD PTR [rbx+16]
  0002d	e8 00 00 00 00	 call	 ?dot@Kernel@@CANAEBUsvm_node@@0@Z ; Kernel::dot
  00032	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4000000000000000
  0003a	f2 0f 5c d8	 subsd	 xmm3, xmm0
  0003e	f2 0f 59 5b 28	 mulsd	 xmm3, QWORD PTR [rbx+40]
  00043	0f 57 1d 00 00
	00 00		 xorps	 xmm3, QWORD PTR __xmm@80000000000000008000000000000000
  0004a	0f 28 c3	 movaps	 xmm0, xmm3
; Line 255
  0004d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00051	5b		 pop	 rbx
; Line 254
  00052	e9 00 00 00 00	 jmp	 exp
?kernel_rbf@Kernel@@AEBANHH@Z ENDP			; Kernel::kernel_rbf
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?kernel_sigmoid@Kernel@@AEBANHH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
j$ = 64
?kernel_sigmoid@Kernel@@AEBANHH@Z PROC			; Kernel::kernel_sigmoid, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 257
$LN4:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b d9	 mov	 rbx, rcx
; Line 258
  00009	4d 63 c8	 movsxd	 r9, r8d
  0000c	49 c1 e1 04	 shl	 r9, 4
  00010	4c 03 49 10	 add	 r9, QWORD PTR [rcx+16]
  00014	48 63 ca	 movsxd	 rcx, edx
  00017	48 c1 e1 04	 shl	 rcx, 4
  0001b	49 8b d1	 mov	 rdx, r9
  0001e	48 03 4b 10	 add	 rcx, QWORD PTR [rbx+16]
  00022	e8 00 00 00 00	 call	 ?dot@Kernel@@CANAEBUsvm_node@@0@Z ; Kernel::dot
  00027	f2 0f 59 43 28	 mulsd	 xmm0, QWORD PTR [rbx+40]
  0002c	f2 0f 58 43 30	 addsd	 xmm0, QWORD PTR [rbx+48]
; Line 259
  00031	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00035	5b		 pop	 rbx
; Line 258
  00036	e9 00 00 00 00	 jmp	 tanh
?kernel_sigmoid@Kernel@@AEBANHH@Z ENDP			; Kernel::kernel_sigmoid
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?kernel_precomputed@Kernel@@AEBANHH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
j$ = 24
?kernel_precomputed@Kernel@@AEBANHH@Z PROC		; Kernel::kernel_precomputed, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 263
  00000	4c 8b 49 10	 mov	 r9, QWORD PTR [rcx+16]
  00004	49 63 c0	 movsxd	 rax, r8d
  00007	48 03 c0	 add	 rax, rax
  0000a	49 8b 44 c1 08	 mov	 rax, QWORD PTR [r9+rax*8+8]
  0000f	f2 0f 2c 08	 cvttsd2si ecx, QWORD PTR [rax]
  00013	48 63 c2	 movsxd	 rax, edx
  00016	48 03 c0	 add	 rax, rax
  00019	49 8b 44 c1 08	 mov	 rax, QWORD PTR [r9+rax*8+8]
  0001e	4c 63 c1	 movsxd	 r8, ecx
  00021	f2 42 0f 10 04
	c0		 movsdx	 xmm0, QWORD PTR [rax+r8*8]
; Line 267
  00027	c3		 ret	 0
?kernel_precomputed@Kernel@@AEBANHH@Z ENDP		; Kernel::kernel_precomputed
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??_GKernel@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GKernel@@UEAAPEAXI@Z PROC				; Kernel::`scalar deleting destructor', COMDAT
$LN10:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 310
  0000a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Kernel@@6B@
  00011	48 8b f9	 mov	 rdi, rcx
  00014	8b da		 mov	 ebx, edx
  00016	48 89 01	 mov	 QWORD PTR [rcx], rax
; Line 311
  00019	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0001d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??3@YAXPEAX@Z
; Line 312
  00023	48 8b 4f 18	 mov	 rcx, QWORD PTR [rdi+24]
  00027	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??3@YAXPEAX@Z
; Line 200
  0002d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7QMatrix@@6B@
  00034	48 89 07	 mov	 QWORD PTR [rdi], rax
  00037	f6 c3 01	 test	 bl, 1
  0003a	74 09		 je	 SHORT $LN8@scalar
  0003c	48 8b cf	 mov	 rcx, rdi
  0003f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??3@YAXPEAX@Z
$LN8@scalar:
  00045	48 8b c7	 mov	 rax, rdi
  00048	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00051	5f		 pop	 rdi
  00052	c3		 ret	 0
??_GKernel@@UEAAPEAXI@Z ENDP				; Kernel::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1Kernel@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1Kernel@@UEAA@XZ PROC					; Kernel::~Kernel, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 310
$LN6:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Kernel@@6B@
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	48 89 01	 mov	 QWORD PTR [rcx], rax
; Line 311
  00013	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00017	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??3@YAXPEAX@Z
; Line 312
  0001d	48 8b 4b 18	 mov	 rcx, QWORD PTR [rbx+24]
  00021	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??3@YAXPEAX@Z
; Line 200
  00027	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7QMatrix@@6B@
  0002e	48 89 03	 mov	 QWORD PTR [rbx], rax
; Line 313
  00031	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00035	5b		 pop	 rbx
  00036	c3		 ret	 0
??1Kernel@@UEAA@XZ ENDP					; Kernel::~Kernel
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?dot@Kernel@@CANAEBUsvm_node@@0@Z
_TEXT	SEGMENT
px$ = 8
py$ = 16
?dot@Kernel@@CANAEBUsvm_node@@0@Z PROC			; Kernel::dot, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 327
$LN20:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
; Line 330
  00005	44 8b 02	 mov	 r8d, DWORD PTR [rdx]
; Line 331
  00008	45 33 d2	 xor	 r10d, r10d
  0000b	4c 8b da	 mov	 r11, rdx
; Line 16
  0000e	44 39 01	 cmp	 DWORD PTR [rcx], r8d
; Line 327
  00011	48 8b d9	 mov	 rbx, rcx
  00014	0f 57 d2	 xorps	 xmm2, xmm2
; Line 16
  00017	44 0f 4c 01	 cmovl	 r8d, DWORD PTR [rcx]
; Line 331
  0001b	4d 63 c8	 movsxd	 r9, r8d
  0001e	49 83 f9 04	 cmp	 r9, 4
  00022	7c 73		 jl	 SHORT $LC14@dot
  00024	48 8b 41 08	 mov	 rax, QWORD PTR [rcx+8]
  00028	48 8b 52 08	 mov	 rdx, QWORD PTR [rdx+8]
  0002c	48 8d 48 08	 lea	 rcx, QWORD PTR [rax+8]
  00030	48 2b d0	 sub	 rdx, rax
  00033	49 8d 41 fc	 lea	 rax, QWORD PTR [r9-4]
  00037	48 c1 e8 02	 shr	 rax, 2
  0003b	48 ff c0	 inc	 rax
  0003e	4c 8d 14 85 00
	00 00 00	 lea	 r10, QWORD PTR [rax*4]
  00046	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL15@dot:
; Line 332
  00050	f2 0f 10 4c 0a
	f8		 movsdx	 xmm1, QWORD PTR [rdx+rcx-8]
  00056	f2 0f 10 04 0a	 movsdx	 xmm0, QWORD PTR [rdx+rcx]
  0005b	48 83 c1 20	 add	 rcx, 32			; 00000020H
  0005f	f2 0f 59 49 d8	 mulsd	 xmm1, QWORD PTR [rcx-40]
  00064	f2 0f 59 41 e0	 mulsd	 xmm0, QWORD PTR [rcx-32]
  00069	f2 0f 58 ca	 addsd	 xmm1, xmm2
  0006d	0f 28 d1	 movaps	 xmm2, xmm1
  00070	f2 0f 10 4c 0a
	e8		 movsdx	 xmm1, QWORD PTR [rdx+rcx-24]
  00076	f2 0f 58 d0	 addsd	 xmm2, xmm0
  0007a	f2 0f 10 44 0a
	f0		 movsdx	 xmm0, QWORD PTR [rdx+rcx-16]
  00080	f2 0f 59 49 e8	 mulsd	 xmm1, QWORD PTR [rcx-24]
  00085	f2 0f 59 41 f0	 mulsd	 xmm0, QWORD PTR [rcx-16]
  0008a	f2 0f 58 d1	 addsd	 xmm2, xmm1
  0008e	f2 0f 58 d0	 addsd	 xmm2, xmm0
  00092	48 ff c8	 dec	 rax
  00095	75 b9		 jne	 SHORT $LL15@dot
$LC14@dot:
; Line 331
  00097	4d 3b d1	 cmp	 r10, r9
  0009a	7d 29		 jge	 SHORT $LN18@dot
; Line 332
  0009c	48 8b 43 08	 mov	 rax, QWORD PTR [rbx+8]
  000a0	49 8b 53 08	 mov	 rdx, QWORD PTR [r11+8]
  000a4	48 2b d0	 sub	 rdx, rax
  000a7	4a 8d 0c d0	 lea	 rcx, QWORD PTR [rax+r10*8]
  000ab	4d 2b ca	 sub	 r9, r10
$LC10@dot:
  000ae	f2 0f 10 0c 11	 movsdx	 xmm1, QWORD PTR [rcx+rdx]
  000b3	48 83 c1 08	 add	 rcx, 8
  000b7	f2 0f 59 49 f8	 mulsd	 xmm1, QWORD PTR [rcx-8]
  000bc	f2 0f 58 d1	 addsd	 xmm2, xmm1
  000c0	49 ff c9	 dec	 r9
  000c3	75 e9		 jne	 SHORT $LC10@dot
$LN18@dot:
; Line 334
  000c5	48 8b 5c 24 08	 mov	 rbx, QWORD PTR [rsp+8]
  000ca	0f 28 c2	 movaps	 xmm0, xmm2
  000cd	c3		 ret	 0
?dot@Kernel@@CANAEBUsvm_node@@0@Z ENDP			; Kernel::dot
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1Solver@@UEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1Solver@@UEAA@XZ PROC					; Solver::~Solver, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 455
  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Solver@@6B@
  00007	48 89 01	 mov	 QWORD PTR [rcx], rax
  0000a	c3		 ret	 0
??1Solver@@UEAA@XZ ENDP					; Solver::~Solver
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?is_upper_bound@Solver@@IEAA_NH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
?is_upper_bound@Solver@@IEAA_NH@Z PROC			; Solver::is_upper_bound, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 497
  00000	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00004	4c 63 c2	 movsxd	 r8, edx
  00007	41 80 3c 08 01	 cmp	 BYTE PTR [r8+rcx], 1
  0000c	0f 94 c0	 sete	 al
  0000f	c3		 ret	 0
?is_upper_bound@Solver@@IEAA_NH@Z ENDP			; Solver::is_upper_bound
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?is_lower_bound@Solver@@IEAA_NH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
?is_lower_bound@Solver@@IEAA_NH@Z PROC			; Solver::is_lower_bound, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 498
  00000	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00004	33 c0		 xor	 eax, eax
  00006	4c 63 c2	 movsxd	 r8, edx
  00009	41 38 04 08	 cmp	 BYTE PTR [r8+rcx], al
  0000d	0f 94 c0	 sete	 al
  00010	c3		 ret	 0
?is_lower_bound@Solver@@IEAA_NH@Z ENDP			; Solver::is_lower_bound
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?is_free@Solver@@IEAA_NH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
?is_free@Solver@@IEAA_NH@Z PROC				; Solver::is_free, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 499
  00000	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00004	4c 63 c2	 movsxd	 r8, edx
  00007	41 80 3c 08 02	 cmp	 BYTE PTR [r8+rcx], 2
  0000c	0f 94 c0	 sete	 al
  0000f	c3		 ret	 0
?is_free@Solver@@IEAA_NH@Z ENDP				; Solver::is_free
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??_GSolver@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GSolver@@UEAAPEAXI@Z PROC				; Solver::`scalar deleting destructor', COMDAT
$LN8:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 455
  00006	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Solver@@6B@
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	48 89 01	 mov	 QWORD PTR [rcx], rax
  00013	f6 c2 01	 test	 dl, 1
  00016	74 06		 je	 SHORT $LN6@scalar
  00018	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??3@YAXPEAX@Z
$LN6@scalar:
  0001e	48 8b c3	 mov	 rax, rbx
  00021	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00025	5b		 pop	 rbx
  00026	c3		 ret	 0
??_GSolver@@UEAAPEAXI@Z ENDP				; Solver::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?swap_index@Solver@@IEAAXHH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
j$ = 64
?swap_index@Solver@@IEAAXHH@Z PROC			; Solver::swap_index, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 510
$LN18:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b f1	 mov	 rsi, rcx
; Line 511
  00012	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  00016	49 63 d8	 movsxd	 rbx, r8d
  00019	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0001c	48 63 fa	 movsxd	 rdi, edx
  0001f	44 8b c3	 mov	 r8d, ebx
  00022	8b d7		 mov	 edx, edi
  00024	ff 50 10	 call	 QWORD PTR [rax+16]
; Line 512
  00027	4c 8b 46 10	 mov	 r8, QWORD PTR [rsi+16]
; Line 21
  0002b	41 0f b6 04 18	 movzx	 eax, BYTE PTR [r8+rbx]
  00030	42 0f b6 14 07	 movzx	 edx, BYTE PTR [rdi+r8]
  00035	42 88 04 07	 mov	 BYTE PTR [rdi+r8], al
  00039	41 88 14 18	 mov	 BYTE PTR [r8+rbx], dl
; Line 513
  0003d	48 8b 4e 18	 mov	 rcx, QWORD PTR [rsi+24]
; Line 21
  00041	48 8b 04 d9	 mov	 rax, QWORD PTR [rcx+rbx*8]
; Line 514
  00045	48 8b 56 20	 mov	 rdx, QWORD PTR [rsi+32]
; Line 21
  00049	f2 0f 10 04 f9	 movsdx	 xmm0, QWORD PTR [rcx+rdi*8]
  0004e	48 89 04 f9	 mov	 QWORD PTR [rcx+rdi*8], rax
  00052	f2 0f 11 04 d9	 movsdx	 QWORD PTR [rcx+rbx*8], xmm0
  00057	0f b6 04 1a	 movzx	 eax, BYTE PTR [rdx+rbx]
  0005b	0f b6 0c 3a	 movzx	 ecx, BYTE PTR [rdx+rdi]
  0005f	88 04 3a	 mov	 BYTE PTR [rdx+rdi], al
  00062	88 0c 1a	 mov	 BYTE PTR [rdx+rbx], cl
; Line 515
  00065	48 8b 4e 28	 mov	 rcx, QWORD PTR [rsi+40]
; Line 21
  00069	48 8b 04 d9	 mov	 rax, QWORD PTR [rcx+rbx*8]
; Line 517
  0006d	48 8b 56 60	 mov	 rdx, QWORD PTR [rsi+96]
; Line 21
  00071	f2 0f 10 04 f9	 movsdx	 xmm0, QWORD PTR [rcx+rdi*8]
  00076	48 89 04 f9	 mov	 QWORD PTR [rcx+rdi*8], rax
  0007a	f2 0f 11 04 d9	 movsdx	 QWORD PTR [rcx+rbx*8], xmm0
; Line 516
  0007f	48 8b 4e 58	 mov	 rcx, QWORD PTR [rsi+88]
; Line 21
  00083	48 8b 04 d9	 mov	 rax, QWORD PTR [rcx+rbx*8]
  00087	f2 0f 10 04 f9	 movsdx	 xmm0, QWORD PTR [rcx+rdi*8]
  0008c	48 89 04 f9	 mov	 QWORD PTR [rcx+rdi*8], rax
  00090	f2 0f 11 04 d9	 movsdx	 QWORD PTR [rcx+rbx*8], xmm0
  00095	8b 04 9a	 mov	 eax, DWORD PTR [rdx+rbx*4]
  00098	8b 0c ba	 mov	 ecx, DWORD PTR [rdx+rdi*4]
  0009b	89 04 ba	 mov	 DWORD PTR [rdx+rdi*4], eax
  0009e	89 0c 9a	 mov	 DWORD PTR [rdx+rbx*4], ecx
; Line 518
  000a1	48 8b 4e 68	 mov	 rcx, QWORD PTR [rsi+104]
; Line 21
  000a5	48 8b 04 d9	 mov	 rax, QWORD PTR [rcx+rbx*8]
; Line 519
  000a9	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
; Line 21
  000ae	f2 0f 10 04 f9	 movsdx	 xmm0, QWORD PTR [rcx+rdi*8]
  000b3	48 89 04 f9	 mov	 QWORD PTR [rcx+rdi*8], rax
  000b7	f2 0f 11 04 d9	 movsdx	 QWORD PTR [rcx+rbx*8], xmm0
; Line 519
  000bc	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  000c1	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000c5	5f		 pop	 rdi
  000c6	c3		 ret	 0
?swap_index@Solver@@IEAAXHH@Z ENDP			; Solver::swap_index
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?reconstruct_gradient@Solver@@IEAAXXZ
_TEXT	SEGMENT
this$ = 48
?reconstruct_gradient@Solver@@IEAAXXZ PROC		; Solver::reconstruct_gradient, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 522
$LN62:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 525
  00006	8b 41 70	 mov	 eax, DWORD PTR [rcx+112]
  00009	4c 63 41 08	 movsxd	 r8, DWORD PTR [rcx+8]
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	44 3b c0	 cmp	 r8d, eax
  00013	0f 84 ad 01 00
	00		 je	 $LN5@reconstruc
; Line 528
  00019	48 89 6c 24 30	 mov	 QWORD PTR [rsp+48], rbp
  0001e	33 ed		 xor	 ebp, ebp
  00020	48 89 74 24 38	 mov	 QWORD PTR [rsp+56], rsi
  00025	48 89 7c 24 40	 mov	 QWORD PTR [rsp+64], rdi
  0002a	8b fd		 mov	 edi, ebp
; Line 530
  0002c	44 3b c0	 cmp	 r8d, eax
  0002f	7d 3a		 jge	 SHORT $LN22@reconstruc
  00031	4a 8d 14 c5 00
	00 00 00	 lea	 rdx, QWORD PTR [r8*8]
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL24@reconstruc:
; Line 531
  00040	48 8b 43 58	 mov	 rax, QWORD PTR [rbx+88]
  00044	48 8b 4b 68	 mov	 rcx, QWORD PTR [rbx+104]
  00048	41 ff c0	 inc	 r8d
  0004b	48 83 c2 08	 add	 rdx, 8
  0004f	f2 0f 10 44 02
	f8		 movsdx	 xmm0, QWORD PTR [rdx+rax-8]
  00055	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00059	f2 0f 58 44 0a
	f8		 addsd	 xmm0, QWORD PTR [rdx+rcx-8]
  0005f	f2 0f 11 44 02
	f8		 movsdx	 QWORD PTR [rdx+rax-8], xmm0
  00065	44 3b 43 70	 cmp	 r8d, DWORD PTR [rbx+112]
  00069	7c d5		 jl	 SHORT $LL24@reconstruc
$LN22@reconstruc:
  0006b	4c 63 43 08	 movsxd	 r8, DWORD PTR [rbx+8]
; Line 533
  0006f	48 8b c5	 mov	 rax, rbp
  00072	45 85 c0	 test	 r8d, r8d
  00075	7e 19		 jle	 SHORT $LN19@reconstruc
; Line 499
  00077	48 8b 53 20	 mov	 rdx, QWORD PTR [rbx+32]
  0007b	0f 1f 44 00 00	 npad	 5
$LL21@reconstruc:
  00080	80 3c 02 02	 cmp	 BYTE PTR [rdx+rax], 2
; Line 534
  00084	75 02		 jne	 SHORT $LN20@reconstruc
; Line 535
  00086	ff c7		 inc	 edi
$LN20@reconstruc:
; Line 533
  00088	48 ff c0	 inc	 rax
  0008b	49 3b c0	 cmp	 rax, r8
  0008e	7c f0		 jl	 SHORT $LL21@reconstruc
$LN19@reconstruc:
; Line 537
  00090	8d 04 3f	 lea	 eax, DWORD PTR [rdi+rdi]
  00093	41 3b c0	 cmp	 eax, r8d
  00096	7d 0c		 jge	 SHORT $LN17@reconstruc
; Line 538
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@HKJHFHIK@?6WARNING?3?5using?5?9h?50?5may?5be?5fast@
  0009f	e8 00 00 00 00	 call	 ?info@@YAXPEBDZZ	; info
$LN17@reconstruc:
; Line 540
  000a4	8b 53 70	 mov	 edx, DWORD PTR [rbx+112]
  000a7	48 63 73 08	 movsxd	 rsi, DWORD PTR [rbx+8]
  000ab	8b ca		 mov	 ecx, edx
  000ad	8b c2		 mov	 eax, edx
  000af	2b ce		 sub	 ecx, esi
  000b1	0f af c7	 imul	 eax, edi
  000b4	0f af ce	 imul	 ecx, esi
  000b7	03 c9		 add	 ecx, ecx
  000b9	3b c1		 cmp	 eax, ecx
  000bb	7e 79		 jle	 SHORT $LN16@reconstruc
; Line 542
  000bd	3b f2		 cmp	 esi, edx
  000bf	0f 8d f2 00 00
	00		 jge	 $LN60@reconstruc
  000c5	48 8d 3c f5 00
	00 00 00	 lea	 rdi, QWORD PTR [rsi*8]
  000cd	0f 1f 00	 npad	 3
$LL15@reconstruc:
; Line 544
  000d0	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  000d4	44 8b 43 08	 mov	 r8d, DWORD PTR [rbx+8]
  000d8	8b d6		 mov	 edx, esi
  000da	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  000dd	ff 10		 call	 QWORD PTR [rax]
; Line 545
  000df	48 8b d5	 mov	 rdx, rbp
  000e2	44 8b c5	 mov	 r8d, ebp
  000e5	4c 8b c8	 mov	 r9, rax
  000e8	39 53 08	 cmp	 DWORD PTR [rbx+8], edx
  000eb	7e 39		 jle	 SHORT $LN14@reconstruc
  000ed	0f 1f 00	 npad	 3
$LL12@reconstruc:
; Line 499
  000f0	48 8b 4b 20	 mov	 rcx, QWORD PTR [rbx+32]
  000f4	80 3c 0a 02	 cmp	 BYTE PTR [rdx+rcx], 2
; Line 546
  000f8	75 20		 jne	 SHORT $LN11@reconstruc
; Line 547
  000fa	f3 41 0f 10 04
	91		 movss	 xmm0, DWORD PTR [r9+rdx*4]
  00100	48 8b 43 28	 mov	 rax, QWORD PTR [rbx+40]
  00104	48 8b 4b 18	 mov	 rcx, QWORD PTR [rbx+24]
  00108	0f 5a c0	 cvtps2pd xmm0, xmm0
  0010b	f2 0f 59 04 d0	 mulsd	 xmm0, QWORD PTR [rax+rdx*8]
  00110	f2 0f 58 04 39	 addsd	 xmm0, QWORD PTR [rcx+rdi]
  00115	f2 0f 11 04 39	 movsdx	 QWORD PTR [rcx+rdi], xmm0
$LN11@reconstruc:
; Line 545
  0011a	41 ff c0	 inc	 r8d
  0011d	48 ff c2	 inc	 rdx
  00120	44 3b 43 08	 cmp	 r8d, DWORD PTR [rbx+8]
  00124	7c ca		 jl	 SHORT $LL12@reconstruc
$LN14@reconstruc:
; Line 542
  00126	ff c6		 inc	 esi
  00128	48 83 c7 08	 add	 rdi, 8
  0012c	3b 73 70	 cmp	 esi, DWORD PTR [rbx+112]
  0012f	7c 9f		 jl	 SHORT $LL15@reconstruc
; Line 550
  00131	e9 81 00 00 00	 jmp	 $LN60@reconstruc
$LN16@reconstruc:
; Line 552
  00136	85 f6		 test	 esi, esi
  00138	0f 8e 79 00 00
	00		 jle	 $LN60@reconstruc
  0013e	48 8b fd	 mov	 rdi, rbp
$LL7@reconstruc:
; Line 499
  00141	48 8b 43 20	 mov	 rax, QWORD PTR [rbx+32]
  00145	80 3c 07 02	 cmp	 BYTE PTR [rdi+rax], 2
; Line 553
  00149	75 62		 jne	 SHORT $LN6@reconstruc
; Line 555
  0014b	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  0014f	44 8b 43 70	 mov	 r8d, DWORD PTR [rbx+112]
  00153	8b d5		 mov	 edx, ebp
  00155	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00158	ff 10		 call	 QWORD PTR [rax]
; Line 556
  0015a	48 8b 4b 28	 mov	 rcx, QWORD PTR [rbx+40]
; Line 557
  0015e	4c 63 43 08	 movsxd	 r8, DWORD PTR [rbx+8]
  00162	f2 0f 10 0c f9	 movsdx	 xmm1, QWORD PTR [rcx+rdi*8]
  00167	44 3b 43 70	 cmp	 r8d, DWORD PTR [rbx+112]
  0016b	7d 40		 jge	 SHORT $LN6@reconstruc
  0016d	4a 8d 14 c5 00
	00 00 00	 lea	 rdx, QWORD PTR [r8*8]
  00175	4e 8d 0c 80	 lea	 r9, QWORD PTR [rax+r8*4]
  00179	0f 1f 80 00 00
	00 00		 npad	 7
$LL3@reconstruc:
; Line 558
  00180	f3 41 0f 10 01	 movss	 xmm0, DWORD PTR [r9]
  00185	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00189	41 ff c0	 inc	 r8d
  0018c	0f 5a c0	 cvtps2pd xmm0, xmm0
  0018f	48 83 c2 08	 add	 rdx, 8
  00193	49 83 c1 04	 add	 r9, 4
  00197	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0019b	f2 0f 58 44 10
	f8		 addsd	 xmm0, QWORD PTR [rax+rdx-8]
  001a1	f2 0f 11 44 10
	f8		 movsdx	 QWORD PTR [rax+rdx-8], xmm0
  001a7	44 3b 43 70	 cmp	 r8d, DWORD PTR [rbx+112]
  001ab	7c d3		 jl	 SHORT $LL3@reconstruc
$LN6@reconstruc:
; Line 552
  001ad	ff c5		 inc	 ebp
  001af	48 ff c7	 inc	 rdi
  001b2	3b 6b 08	 cmp	 ebp, DWORD PTR [rbx+8]
  001b5	7c 8a		 jl	 SHORT $LL7@reconstruc
$LN60@reconstruc:
  001b7	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  001bc	48 8b 6c 24 30	 mov	 rbp, QWORD PTR [rsp+48]
  001c1	48 8b 7c 24 40	 mov	 rdi, QWORD PTR [rsp+64]
$LN5@reconstruc:
; Line 561
  001c6	48 83 c4 20	 add	 rsp, 32			; 00000020H
  001ca	5b		 pop	 rbx
  001cb	c3		 ret	 0
?reconstruct_gradient@Solver@@IEAAXXZ ENDP		; Solver::reconstruct_gradient
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?select_working_set@Solver@@MEAAHAEAH0@Z
_TEXT	SEGMENT
this$ = 160
out_i$ = 168
out_j$ = 176
?select_working_set@Solver@@MEAAHAEAH0@Z PROC		; Solver::select_working_set, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 846
$LN76:
  00000	48 8b c4	 mov	 rax, rsp
  00003	57		 push	 rdi
  00004	41 54		 push	 r12
  00006	41 55		 push	 r13
  00008	41 57		 push	 r15
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H
  0000e	48 89 58 08	 mov	 QWORD PTR [rax+8], rbx
  00012	48 89 68 10	 mov	 QWORD PTR [rax+16], rbp
  00016	8b 69 08	 mov	 ebp, DWORD PTR [rcx+8]
  00019	48 89 70 18	 mov	 QWORD PTR [rax+24], rsi
  0001d	4c 89 70 d8	 mov	 QWORD PTR [rax-40], r14
; Line 855
  00021	83 cf ff	 or	 edi, -1
  00024	0f 29 70 c8	 movaps	 XMMWORD PTR [rax-56], xmm6
  00028	44 0f 29 40 a8	 movaps	 XMMWORD PTR [rax-88], xmm8
  0002d	f2 44 0f 10 05
	00 00 00 00	 movsdx	 xmm8, QWORD PTR __xmm@80000000000000008000000000000000
; Line 859
  00036	45 33 f6	 xor	 r14d, r14d
  00039	4d 8b e0	 mov	 r12, r8
  0003c	4c 8b ea	 mov	 r13, rdx
  0003f	44 0f 29 48 98	 movaps	 XMMWORD PTR [rax-104], xmm9
  00044	44 0f 29 50 88	 movaps	 XMMWORD PTR [rax-120], xmm10
  00049	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp__HUGE
  00050	48 8b d9	 mov	 rbx, rcx
  00053	44 8b ff	 mov	 r15d, edi
  00056	45 8b c6	 mov	 r8d, r14d
  00059	f2 44 0f 10 10	 movsdx	 xmm10, QWORD PTR [rax]
  0005e	41 0f 28 f2	 movaps	 xmm6, xmm10
  00062	41 0f 57 f0	 xorps	 xmm6, xmm8
  00066	44 0f 28 ce	 movaps	 xmm9, xmm6
  0006a	83 fd 04	 cmp	 ebp, 4
  0006d	0f 8c 1e 01 00
	00		 jl	 $LC46@select_wor
; Line 853
  00073	4c 8b 59 10	 mov	 r11, QWORD PTR [rcx+16]
  00077	8d 75 fd	 lea	 esi, DWORD PTR [rbp-3]
  0007a	44 8d 4f 03	 lea	 r9d, QWORD PTR [rdi+3]
  0007e	4d 8d 53 02	 lea	 r10, QWORD PTR [r11+2]
  00082	41 8b ce	 mov	 ecx, r14d
  00085	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
; Line 859
$LL59@select_wor:
; Line 497
  00090	48 8b 53 20	 mov	 rdx, QWORD PTR [rbx+32]
  00094	48 03 d1	 add	 rdx, rcx
; Line 860
  00097	41 80 3c 0b 01	 cmp	 BYTE PTR [r11+rcx], 1
  0009c	75 14		 jne	 SHORT $LN48@select_wor
; Line 497
  0009e	80 3a 01	 cmp	 BYTE PTR [rdx], 1
; Line 862
  000a1	74 29		 je	 SHORT $LN49@select_wor
; Line 863
  000a3	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  000a7	f2 0f 10 04 c8	 movsdx	 xmm0, QWORD PTR [rax+rcx*8]
  000ac	41 0f 57 c0	 xorps	 xmm0, xmm8
; Line 869
  000b0	eb 0e		 jmp	 SHORT $LN64@select_wor
$LN48@select_wor:
; Line 498
  000b2	44 38 32	 cmp	 BYTE PTR [rdx], r14b
; Line 871
  000b5	74 15		 je	 SHORT $LN49@select_wor
; Line 872
  000b7	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  000bb	f2 0f 10 04 c8	 movsdx	 xmm0, QWORD PTR [rax+rcx*8]
$LN64@select_wor:
  000c0	66 0f 2f c6	 comisd	 xmm0, xmm6
  000c4	72 06		 jb	 SHORT $LN49@select_wor
; Line 875
  000c6	41 8b f8	 mov	 edi, r8d
  000c9	0f 28 f0	 movaps	 xmm6, xmm0
$LN49@select_wor:
; Line 860
  000cc	41 80 7a ff 01	 cmp	 BYTE PTR [r10-1], 1
  000d1	75 16		 jne	 SHORT $LN51@select_wor
; Line 497
  000d3	80 7a 01 01	 cmp	 BYTE PTR [rdx+1], 1
; Line 862
  000d7	74 2d		 je	 SHORT $LN52@select_wor
; Line 863
  000d9	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  000dd	f2 0f 10 44 c8
	08		 movsdx	 xmm0, QWORD PTR [rax+rcx*8+8]
  000e3	41 0f 57 c0	 xorps	 xmm0, xmm8
; Line 869
  000e7	eb 10		 jmp	 SHORT $LN66@select_wor
$LN51@select_wor:
; Line 498
  000e9	44 38 72 01	 cmp	 BYTE PTR [rdx+1], r14b
; Line 871
  000ed	74 17		 je	 SHORT $LN52@select_wor
; Line 872
  000ef	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  000f3	f2 0f 10 44 c8
	08		 movsdx	 xmm0, QWORD PTR [rax+rcx*8+8]
$LN66@select_wor:
  000f9	66 0f 2f c6	 comisd	 xmm0, xmm6
  000fd	72 07		 jb	 SHORT $LN52@select_wor
; Line 875
  000ff	41 8d 79 ff	 lea	 edi, DWORD PTR [r9-1]
  00103	0f 28 f0	 movaps	 xmm6, xmm0
$LN52@select_wor:
; Line 860
  00106	41 80 3a 01	 cmp	 BYTE PTR [r10], 1
  0010a	75 16		 jne	 SHORT $LN54@select_wor
; Line 497
  0010c	80 7a 02 01	 cmp	 BYTE PTR [rdx+2], 1
; Line 862
  00110	74 2c		 je	 SHORT $LN55@select_wor
; Line 863
  00112	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00116	f2 0f 10 44 c8
	10		 movsdx	 xmm0, QWORD PTR [rax+rcx*8+16]
  0011c	41 0f 57 c0	 xorps	 xmm0, xmm8
; Line 869
  00120	eb 10		 jmp	 SHORT $LN68@select_wor
$LN54@select_wor:
; Line 498
  00122	44 38 72 02	 cmp	 BYTE PTR [rdx+2], r14b
; Line 871
  00126	74 16		 je	 SHORT $LN55@select_wor
; Line 872
  00128	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  0012c	f2 0f 10 44 c8
	10		 movsdx	 xmm0, QWORD PTR [rax+rcx*8+16]
$LN68@select_wor:
  00132	66 0f 2f c6	 comisd	 xmm0, xmm6
  00136	72 06		 jb	 SHORT $LN55@select_wor
; Line 875
  00138	41 8b f9	 mov	 edi, r9d
  0013b	0f 28 f0	 movaps	 xmm6, xmm0
$LN55@select_wor:
; Line 860
  0013e	41 80 7a 01 01	 cmp	 BYTE PTR [r10+1], 1
  00143	75 16		 jne	 SHORT $LN57@select_wor
; Line 497
  00145	80 7a 03 01	 cmp	 BYTE PTR [rdx+3], 1
; Line 862
  00149	74 2d		 je	 SHORT $LN58@select_wor
; Line 863
  0014b	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  0014f	f2 0f 10 44 c8
	18		 movsdx	 xmm0, QWORD PTR [rax+rcx*8+24]
  00155	41 0f 57 c0	 xorps	 xmm0, xmm8
; Line 869
  00159	eb 10		 jmp	 SHORT $LN70@select_wor
$LN57@select_wor:
; Line 498
  0015b	44 38 72 03	 cmp	 BYTE PTR [rdx+3], r14b
; Line 871
  0015f	74 17		 je	 SHORT $LN58@select_wor
; Line 872
  00161	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00165	f2 0f 10 44 c8
	18		 movsdx	 xmm0, QWORD PTR [rax+rcx*8+24]
$LN70@select_wor:
  0016b	66 0f 2f c6	 comisd	 xmm0, xmm6
  0016f	72 07		 jb	 SHORT $LN58@select_wor
; Line 875
  00171	41 8d 79 01	 lea	 edi, DWORD PTR [r9+1]
  00175	0f 28 f0	 movaps	 xmm6, xmm0
$LN58@select_wor:
; Line 884
  00178	41 83 c0 04	 add	 r8d, 4
  0017c	48 83 c1 04	 add	 rcx, 4
  00180	49 83 c2 04	 add	 r10, 4
  00184	41 83 c1 04	 add	 r9d, 4
  00188	44 3b c6	 cmp	 r8d, esi
  0018b	0f 8c ff fe ff
	ff		 jl	 $LL59@select_wor
$LC46@select_wor:
; Line 859
  00191	44 3b c5	 cmp	 r8d, ebp
  00194	7d 62		 jge	 SHORT $LN45@select_wor
; Line 860
  00196	4c 8b 4b 20	 mov	 r9, QWORD PTR [rbx+32]
  0019a	4c 8b 5b 10	 mov	 r11, QWORD PTR [rbx+16]
  0019e	49 63 c8	 movsxd	 rcx, r8d
  001a1	4c 03 c9	 add	 r9, rcx
  001a4	4c 03 d9	 add	 r11, rcx
  001a7	4c 8d 14 cd 00
	00 00 00	 lea	 r10, QWORD PTR [rcx*8]
$LC28@select_wor:
  001af	41 80 3b 01	 cmp	 BYTE PTR [r11], 1
  001b3	75 16		 jne	 SHORT $LN25@select_wor
; Line 497
  001b5	41 80 39 01	 cmp	 BYTE PTR [r9], 1
; Line 862
  001b9	74 2b		 je	 SHORT $LN27@select_wor
; Line 863
  001bb	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  001bf	f2 41 0f 10 04
	02		 movsdx	 xmm0, QWORD PTR [r10+rax]
  001c5	41 0f 57 c0	 xorps	 xmm0, xmm8
; Line 869
  001c9	eb 0f		 jmp	 SHORT $LN72@select_wor
$LN25@select_wor:
; Line 498
  001cb	45 38 31	 cmp	 BYTE PTR [r9], r14b
; Line 871
  001ce	74 16		 je	 SHORT $LN27@select_wor
; Line 872
  001d0	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  001d4	f2 41 0f 10 04
	02		 movsdx	 xmm0, QWORD PTR [r10+rax]
$LN72@select_wor:
  001da	66 0f 2f c6	 comisd	 xmm0, xmm6
  001de	72 06		 jb	 SHORT $LN27@select_wor
; Line 875
  001e0	41 8b f8	 mov	 edi, r8d
  001e3	0f 28 f0	 movaps	 xmm6, xmm0
$LN27@select_wor:
; Line 884
  001e6	41 ff c0	 inc	 r8d
  001e9	49 ff c3	 inc	 r11
  001ec	49 ff c1	 inc	 r9
  001ef	49 83 c2 08	 add	 r10, 8
  001f3	44 3b c5	 cmp	 r8d, ebp
  001f6	7c b7		 jl	 SHORT $LC28@select_wor
$LN45@select_wor:
; Line 880
  001f8	49 8b f6	 mov	 rsi, r14
; Line 881
  001fb	83 ff ff	 cmp	 edi, -1
  001fe	74 11		 je	 SHORT $LN19@select_wor
; Line 882
  00200	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  00204	44 8b c5	 mov	 r8d, ebp
  00207	8b d7		 mov	 edx, edi
  00209	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  0020c	ff 10		 call	 QWORD PTR [rax]
  0020e	48 8b f0	 mov	 rsi, rax
$LN19@select_wor:
; Line 884
  00211	44 8b 53 08	 mov	 r10d, DWORD PTR [rbx+8]
  00215	48 8b ac 24 a8
	00 00 00	 mov	 rbp, QWORD PTR [rsp+168]
  0021d	45 85 d2	 test	 r10d, r10d
  00220	0f 8e 37 01 00
	00		 jle	 $LN16@select_wor
; Line 886
  00226	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  0022a	4c 8b 43 20	 mov	 r8, QWORD PTR [rbx+32]
  0022e	f2 0f 10 2d 00
	00 00 00	 movsdx	 xmm5, QWORD PTR __real@bd719799812dea11
  00236	0f 29 7c 24 50	 movaps	 XMMWORD PTR [rsp+80], xmm7
  0023b	f2 0f 10 3d 00
	00 00 00	 movsdx	 xmm7, QWORD PTR __real@4000000000000000
; Line 896
  00243	4c 63 df	 movsxd	 r11, edi
  00246	0f 57 e4	 xorps	 xmm4, xmm4
  00249	49 8b d6	 mov	 rdx, r14
  0024c	0f 1f 40 00	 npad	 4
$LL18@select_wor:
; Line 886
  00250	41 80 3c 11 01	 cmp	 BYTE PTR [r9+rdx], 1
  00255	75 62		 jne	 SHORT $LN15@select_wor
; Line 498
  00257	41 80 3c 10 00	 cmp	 BYTE PTR [r8+rdx], 0
; Line 888
  0025c	0f 84 e7 00 00
	00		 je	 $LN17@select_wor
; Line 890
  00262	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00266	f2 0f 10 04 d0	 movsdx	 xmm0, QWORD PTR [rax+rdx*8]
; Line 891
  0026b	66 41 0f 2f c1	 comisd	 xmm0, xmm9
  00270	0f 28 d0	 movaps	 xmm2, xmm0
  00273	f2 0f 58 d6	 addsd	 xmm2, xmm6
  00277	72 04		 jb	 SHORT $LN13@select_wor
; Line 892
  00279	44 0f 28 c8	 movaps	 xmm9, xmm0
$LN13@select_wor:
; Line 893
  0027d	66 0f 2f d4	 comisd	 xmm2, xmm4
  00281	0f 86 c2 00 00
	00		 jbe	 $LN17@select_wor
; Line 896
  00287	48 8b 43 38	 mov	 rax, QWORD PTR [rbx+56]
  0028b	f3 0f 10 0c 96	 movss	 xmm1, DWORD PTR [rsi+rdx*4]
  00290	0f 5a c9	 cvtps2pd xmm1, xmm1
  00293	f2 0f 10 1c d0	 movsdx	 xmm3, QWORD PTR [rax+rdx*8]
  00298	f2 42 0f 58 1c
	d8		 addsd	 xmm3, QWORD PTR [rax+r11*8]
  0029e	43 0f be 04 19	 movsx	 eax, BYTE PTR [r9+r11]
  002a3	66 0f 6e c0	 movd	 xmm0, eax
  002a7	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  002ab	f2 0f 59 c7	 mulsd	 xmm0, xmm7
  002af	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  002b3	f2 0f 5c d9	 subsd	 xmm3, xmm1
; Line 899
  002b7	eb 60		 jmp	 SHORT $LN74@select_wor
$LN15@select_wor:
; Line 497
  002b9	41 80 3c 10 01	 cmp	 BYTE PTR [r8+rdx], 1
; Line 912
  002be	0f 84 85 00 00
	00		 je	 $LN17@select_wor
; Line 914
  002c4	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  002c8	0f 28 d6	 movaps	 xmm2, xmm6
  002cb	f2 0f 10 04 d0	 movsdx	 xmm0, QWORD PTR [rax+rdx*8]
  002d0	f2 0f 5c d0	 subsd	 xmm2, xmm0
; Line 915
  002d4	41 0f 57 c0	 xorps	 xmm0, xmm8
  002d8	66 41 0f 2f c1	 comisd	 xmm0, xmm9
  002dd	72 04		 jb	 SHORT $LN6@select_wor
; Line 916
  002df	44 0f 28 c8	 movaps	 xmm9, xmm0
$LN6@select_wor:
; Line 917
  002e3	66 0f 2f d4	 comisd	 xmm2, xmm4
  002e7	76 60		 jbe	 SHORT $LN17@select_wor
; Line 920
  002e9	48 8b 4b 38	 mov	 rcx, QWORD PTR [rbx+56]
  002ed	43 0f be 04 19	 movsx	 eax, BYTE PTR [r9+r11]
  002f2	f3 0f 10 1c 96	 movss	 xmm3, DWORD PTR [rsi+rdx*4]
  002f7	0f 5a db	 cvtps2pd xmm3, xmm3
  002fa	f2 0f 10 0c d1	 movsdx	 xmm1, QWORD PTR [rcx+rdx*8]
  002ff	66 0f 6e c0	 movd	 xmm0, eax
  00303	f2 42 0f 58 0c
	d9		 addsd	 xmm1, QWORD PTR [rcx+r11*8]
  00309	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  0030d	f2 0f 59 c7	 mulsd	 xmm0, xmm7
  00311	f2 0f 59 d8	 mulsd	 xmm3, xmm0
  00315	f2 0f 58 d9	 addsd	 xmm3, xmm1
$LN74@select_wor:
; Line 921
  00319	66 0f 2f dc	 comisd	 xmm3, xmm4
  0031d	76 0e		 jbe	 SHORT $LN4@select_wor
; Line 922
  0031f	f2 0f 59 d2	 mulsd	 xmm2, xmm2
  00323	f2 0f 5e d3	 divsd	 xmm2, xmm3
  00327	41 0f 57 d0	 xorps	 xmm2, xmm8
; Line 923
  0032b	eb 0e		 jmp	 SHORT $LN3@select_wor
$LN4@select_wor:
; Line 924
  0032d	0f 28 c2	 movaps	 xmm0, xmm2
  00330	f2 0f 59 c2	 mulsd	 xmm0, xmm2
  00334	0f 28 d0	 movaps	 xmm2, xmm0
  00337	f2 0f 5e d5	 divsd	 xmm2, xmm5
$LN3@select_wor:
; Line 926
  0033b	66 44 0f 2f d2	 comisd	 xmm10, xmm2
  00340	72 07		 jb	 SHORT $LN17@select_wor
; Line 929
  00342	44 0f 28 d2	 movaps	 xmm10, xmm2
  00346	45 8b fe	 mov	 r15d, r14d
$LN17@select_wor:
; Line 884
  00349	41 ff c6	 inc	 r14d
  0034c	48 ff c2	 inc	 rdx
  0034f	45 3b f2	 cmp	 r14d, r10d
  00352	0f 8c f8 fe ff
	ff		 jl	 $LL18@select_wor
  00358	0f 28 7c 24 50	 movaps	 xmm7, XMMWORD PTR [rsp+80]
$LN16@select_wor:
; Line 936
  0035d	f2 0f 10 43 40	 movsdx	 xmm0, QWORD PTR [rbx+64]
  00362	44 0f 28 54 24
	20		 movaps	 xmm10, XMMWORD PTR [rsp+32]
  00368	44 0f 28 44 24
	40		 movaps	 xmm8, XMMWORD PTR [rsp+64]
  0036e	4c 8b 74 24 70	 mov	 r14, QWORD PTR [rsp+112]
  00373	48 8b b4 24 b0
	00 00 00	 mov	 rsi, QWORD PTR [rsp+176]
  0037b	48 8b 9c 24 a0
	00 00 00	 mov	 rbx, QWORD PTR [rsp+160]
  00383	f2 44 0f 58 ce	 addsd	 xmm9, xmm6
  00388	66 41 0f 2f c1	 comisd	 xmm0, xmm9
  0038d	44 0f 28 4c 24
	30		 movaps	 xmm9, XMMWORD PTR [rsp+48]
  00393	0f 28 74 24 60	 movaps	 xmm6, XMMWORD PTR [rsp+96]
  00398	76 11		 jbe	 SHORT $LN1@select_wor
; Line 937
  0039a	b8 01 00 00 00	 mov	 eax, 1
; Line 942
  0039f	48 83 c4 78	 add	 rsp, 120		; 00000078H
  003a3	41 5f		 pop	 r15
  003a5	41 5d		 pop	 r13
  003a7	41 5c		 pop	 r12
  003a9	5f		 pop	 rdi
  003aa	c3		 ret	 0
$LN1@select_wor:
; Line 939
  003ab	41 89 7d 00	 mov	 DWORD PTR [r13], edi
; Line 941
  003af	33 c0		 xor	 eax, eax
  003b1	45 89 3c 24	 mov	 DWORD PTR [r12], r15d
; Line 942
  003b5	48 83 c4 78	 add	 rsp, 120		; 00000078H
  003b9	41 5f		 pop	 r15
  003bb	41 5d		 pop	 r13
  003bd	41 5c		 pop	 r12
  003bf	5f		 pop	 rdi
  003c0	c3		 ret	 0
?select_working_set@Solver@@MEAAHAEAH0@Z ENDP		; Solver::select_working_set
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?be_shrunk@Solver@@AEAA_NHNN@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
Gmax1$ = 24
Gmax2$ = 32
?be_shrunk@Solver@@AEAA_NHNN@Z PROC			; Solver::be_shrunk, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 497
  00000	48 8b 41 20	 mov	 rax, QWORD PTR [rcx+32]
  00004	4c 63 c2	 movsxd	 r8, edx
  00007	41 0f b6 14 00	 movzx	 edx, BYTE PTR [r8+rax]
  0000c	80 fa 01	 cmp	 dl, 1
; Line 946
  0000f	75 23		 jne	 SHORT $LN8@be_shrunk
; Line 948
  00011	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  00015	41 38 14 00	 cmp	 BYTE PTR [r8+rax], dl
; Line 949
  00019	48 8b 41 18	 mov	 rax, QWORD PTR [rcx+24]
  0001d	f2 42 0f 10 04
	c0		 movsdx	 xmm0, QWORD PTR [rax+r8*8]
  00023	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  0002a	75 21		 jne	 SHORT $LN7@be_shrunk
; Line 958
  0002c	66 0f 2f c2	 comisd	 xmm0, xmm2
  00030	0f 97 c0	 seta	 al
; Line 962
  00033	c3		 ret	 0
$LN8@be_shrunk:
; Line 498
  00034	84 d2		 test	 dl, dl
; Line 953
  00036	75 2f		 jne	 SHORT $LN4@be_shrunk
; Line 955
  00038	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  0003c	41 80 3c 00 01	 cmp	 BYTE PTR [r8+rax], 1
  00041	75 12		 jne	 SHORT $LN3@be_shrunk
; Line 956
  00043	48 8b 41 18	 mov	 rax, QWORD PTR [rcx+24]
  00047	f2 42 0f 10 04
	c0		 movsdx	 xmm0, QWORD PTR [rax+r8*8]
$LN7@be_shrunk:
  0004d	66 0f 2f c3	 comisd	 xmm0, xmm3
  00051	0f 97 c0	 seta	 al
; Line 962
  00054	c3		 ret	 0
$LN3@be_shrunk:
; Line 958
  00055	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00059	f2 42 0f 10 04
	c1		 movsdx	 xmm0, QWORD PTR [rcx+r8*8]
  0005f	66 0f 2f c2	 comisd	 xmm0, xmm2
  00063	0f 97 c0	 seta	 al
; Line 962
  00066	c3		 ret	 0
$LN4@be_shrunk:
; Line 961
  00067	32 c0		 xor	 al, al
; Line 962
  00069	c3		 ret	 0
?be_shrunk@Solver@@AEAA_NHNN@Z ENDP			; Solver::be_shrunk
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?do_shrinking@Solver@@MEAAXXZ
_TEXT	SEGMENT
this$ = 96
?do_shrinking@Solver@@MEAAXXZ PROC			; Solver::do_shrinking, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 965
$LN79:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 50	 sub	 rsp, 80			; 00000050H
; Line 967
  0000a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp__HUGE
  00011	0f 29 74 24 40	 movaps	 XMMWORD PTR [rsp+64], xmm6
  00016	0f 29 7c 24 30	 movaps	 XMMWORD PTR [rsp+48], xmm7
; Line 971
  0001b	33 f6		 xor	 esi, esi
  0001d	48 8b d9	 mov	 rbx, rcx
  00020	44 0f 29 44 24
	20		 movaps	 XMMWORD PTR [rsp+32], xmm8
  00026	f2 0f 10 30	 movsdx	 xmm6, QWORD PTR [rax]
  0002a	8b 41 08	 mov	 eax, DWORD PTR [rcx+8]
  0002d	f2 44 0f 10 05
	00 00 00 00	 movsdx	 xmm8, QWORD PTR __xmm@80000000000000008000000000000000
  00036	41 0f 57 f0	 xorps	 xmm6, xmm8
  0003a	0f 28 fe	 movaps	 xmm7, xmm6
  0003d	85 c0		 test	 eax, eax
  0003f	0f 8e 8a 00 00
	00		 jle	 $LN19@do_shrinki
; Line 973
  00045	4c 8b 43 20	 mov	 r8, QWORD PTR [rbx+32]
  00049	4c 8b 4b 10	 mov	 r9, QWORD PTR [rbx+16]
  0004d	8b ce		 mov	 ecx, esi
  0004f	44 8b d0	 mov	 r10d, eax
$LL21@do_shrinki:
  00052	41 80 39 01	 cmp	 BYTE PTR [r9], 1
; Line 497
  00056	41 0f b6 10	 movzx	 edx, BYTE PTR [r8]
; Line 973
  0005a	75 33		 jne	 SHORT $LN18@do_shrinki
; Line 497
  0005c	80 fa 01	 cmp	 dl, 1
; Line 975
  0005f	74 16		 je	 SHORT $LN16@do_shrinki
; Line 977
  00061	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00065	f2 0f 10 04 01	 movsdx	 xmm0, QWORD PTR [rcx+rax]
  0006a	41 0f 57 c0	 xorps	 xmm0, xmm8
  0006e	66 0f 2f c6	 comisd	 xmm0, xmm6
  00072	72 03		 jb	 SHORT $LN16@do_shrinki
; Line 978
  00074	0f 28 f0	 movaps	 xmm6, xmm0
$LN16@do_shrinki:
; Line 498
  00077	84 d2		 test	 dl, dl
; Line 980
  00079	74 45		 je	 SHORT $LN20@do_shrinki
; Line 982
  0007b	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  0007f	f2 0f 10 04 01	 movsdx	 xmm0, QWORD PTR [rcx+rax]
  00084	66 0f 2f c7	 comisd	 xmm0, xmm7
  00088	72 36		 jb	 SHORT $LN20@do_shrinki
; Line 983
  0008a	0f 28 f8	 movaps	 xmm7, xmm0
; Line 986
  0008d	eb 31		 jmp	 SHORT $LN20@do_shrinki
$LN18@do_shrinki:
; Line 497
  0008f	80 fa 01	 cmp	 dl, 1
; Line 988
  00092	74 16		 je	 SHORT $LN11@do_shrinki
; Line 990
  00094	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00098	f2 0f 10 04 01	 movsdx	 xmm0, QWORD PTR [rcx+rax]
  0009d	41 0f 57 c0	 xorps	 xmm0, xmm8
  000a1	66 0f 2f c7	 comisd	 xmm0, xmm7
  000a5	72 03		 jb	 SHORT $LN11@do_shrinki
; Line 991
  000a7	0f 28 f8	 movaps	 xmm7, xmm0
$LN11@do_shrinki:
; Line 498
  000aa	84 d2		 test	 dl, dl
; Line 993
  000ac	74 12		 je	 SHORT $LN20@do_shrinki
; Line 995
  000ae	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  000b2	f2 0f 10 04 01	 movsdx	 xmm0, QWORD PTR [rcx+rax]
  000b7	66 0f 2f c6	 comisd	 xmm0, xmm6
  000bb	72 03		 jb	 SHORT $LN20@do_shrinki
; Line 996
  000bd	0f 28 f0	 movaps	 xmm6, xmm0
$LN20@do_shrinki:
; Line 971
  000c0	49 ff c1	 inc	 r9
  000c3	49 ff c0	 inc	 r8
  000c6	48 83 c1 08	 add	 rcx, 8
  000ca	49 ff ca	 dec	 r10
  000cd	75 83		 jne	 SHORT $LL21@do_shrinki
$LN19@do_shrinki:
; Line 1001
  000cf	40 38 73 74	 cmp	 BYTE PTR [rbx+116], sil
  000d3	75 38		 jne	 SHORT $LN8@do_shrinki
  000d5	f2 0f 10 43 40	 movsdx	 xmm0, QWORD PTR [rbx+64]
  000da	0f 28 cf	 movaps	 xmm1, xmm7
  000dd	f2 0f 58 ce	 addsd	 xmm1, xmm6
  000e1	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4024000000000000
  000e9	66 0f 2f c1	 comisd	 xmm0, xmm1
  000ed	72 1e		 jb	 SHORT $LN8@do_shrinki
; Line 1004
  000ef	48 8b cb	 mov	 rcx, rbx
  000f2	c6 43 74 01	 mov	 BYTE PTR [rbx+116], 1
  000f6	e8 00 00 00 00	 call	 ?reconstruct_gradient@Solver@@IEAAXXZ ; Solver::reconstruct_gradient
; Line 1005
  000fb	8b 43 70	 mov	 eax, DWORD PTR [rbx+112]
; Line 1006
  000fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01NBENCBCI@?$CK?$AA@
  00105	89 43 08	 mov	 DWORD PTR [rbx+8], eax
  00108	e8 00 00 00 00	 call	 ?info@@YAXPEBDZZ	; info
$LN8@do_shrinki:
; Line 1009
  0010d	39 73 08	 cmp	 DWORD PTR [rbx+8], esi
  00110	0f 8e e6 00 00
	00		 jle	 $LN5@do_shrinki
  00116	48 89 7c 24 60	 mov	 QWORD PTR [rsp+96], rdi
  0011b	48 8b fe	 mov	 rdi, rsi
  0011e	66 90		 npad	 2
$LL7@do_shrinki:
; Line 497
  00120	48 8b 53 20	 mov	 rdx, QWORD PTR [rbx+32]
  00124	0f b6 04 3a	 movzx	 eax, BYTE PTR [rdx+rdi]
  00128	3c 01		 cmp	 al, 1
; Line 946
  0012a	75 1d		 jne	 SHORT $LN39@do_shrinki
; Line 948
  0012c	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00130	80 3c 07 01	 cmp	 BYTE PTR [rdi+rax], 1
; Line 949
  00134	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00138	f2 0f 10 04 f8	 movsdx	 xmm0, QWORD PTR [rax+rdi*8]
  0013d	41 0f 57 c0	 xorps	 xmm0, xmm8
  00141	74 27		 je	 SHORT $LN74@do_shrinki
; Line 951
  00143	66 0f 2f c7	 comisd	 xmm0, xmm7
  00147	eb 25		 jmp	 SHORT $LN75@do_shrinki
$LN39@do_shrinki:
; Line 498
  00149	84 c0		 test	 al, al
; Line 953
  0014b	0f 85 98 00 00
	00		 jne	 $LN6@do_shrinki
; Line 955
  00151	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00155	80 3c 07 01	 cmp	 BYTE PTR [rdi+rax], 1
; Line 956
  00159	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  0015d	f2 0f 10 04 f8	 movsdx	 xmm0, QWORD PTR [rax+rdi*8]
  00162	75 06		 jne	 SHORT $LN74@do_shrinki
  00164	66 0f 2f c7	 comisd	 xmm0, xmm7
  00168	eb 04		 jmp	 SHORT $LN75@do_shrinki
$LN74@do_shrinki:
; Line 958
  0016a	66 0f 2f c6	 comisd	 xmm0, xmm6
$LN75@do_shrinki:
  0016e	0f 97 c0	 seta	 al
; Line 1010
  00171	84 c0		 test	 al, al
  00173	74 74		 je	 SHORT $LN6@do_shrinki
; Line 1012
  00175	ff 4b 08	 dec	 DWORD PTR [rbx+8]
  00178	44 8b 43 08	 mov	 r8d, DWORD PTR [rbx+8]
; Line 1013
  0017c	44 3b c6	 cmp	 r8d, esi
  0017f	7e 68		 jle	 SHORT $LN6@do_shrinki
$LL3@do_shrinki:
; Line 497
  00181	49 63 c8	 movsxd	 rcx, r8d
  00184	0f b6 04 11	 movzx	 eax, BYTE PTR [rcx+rdx]
  00188	3c 01		 cmp	 al, 1
; Line 946
  0018a	75 1d		 jne	 SHORT $LN53@do_shrinki
; Line 948
  0018c	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00190	80 3c 01 01	 cmp	 BYTE PTR [rcx+rax], 1
; Line 949
  00194	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00198	f2 0f 10 04 c8	 movsdx	 xmm0, QWORD PTR [rax+rcx*8]
  0019d	41 0f 57 c0	 xorps	 xmm0, xmm8
  001a1	74 23		 je	 SHORT $LN76@do_shrinki
; Line 951
  001a3	66 0f 2f c7	 comisd	 xmm0, xmm7
  001a7	eb 21		 jmp	 SHORT $LN77@do_shrinki
$LN53@do_shrinki:
; Line 498
  001a9	84 c0		 test	 al, al
; Line 953
  001ab	75 32		 jne	 SHORT $LN63@do_shrinki
; Line 955
  001ad	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  001b1	80 3c 01 01	 cmp	 BYTE PTR [rcx+rax], 1
; Line 956
  001b5	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  001b9	f2 0f 10 04 c8	 movsdx	 xmm0, QWORD PTR [rax+rcx*8]
  001be	75 06		 jne	 SHORT $LN76@do_shrinki
  001c0	66 0f 2f c7	 comisd	 xmm0, xmm7
  001c4	eb 04		 jmp	 SHORT $LN77@do_shrinki
$LN76@do_shrinki:
; Line 958
  001c6	66 0f 2f c6	 comisd	 xmm0, xmm6
$LN77@do_shrinki:
  001ca	0f 97 c0	 seta	 al
; Line 1015
  001cd	84 c0		 test	 al, al
  001cf	74 0e		 je	 SHORT $LN63@do_shrinki
; Line 1020
  001d1	41 ff c8	 dec	 r8d
  001d4	44 89 43 08	 mov	 DWORD PTR [rbx+8], r8d
  001d8	44 3b c6	 cmp	 r8d, esi
  001db	7f a4		 jg	 SHORT $LL3@do_shrinki
; Line 1013
  001dd	eb 0a		 jmp	 SHORT $LN6@do_shrinki
$LN63@do_shrinki:
; Line 1017
  001df	8b d6		 mov	 edx, esi
  001e1	48 8b cb	 mov	 rcx, rbx
  001e4	e8 00 00 00 00	 call	 ?swap_index@Solver@@IEAAXHH@Z ; Solver::swap_index
$LN6@do_shrinki:
; Line 1009
  001e9	ff c6		 inc	 esi
  001eb	48 ff c7	 inc	 rdi
  001ee	3b 73 08	 cmp	 esi, DWORD PTR [rbx+8]
  001f1	0f 8c 29 ff ff
	ff		 jl	 $LL7@do_shrinki
  001f7	48 8b 7c 24 60	 mov	 rdi, QWORD PTR [rsp+96]
$LN5@do_shrinki:
; Line 1023
  001fc	48 8b 5c 24 68	 mov	 rbx, QWORD PTR [rsp+104]
  00201	0f 28 74 24 40	 movaps	 xmm6, XMMWORD PTR [rsp+64]
  00206	0f 28 7c 24 30	 movaps	 xmm7, XMMWORD PTR [rsp+48]
  0020b	44 0f 28 44 24
	20		 movaps	 xmm8, XMMWORD PTR [rsp+32]
  00211	48 83 c4 50	 add	 rsp, 80			; 00000050H
  00215	5e		 pop	 rsi
  00216	c3		 ret	 0
?do_shrinking@Solver@@MEAAXXZ ENDP			; Solver::do_shrinking
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?calculate_rho@Solver@@MEAANXZ
_TEXT	SEGMENT
this$ = 16
?calculate_rho@Solver@@MEAANXZ PROC			; Solver::calculate_rho, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 1026
$LN41:
  00000	48 83 ec 08	 sub	 rsp, 8
; Line 1029
  00004	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp__HUGE
; Line 1030
  0000b	4c 63 51 08	 movsxd	 r10, DWORD PTR [rcx+8]
  0000f	45 33 c9	 xor	 r9d, r9d
  00012	0f 57 db	 xorps	 xmm3, xmm3
  00015	41 8b d1	 mov	 edx, r9d
  00018	f2 0f 10 10	 movsdx	 xmm2, QWORD PTR [rax]
  0001c	0f 28 ca	 movaps	 xmm1, xmm2
  0001f	0f 57 0d 00 00
	00 00		 xorps	 xmm1, QWORD PTR __xmm@80000000000000008000000000000000
  00026	4d 85 d2	 test	 r10, r10
  00029	0f 8e 8d 00 00
	00		 jle	 $LN2@calculate_
; Line 1032
  0002f	4c 8b 59 10	 mov	 r11, QWORD PTR [rcx+16]
  00033	4c 8b 41 18	 mov	 r8, QWORD PTR [rcx+24]
  00037	48 89 1c 24	 mov	 QWORD PTR [rsp], rbx
; Line 497
  0003b	48 8b 59 20	 mov	 rbx, QWORD PTR [rcx+32]
  0003f	90		 npad	 1
$LL13@calculate_:
; Line 1032
  00040	41 0f be 0c 13	 movsx	 ecx, BYTE PTR [r11+rdx]
  00045	8b c1		 mov	 eax, ecx
  00047	66 0f 6e c0	 movd	 xmm0, eax
; Line 497
  0004b	0f b6 04 13	 movzx	 eax, BYTE PTR [rbx+rdx]
; Line 1032
  0004f	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00053	f2 41 0f 59 00	 mulsd	 xmm0, QWORD PTR [r8]
; Line 497
  00058	3c 01		 cmp	 al, 1
; Line 1034
  0005a	75 10		 jne	 SHORT $LN10@calculate_
; Line 1036
  0005c	80 f9 ff	 cmp	 cl, -1
  0005f	75 1f		 jne	 SHORT $LN5@calculate_
; Line 16
  00061	66 0f 2f c2	 comisd	 xmm0, xmm2
  00065	77 2b		 ja	 SHORT $LN12@calculate_
  00067	0f 28 d0	 movaps	 xmm2, xmm0
; Line 1038
  0006a	eb 26		 jmp	 SHORT $LN12@calculate_
$LN10@calculate_:
; Line 498
  0006c	84 c0		 test	 al, al
; Line 1041
  0006e	75 1b		 jne	 SHORT $LN6@calculate_
; Line 1043
  00070	80 f9 01	 cmp	 cl, 1
  00073	75 0b		 jne	 SHORT $LN5@calculate_
; Line 16
  00075	66 0f 2f c2	 comisd	 xmm0, xmm2
  00079	77 17		 ja	 SHORT $LN12@calculate_
  0007b	0f 28 d0	 movaps	 xmm2, xmm0
; Line 1045
  0007e	eb 12		 jmp	 SHORT $LN12@calculate_
$LN5@calculate_:
; Line 19
  00080	66 0f 2f c8	 comisd	 xmm1, xmm0
  00084	77 0c		 ja	 SHORT $LN12@calculate_
  00086	0f 28 c8	 movaps	 xmm1, xmm0
; Line 1048
  00089	eb 07		 jmp	 SHORT $LN12@calculate_
$LN6@calculate_:
; Line 1050
  0008b	41 ff c1	 inc	 r9d
; Line 1051
  0008e	f2 0f 58 d8	 addsd	 xmm3, xmm0
$LN12@calculate_:
; Line 1030
  00092	48 ff c2	 inc	 rdx
  00095	49 83 c0 08	 add	 r8, 8
  00099	49 3b d2	 cmp	 rdx, r10
  0009c	7c a2		 jl	 SHORT $LL13@calculate_
; Line 1055
  0009e	48 8b 1c 24	 mov	 rbx, QWORD PTR [rsp]
  000a2	45 85 c9	 test	 r9d, r9d
  000a5	7e 15		 jle	 SHORT $LN2@calculate_
; Line 1056
  000a7	66 41 0f 6e c9	 movd	 xmm1, r9d
  000ac	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  000b0	f2 0f 5e d9	 divsd	 xmm3, xmm1
; Line 1060
  000b4	0f 28 c3	 movaps	 xmm0, xmm3
; Line 1061
  000b7	48 83 c4 08	 add	 rsp, 8
  000bb	c3		 ret	 0
$LN2@calculate_:
; Line 1058
  000bc	f2 0f 58 ca	 addsd	 xmm1, xmm2
  000c0	f2 0f 59 0d 00
	00 00 00	 mulsd	 xmm1, QWORD PTR __real@3fe0000000000000
; Line 1060
  000c8	0f 28 c1	 movaps	 xmm0, xmm1
; Line 1061
  000cb	48 83 c4 08	 add	 rsp, 8
  000cf	c3		 ret	 0
?calculate_rho@Solver@@MEAANXZ ENDP			; Solver::calculate_rho
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??_GSolver_NU@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GSolver_NU@@UEAAPEAXI@Z PROC				; Solver_NU::`scalar deleting destructor', COMDAT
$LN10:
  00000	40 53		 push	 rbx
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 455
  00006	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Solver@@6B@
  0000d	48 8b d9	 mov	 rbx, rcx
  00010	48 89 01	 mov	 QWORD PTR [rcx], rax
  00013	f6 c2 01	 test	 dl, 1
  00016	74 06		 je	 SHORT $LN8@scalar
  00018	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??3@YAXPEAX@Z
$LN8@scalar:
  0001e	48 8b c3	 mov	 rax, rbx
  00021	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00025	5b		 pop	 rbx
  00026	c3		 ret	 0
??_GSolver_NU@@UEAAPEAXI@Z ENDP				; Solver_NU::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1Solver_NU@@UEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1Solver_NU@@UEAA@XZ PROC				; Solver_NU::~Solver_NU, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 455
  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Solver@@6B@
  00007	48 89 01	 mov	 QWORD PTR [rcx], rax
  0000a	c3		 ret	 0
??1Solver_NU@@UEAA@XZ ENDP				; Solver_NU::~Solver_NU
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?select_working_set@Solver_NU@@EEAAHAEAH0@Z
_TEXT	SEGMENT
this$ = 208
out_i$ = 216
out_j$ = 224
?select_working_set@Solver_NU@@EEAAHAEAH0@Z PROC	; Solver_NU::select_working_set, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 1089
$LN74:
  00000	48 8b c4	 mov	 rax, rsp
  00003	4c 89 40 18	 mov	 QWORD PTR [rax+24], r8
  00007	48 89 50 10	 mov	 QWORD PTR [rax+16], rdx
  0000b	53		 push	 rbx
  0000c	41 55		 push	 r13
  0000e	41 56		 push	 r14
  00010	41 57		 push	 r15
  00012	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  00019	48 89 68 08	 mov	 QWORD PTR [rax+8], rbp
  0001d	8b 69 08	 mov	 ebp, DWORD PTR [rcx+8]
  00020	48 89 70 d8	 mov	 QWORD PTR [rax-40], rsi
  00024	48 89 78 d0	 mov	 QWORD PTR [rax-48], rdi
  00028	4c 89 60 c8	 mov	 QWORD PTR [rax-56], r12
; Line 1098
  0002c	41 83 cf ff	 or	 r15d, -1
  00030	0f 29 70 b8	 movaps	 XMMWORD PTR [rax-72], xmm6
  00034	0f 29 78 a8	 movaps	 XMMWORD PTR [rax-88], xmm7
  00038	44 0f 29 48 88	 movaps	 XMMWORD PTR [rax-120], xmm9
  0003d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp__HUGE
  00044	f2 44 0f 10 0d
	00 00 00 00	 movsdx	 xmm9, QWORD PTR __xmm@80000000000000008000000000000000
; Line 1107
  0004d	45 33 e4	 xor	 r12d, r12d
  00050	44 0f 29 54 24
	40		 movaps	 XMMWORD PTR [rsp+64], xmm10
  00056	44 0f 29 5c 24
	30		 movaps	 XMMWORD PTR [rsp+48], xmm11
  0005c	44 0f 29 64 24
	20		 movaps	 XMMWORD PTR [rsp+32], xmm12
  00062	48 8b d9	 mov	 rbx, rcx
  00065	45 8b f7	 mov	 r14d, r15d
  00068	45 8b ef	 mov	 r13d, r15d
  0006b	45 8b c4	 mov	 r8d, r12d
  0006e	f2 44 0f 10 10	 movsdx	 xmm10, QWORD PTR [rax]
  00073	41 0f 28 f2	 movaps	 xmm6, xmm10
  00077	41 0f 57 f1	 xorps	 xmm6, xmm9
  0007b	44 0f 28 de	 movaps	 xmm11, xmm6
  0007f	0f 28 fe	 movaps	 xmm7, xmm6
  00082	44 0f 28 e6	 movaps	 xmm12, xmm6
  00086	83 fd 04	 cmp	 ebp, 4
  00089	0f 8c 45 01 00
	00		 jl	 $LC53@select_wor
; Line 1096
  0008f	4c 8b 59 10	 mov	 r11, QWORD PTR [rcx+16]
  00093	8d 7d fd	 lea	 edi, DWORD PTR [rbp-3]
  00096	45 8d 4f 03	 lea	 r9d, QWORD PTR [r15+3]
  0009a	4d 8d 53 02	 lea	 r10, QWORD PTR [r11+2]
  0009e	41 8b cc	 mov	 ecx, r12d
; Line 1107
$LL66@select_wor:
; Line 497
  000a1	48 8b 53 20	 mov	 rdx, QWORD PTR [rbx+32]
  000a5	48 03 d1	 add	 rdx, rcx
; Line 1108
  000a8	41 80 3c 0b 01	 cmp	 BYTE PTR [r11+rcx], 1
  000ad	75 20		 jne	 SHORT $LN55@select_wor
; Line 497
  000af	80 3a 01	 cmp	 BYTE PTR [rdx], 1
; Line 1110
  000b2	74 35		 je	 SHORT $LN56@select_wor
; Line 1111
  000b4	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  000b8	f2 0f 10 04 c8	 movsdx	 xmm0, QWORD PTR [rax+rcx*8]
  000bd	41 0f 57 c1	 xorps	 xmm0, xmm9
  000c1	66 0f 2f c6	 comisd	 xmm0, xmm6
  000c5	72 22		 jb	 SHORT $LN56@select_wor
; Line 1113
  000c7	0f 28 f0	 movaps	 xmm6, xmm0
; Line 1114
  000ca	45 8b f8	 mov	 r15d, r8d
; Line 1117
  000cd	eb 1a		 jmp	 SHORT $LN56@select_wor
$LN55@select_wor:
; Line 498
  000cf	44 38 22	 cmp	 BYTE PTR [rdx], r12b
; Line 1119
  000d2	74 15		 je	 SHORT $LN56@select_wor
; Line 1120
  000d4	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  000d8	f2 0f 10 04 c8	 movsdx	 xmm0, QWORD PTR [rax+rcx*8]
  000dd	66 0f 2f c7	 comisd	 xmm0, xmm7
  000e1	72 06		 jb	 SHORT $LN56@select_wor
; Line 1122
  000e3	0f 28 f8	 movaps	 xmm7, xmm0
; Line 1123
  000e6	45 8b f0	 mov	 r14d, r8d
$LN56@select_wor:
; Line 1108
  000e9	41 80 7a ff 01	 cmp	 BYTE PTR [r10-1], 1
  000ee	75 23		 jne	 SHORT $LN58@select_wor
; Line 497
  000f0	80 7a 01 01	 cmp	 BYTE PTR [rdx+1], 1
; Line 1110
  000f4	74 3a		 je	 SHORT $LN59@select_wor
; Line 1111
  000f6	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  000fa	f2 0f 10 44 c8
	08		 movsdx	 xmm0, QWORD PTR [rax+rcx*8+8]
  00100	41 0f 57 c1	 xorps	 xmm0, xmm9
  00104	66 0f 2f c6	 comisd	 xmm0, xmm6
  00108	72 26		 jb	 SHORT $LN59@select_wor
; Line 1113
  0010a	0f 28 f0	 movaps	 xmm6, xmm0
; Line 1114
  0010d	45 8d 79 ff	 lea	 r15d, DWORD PTR [r9-1]
; Line 1117
  00111	eb 1d		 jmp	 SHORT $LN59@select_wor
$LN58@select_wor:
; Line 498
  00113	44 38 62 01	 cmp	 BYTE PTR [rdx+1], r12b
; Line 1119
  00117	74 17		 je	 SHORT $LN59@select_wor
; Line 1120
  00119	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  0011d	f2 0f 10 44 c8
	08		 movsdx	 xmm0, QWORD PTR [rax+rcx*8+8]
  00123	66 0f 2f c7	 comisd	 xmm0, xmm7
  00127	72 07		 jb	 SHORT $LN59@select_wor
; Line 1122
  00129	0f 28 f8	 movaps	 xmm7, xmm0
; Line 1123
  0012c	45 8d 71 ff	 lea	 r14d, DWORD PTR [r9-1]
$LN59@select_wor:
; Line 1108
  00130	41 80 3a 01	 cmp	 BYTE PTR [r10], 1
  00134	75 22		 jne	 SHORT $LN61@select_wor
; Line 497
  00136	80 7a 02 01	 cmp	 BYTE PTR [rdx+2], 1
; Line 1110
  0013a	74 38		 je	 SHORT $LN62@select_wor
; Line 1111
  0013c	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00140	f2 0f 10 44 c8
	10		 movsdx	 xmm0, QWORD PTR [rax+rcx*8+16]
  00146	41 0f 57 c1	 xorps	 xmm0, xmm9
  0014a	66 0f 2f c6	 comisd	 xmm0, xmm6
  0014e	72 24		 jb	 SHORT $LN62@select_wor
; Line 1113
  00150	0f 28 f0	 movaps	 xmm6, xmm0
; Line 1114
  00153	45 8b f9	 mov	 r15d, r9d
; Line 1117
  00156	eb 1c		 jmp	 SHORT $LN62@select_wor
$LN61@select_wor:
; Line 498
  00158	44 38 62 02	 cmp	 BYTE PTR [rdx+2], r12b
; Line 1119
  0015c	74 16		 je	 SHORT $LN62@select_wor
; Line 1120
  0015e	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00162	f2 0f 10 44 c8
	10		 movsdx	 xmm0, QWORD PTR [rax+rcx*8+16]
  00168	66 0f 2f c7	 comisd	 xmm0, xmm7
  0016c	72 06		 jb	 SHORT $LN62@select_wor
; Line 1122
  0016e	0f 28 f8	 movaps	 xmm7, xmm0
; Line 1123
  00171	45 8b f1	 mov	 r14d, r9d
$LN62@select_wor:
; Line 1108
  00174	41 80 7a 01 01	 cmp	 BYTE PTR [r10+1], 1
  00179	75 23		 jne	 SHORT $LN64@select_wor
; Line 497
  0017b	80 7a 03 01	 cmp	 BYTE PTR [rdx+3], 1
; Line 1110
  0017f	74 3a		 je	 SHORT $LN65@select_wor
; Line 1111
  00181	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00185	f2 0f 10 44 c8
	18		 movsdx	 xmm0, QWORD PTR [rax+rcx*8+24]
  0018b	41 0f 57 c1	 xorps	 xmm0, xmm9
  0018f	66 0f 2f c6	 comisd	 xmm0, xmm6
  00193	72 26		 jb	 SHORT $LN65@select_wor
; Line 1113
  00195	0f 28 f0	 movaps	 xmm6, xmm0
; Line 1114
  00198	45 8d 79 01	 lea	 r15d, DWORD PTR [r9+1]
; Line 1117
  0019c	eb 1d		 jmp	 SHORT $LN65@select_wor
$LN64@select_wor:
; Line 498
  0019e	44 38 62 03	 cmp	 BYTE PTR [rdx+3], r12b
; Line 1119
  001a2	74 17		 je	 SHORT $LN65@select_wor
; Line 1120
  001a4	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  001a8	f2 0f 10 44 c8
	18		 movsdx	 xmm0, QWORD PTR [rax+rcx*8+24]
  001ae	66 0f 2f c7	 comisd	 xmm0, xmm7
  001b2	72 07		 jb	 SHORT $LN65@select_wor
; Line 1122
  001b4	0f 28 f8	 movaps	 xmm7, xmm0
; Line 1123
  001b7	45 8d 71 01	 lea	 r14d, DWORD PTR [r9+1]
$LN65@select_wor:
; Line 1136
  001bb	41 83 c0 04	 add	 r8d, 4
  001bf	48 83 c1 04	 add	 rcx, 4
  001c3	49 83 c2 04	 add	 r10, 4
  001c7	41 83 c1 04	 add	 r9d, 4
  001cb	44 3b c7	 cmp	 r8d, edi
  001ce	0f 8c cd fe ff
	ff		 jl	 $LL66@select_wor
$LC53@select_wor:
; Line 1107
  001d4	44 3b c5	 cmp	 r8d, ebp
  001d7	7d 6e		 jge	 SHORT $LN52@select_wor
; Line 1108
  001d9	4c 8b 4b 20	 mov	 r9, QWORD PTR [rbx+32]
  001dd	4c 8b 5b 10	 mov	 r11, QWORD PTR [rbx+16]
  001e1	49 63 c8	 movsxd	 rcx, r8d
  001e4	4c 03 c9	 add	 r9, rcx
  001e7	4c 03 d9	 add	 r11, rcx
  001ea	4c 8d 14 cd 00
	00 00 00	 lea	 r10, QWORD PTR [rcx*8]
$LC31@select_wor:
  001f2	41 80 3b 01	 cmp	 BYTE PTR [r11], 1
  001f6	75 22		 jne	 SHORT $LN28@select_wor
; Line 497
  001f8	41 80 39 01	 cmp	 BYTE PTR [r9], 1
; Line 1110
  001fc	74 37		 je	 SHORT $LN30@select_wor
; Line 1111
  001fe	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00202	f2 42 0f 10 04
	10		 movsdx	 xmm0, QWORD PTR [rax+r10]
  00208	41 0f 57 c1	 xorps	 xmm0, xmm9
  0020c	66 0f 2f c6	 comisd	 xmm0, xmm6
  00210	72 23		 jb	 SHORT $LN30@select_wor
; Line 1113
  00212	0f 28 f0	 movaps	 xmm6, xmm0
; Line 1114
  00215	45 8b f8	 mov	 r15d, r8d
; Line 1117
  00218	eb 1b		 jmp	 SHORT $LN30@select_wor
$LN28@select_wor:
; Line 498
  0021a	45 38 21	 cmp	 BYTE PTR [r9], r12b
; Line 1119
  0021d	74 16		 je	 SHORT $LN30@select_wor
; Line 1120
  0021f	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00223	f2 41 0f 10 04
	02		 movsdx	 xmm0, QWORD PTR [r10+rax]
  00229	66 0f 2f c7	 comisd	 xmm0, xmm7
  0022d	72 06		 jb	 SHORT $LN30@select_wor
; Line 1122
  0022f	0f 28 f8	 movaps	 xmm7, xmm0
; Line 1123
  00232	45 8b f0	 mov	 r14d, r8d
$LN30@select_wor:
; Line 1136
  00235	41 ff c0	 inc	 r8d
  00238	49 ff c3	 inc	 r11
  0023b	49 ff c1	 inc	 r9
  0023e	49 83 c2 08	 add	 r10, 8
  00242	44 3b c5	 cmp	 r8d, ebp
  00245	7c ab		 jl	 SHORT $LC31@select_wor
$LN52@select_wor:
; Line 1129
  00247	49 8b f4	 mov	 rsi, r12
; Line 1130
  0024a	49 8b fc	 mov	 rdi, r12
; Line 1131
  0024d	41 83 ff ff	 cmp	 r15d, -1
  00251	74 12		 je	 SHORT $LN22@select_wor
; Line 1132
  00253	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  00257	44 8b c5	 mov	 r8d, ebp
  0025a	41 8b d7	 mov	 edx, r15d
  0025d	48 8b 01	 mov	 rax, QWORD PTR [rcx]
  00260	ff 10		 call	 QWORD PTR [rax]
  00262	48 8b f0	 mov	 rsi, rax
$LN22@select_wor:
; Line 1133
  00265	48 8b ac 24 d0
	00 00 00	 mov	 rbp, QWORD PTR [rsp+208]
  0026d	41 83 fe ff	 cmp	 r14d, -1
  00271	74 14		 je	 SHORT $LN21@select_wor
; Line 1134
  00273	48 8b 4b 30	 mov	 rcx, QWORD PTR [rbx+48]
  00277	44 8b 43 08	 mov	 r8d, DWORD PTR [rbx+8]
  0027b	41 8b d6	 mov	 edx, r14d
  0027e	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  00281	41 ff 11	 call	 QWORD PTR [r9]
  00284	48 8b f8	 mov	 rdi, rax
$LN21@select_wor:
; Line 1136
  00287	44 8b 4b 08	 mov	 r9d, DWORD PTR [rbx+8]
  0028b	45 85 c9	 test	 r9d, r9d
  0028e	0f 8e 0c 01 00
	00		 jle	 $LN18@select_wor
; Line 1138
  00294	4c 8b 43 10	 mov	 r8, QWORD PTR [rbx+16]
  00298	48 8b 53 20	 mov	 rdx, QWORD PTR [rbx+32]
  0029c	f2 0f 10 2d 00
	00 00 00	 movsdx	 xmm5, QWORD PTR __real@bd719799812dea11
  002a4	44 0f 29 44 24
	60		 movaps	 XMMWORD PTR [rsp+96], xmm8
  002aa	f3 44 0f 10 05
	00 00 00 00	 movss	 xmm8, DWORD PTR __real@40000000
; Line 1148
  002b3	4d 63 d7	 movsxd	 r10, r15d
  002b6	0f 57 e4	 xorps	 xmm4, xmm4
; Line 1172
  002b9	4d 63 de	 movsxd	 r11, r14d
  002bc	49 8b cc	 mov	 rcx, r12
  002bf	48 2b f7	 sub	 rsi, rdi
$LL20@select_wor:
; Line 1138
  002c2	41 80 38 01	 cmp	 BYTE PTR [r8], 1
  002c6	75 3f		 jne	 SHORT $LN17@select_wor
; Line 498
  002c8	80 3a 00	 cmp	 BYTE PTR [rdx], 0
; Line 1140
  002cb	0f 84 af 00 00
	00		 je	 $LN19@select_wor
; Line 1142
  002d1	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  002d5	f2 0f 10 04 01	 movsdx	 xmm0, QWORD PTR [rcx+rax]
; Line 1143
  002da	66 41 0f 2f c3	 comisd	 xmm0, xmm11
  002df	0f 28 d0	 movaps	 xmm2, xmm0
  002e2	f2 0f 58 d6	 addsd	 xmm2, xmm6
  002e6	72 04		 jb	 SHORT $LN15@select_wor
; Line 1144
  002e8	44 0f 28 d8	 movaps	 xmm11, xmm0
$LN15@select_wor:
; Line 1145
  002ec	66 0f 2f d4	 comisd	 xmm2, xmm4
  002f0	0f 86 8a 00 00
	00		 jbe	 $LN19@select_wor
; Line 1148
  002f6	48 8b 43 38	 mov	 rax, QWORD PTR [rbx+56]
  002fa	f3 0f 10 04 3e	 movss	 xmm0, DWORD PTR [rsi+rdi]
  002ff	f2 42 0f 10 1c
	d0		 movsdx	 xmm3, QWORD PTR [rax+r10*8]
; Line 1151
  00305	eb 38		 jmp	 SHORT $LN72@select_wor
$LN17@select_wor:
; Line 497
  00307	80 3a 01	 cmp	 BYTE PTR [rdx], 1
; Line 1164
  0030a	74 74		 je	 SHORT $LN19@select_wor
; Line 1166
  0030c	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00310	0f 28 d7	 movaps	 xmm2, xmm7
  00313	f2 0f 10 04 01	 movsdx	 xmm0, QWORD PTR [rcx+rax]
  00318	f2 0f 5c d0	 subsd	 xmm2, xmm0
; Line 1167
  0031c	41 0f 57 c1	 xorps	 xmm0, xmm9
  00320	66 41 0f 2f c4	 comisd	 xmm0, xmm12
  00325	72 04		 jb	 SHORT $LN8@select_wor
; Line 1168
  00327	44 0f 28 e0	 movaps	 xmm12, xmm0
$LN8@select_wor:
; Line 1169
  0032b	66 0f 2f d4	 comisd	 xmm2, xmm4
  0032f	76 4f		 jbe	 SHORT $LN19@select_wor
; Line 1172
  00331	48 8b 43 38	 mov	 rax, QWORD PTR [rbx+56]
  00335	f3 0f 10 07	 movss	 xmm0, DWORD PTR [rdi]
  00339	f2 42 0f 10 1c
	d8		 movsdx	 xmm3, QWORD PTR [rax+r11*8]
$LN72@select_wor:
  0033f	f2 0f 58 1c 08	 addsd	 xmm3, QWORD PTR [rax+rcx]
  00344	f3 41 0f 59 c0	 mulss	 xmm0, xmm8
  00349	0f 5a c8	 cvtps2pd xmm1, xmm0
  0034c	f2 0f 5c d9	 subsd	 xmm3, xmm1
; Line 1173
  00350	66 0f 2f dc	 comisd	 xmm3, xmm4
  00354	76 0e		 jbe	 SHORT $LN6@select_wor
; Line 1174
  00356	f2 0f 59 d2	 mulsd	 xmm2, xmm2
  0035a	f2 0f 5e d3	 divsd	 xmm2, xmm3
  0035e	41 0f 57 d1	 xorps	 xmm2, xmm9
; Line 1175
  00362	eb 0e		 jmp	 SHORT $LN5@select_wor
$LN6@select_wor:
; Line 1176
  00364	0f 28 c2	 movaps	 xmm0, xmm2
  00367	f2 0f 59 c2	 mulsd	 xmm0, xmm2
  0036b	0f 28 d0	 movaps	 xmm2, xmm0
  0036e	f2 0f 5e d5	 divsd	 xmm2, xmm5
$LN5@select_wor:
; Line 1178
  00372	66 44 0f 2f d2	 comisd	 xmm10, xmm2
  00377	72 07		 jb	 SHORT $LN19@select_wor
; Line 1181
  00379	44 0f 28 d2	 movaps	 xmm10, xmm2
  0037d	45 8b ec	 mov	 r13d, r12d
$LN19@select_wor:
; Line 1136
  00380	41 ff c4	 inc	 r12d
  00383	49 ff c0	 inc	 r8
  00386	48 ff c2	 inc	 rdx
  00389	48 83 c1 08	 add	 rcx, 8
  0038d	48 83 c7 04	 add	 rdi, 4
  00391	45 3b e1	 cmp	 r12d, r9d
  00394	0f 8c 28 ff ff
	ff		 jl	 $LL20@select_wor
  0039a	44 0f 28 44 24
	60		 movaps	 xmm8, XMMWORD PTR [rsp+96]
$LN18@select_wor:
  003a0	44 0f 28 54 24
	40		 movaps	 xmm10, XMMWORD PTR [rsp+64]
  003a6	44 0f 28 4c 24
	50		 movaps	 xmm9, XMMWORD PTR [rsp+80]
  003ac	4c 8b a4 24 90
	00 00 00	 mov	 r12, QWORD PTR [rsp+144]
  003b4	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR [rsp+152]
  003bc	48 8b b4 24 a0
	00 00 00	 mov	 rsi, QWORD PTR [rsp+160]
; Line 1188
  003c4	f2 44 0f 58 e7	 addsd	 xmm12, xmm7
  003c9	f2 44 0f 58 de	 addsd	 xmm11, xmm6
  003ce	0f 28 7c 24 70	 movaps	 xmm7, XMMWORD PTR [rsp+112]
  003d3	0f 28 b4 24 80
	00 00 00	 movaps	 xmm6, XMMWORD PTR [rsp+128]
; Line 19
  003db	66 45 0f 2f dc	 comisd	 xmm11, xmm12
  003e0	77 04		 ja	 SHORT $LN45@select_wor
  003e2	45 0f 28 dc	 movaps	 xmm11, xmm12
$LN45@select_wor:
; Line 1188
  003e6	f2 0f 10 43 40	 movsdx	 xmm0, QWORD PTR [rbx+64]
  003eb	44 0f 28 64 24
	20		 movaps	 xmm12, XMMWORD PTR [rsp+32]
  003f1	66 41 0f 2f c3	 comisd	 xmm0, xmm11
  003f6	44 0f 28 5c 24
	30		 movaps	 xmm11, XMMWORD PTR [rsp+48]
  003fc	76 14		 jbe	 SHORT $LN3@select_wor
; Line 1189
  003fe	b8 01 00 00 00	 mov	 eax, 1
; Line 1198
  00403	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0040a	41 5f		 pop	 r15
  0040c	41 5e		 pop	 r14
  0040e	41 5d		 pop	 r13
  00410	5b		 pop	 rbx
  00411	c3		 ret	 0
$LN3@select_wor:
; Line 1191
  00412	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00416	49 63 c5	 movsxd	 rax, r13d
  00419	80 3c 08 01	 cmp	 BYTE PTR [rax+rcx], 1
  0041d	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR out_i$[rsp]
  00425	45 0f 44 f7	 cmove	 r14d, r15d
  00429	44 89 30	 mov	 DWORD PTR [rax], r14d
; Line 1195
  0042c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR out_j$[rsp]
  00434	44 89 28	 mov	 DWORD PTR [rax], r13d
; Line 1197
  00437	33 c0		 xor	 eax, eax
; Line 1198
  00439	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00440	41 5f		 pop	 r15
  00442	41 5e		 pop	 r14
  00444	41 5d		 pop	 r13
  00446	5b		 pop	 rbx
  00447	c3		 ret	 0
?select_working_set@Solver_NU@@EEAAHAEAH0@Z ENDP	; Solver_NU::select_working_set
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?be_shrunk@Solver_NU@@AEAA_NHNNNN@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
Gmax1$ = 24
Gmax2$ = 32
Gmax3$ = 40
Gmax4$ = 48
?be_shrunk@Solver_NU@@AEAA_NHNNNN@Z PROC		; Solver_NU::be_shrunk, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 497
  00000	48 8b 41 20	 mov	 rax, QWORD PTR [rcx+32]
  00004	4c 63 c2	 movsxd	 r8, edx
  00007	41 0f b6 14 00	 movzx	 edx, BYTE PTR [r8+rax]
  0000c	80 fa 01	 cmp	 dl, 1
; Line 1202
  0000f	75 2d		 jne	 SHORT $LN8@be_shrunk
; Line 1204
  00011	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  00015	41 38 14 00	 cmp	 BYTE PTR [r8+rax], dl
; Line 1205
  00019	48 8b 41 18	 mov	 rax, QWORD PTR [rcx+24]
  0001d	f2 42 0f 10 04
	c0		 movsdx	 xmm0, QWORD PTR [rax+r8*8]
  00023	0f 57 05 00 00
	00 00		 xorps	 xmm0, QWORD PTR __xmm@80000000000000008000000000000000
  0002a	75 08		 jne	 SHORT $LN7@be_shrunk
  0002c	66 0f 2f c2	 comisd	 xmm0, xmm2
  00030	0f 97 c0	 seta	 al
; Line 1218
  00033	c3		 ret	 0
$LN7@be_shrunk:
; Line 1207
  00034	66 0f 2f 44 24
	30		 comisd	 xmm0, QWORD PTR Gmax4$[rsp]
  0003a	0f 97 c0	 seta	 al
; Line 1218
  0003d	c3		 ret	 0
$LN8@be_shrunk:
; Line 498
  0003e	84 d2		 test	 dl, dl
; Line 1209
  00040	75 31		 jne	 SHORT $LN4@be_shrunk
; Line 1211
  00042	48 8b 41 10	 mov	 rax, QWORD PTR [rcx+16]
  00046	41 80 3c 00 01	 cmp	 BYTE PTR [r8+rax], 1
  0004b	75 12		 jne	 SHORT $LN3@be_shrunk
; Line 1212
  0004d	48 8b 41 18	 mov	 rax, QWORD PTR [rcx+24]
  00051	f2 42 0f 10 04
	c0		 movsdx	 xmm0, QWORD PTR [rax+r8*8]
  00057	66 0f 2f c3	 comisd	 xmm0, xmm3
  0005b	0f 97 c0	 seta	 al
; Line 1218
  0005e	c3		 ret	 0
$LN3@be_shrunk:
; Line 1214
  0005f	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00063	f2 42 0f 10 04
	c1		 movsdx	 xmm0, QWORD PTR [rcx+r8*8]
  00069	66 0f 2f 44 24
	28		 comisd	 xmm0, QWORD PTR Gmax3$[rsp]
  0006f	0f 97 c0	 seta	 al
; Line 1218
  00072	c3		 ret	 0
$LN4@be_shrunk:
; Line 1217
  00073	32 c0		 xor	 al, al
; Line 1218
  00075	c3		 ret	 0
?be_shrunk@Solver_NU@@AEAA_NHNNNN@Z ENDP		; Solver_NU::be_shrunk
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?do_shrinking@Solver_NU@@EEAAXXZ
_TEXT	SEGMENT
this$ = 128
?do_shrinking@Solver_NU@@EEAAXXZ PROC			; Solver_NU::do_shrinking, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 1221
$LN77:
  00000	48 89 5c 24 10	 mov	 QWORD PTR [rsp+16], rbx
  00005	56		 push	 rsi
  00006	48 83 ec 70	 sub	 rsp, 112		; 00000070H
; Line 1222
  0000a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp__HUGE
  00011	0f 29 74 24 60	 movaps	 XMMWORD PTR [rsp+96], xmm6
  00016	f2 0f 10 35 00
	00 00 00	 movsdx	 xmm6, QWORD PTR __xmm@80000000000000008000000000000000
  0001e	0f 29 7c 24 50	 movaps	 XMMWORD PTR [rsp+80], xmm7
  00023	44 0f 29 44 24
	40		 movaps	 XMMWORD PTR [rsp+64], xmm8
  00029	44 0f 29 4c 24
	30		 movaps	 XMMWORD PTR [rsp+48], xmm9
; Line 1229
  0002f	33 f6		 xor	 esi, esi
  00031	48 8b d9	 mov	 rbx, rcx
  00034	f2 0f 10 38	 movsdx	 xmm7, QWORD PTR [rax]
  00038	8b 41 08	 mov	 eax, DWORD PTR [rcx+8]
  0003b	0f 57 fe	 xorps	 xmm7, xmm6
  0003e	44 0f 29 54 24
	20		 movaps	 XMMWORD PTR [rsp+32], xmm10
  00044	44 0f 28 c7	 movaps	 xmm8, xmm7
  00048	44 0f 28 cf	 movaps	 xmm9, xmm7
  0004c	44 0f 28 d7	 movaps	 xmm10, xmm7
  00050	85 c0		 test	 eax, eax
  00052	7e 79		 jle	 SHORT $LN19@do_shrinki
; Line 497
  00054	4c 8b 49 20	 mov	 r9, QWORD PTR [rcx+32]
  00058	44 8b c0	 mov	 r8d, eax
; Line 1229
  0005b	8b ce		 mov	 ecx, esi
  0005d	0f 1f 00	 npad	 3
$LL21@do_shrinki:
; Line 497
  00060	41 0f b6 14 09	 movzx	 edx, BYTE PTR [r9+rcx]
  00065	80 fa 01	 cmp	 dl, 1
; Line 1231
  00068	74 2c		 je	 SHORT $LN14@do_shrinki
; Line 1233
  0006a	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  0006e	80 3c 01 01	 cmp	 BYTE PTR [rcx+rax], 1
; Line 1235
  00072	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00076	f2 0f 10 04 c8	 movsdx	 xmm0, QWORD PTR [rax+rcx*8]
  0007b	0f 57 c6	 xorps	 xmm0, xmm6
  0007e	75 0b		 jne	 SHORT $LN17@do_shrinki
  00080	66 0f 2f c7	 comisd	 xmm0, xmm7
  00084	76 10		 jbe	 SHORT $LN14@do_shrinki
  00086	0f 28 f8	 movaps	 xmm7, xmm0
; Line 1236
  00089	eb 0b		 jmp	 SHORT $LN14@do_shrinki
$LN17@do_shrinki:
; Line 1237
  0008b	66 41 0f 2f c2	 comisd	 xmm0, xmm10
  00090	76 04		 jbe	 SHORT $LN14@do_shrinki
  00092	44 0f 28 d0	 movaps	 xmm10, xmm0
$LN14@do_shrinki:
; Line 498
  00096	84 d2		 test	 dl, dl
; Line 1239
  00098	74 2b		 je	 SHORT $LN20@do_shrinki
; Line 1241
  0009a	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  0009e	80 3c 01 01	 cmp	 BYTE PTR [rcx+rax], 1
; Line 1243
  000a2	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  000a6	f2 0f 10 04 c8	 movsdx	 xmm0, QWORD PTR [rax+rcx*8]
  000ab	75 0d		 jne	 SHORT $LN12@do_shrinki
  000ad	66 41 0f 2f c0	 comisd	 xmm0, xmm8
  000b2	76 11		 jbe	 SHORT $LN20@do_shrinki
  000b4	44 0f 28 c0	 movaps	 xmm8, xmm0
; Line 1244
  000b8	eb 0b		 jmp	 SHORT $LN20@do_shrinki
$LN12@do_shrinki:
; Line 1245
  000ba	66 41 0f 2f c1	 comisd	 xmm0, xmm9
  000bf	76 04		 jbe	 SHORT $LN20@do_shrinki
  000c1	44 0f 28 c8	 movaps	 xmm9, xmm0
$LN20@do_shrinki:
; Line 1229
  000c5	48 ff c1	 inc	 rcx
  000c8	49 ff c8	 dec	 r8
  000cb	75 93		 jne	 SHORT $LL21@do_shrinki
$LN19@do_shrinki:
; Line 1249
  000cd	40 38 73 74	 cmp	 BYTE PTR [rbx+116], sil
  000d1	75 3f		 jne	 SHORT $LN8@do_shrinki
  000d3	41 0f 28 c2	 movaps	 xmm0, xmm10
  000d7	41 0f 28 c8	 movaps	 xmm1, xmm8
  000db	f2 41 0f 58 c1	 addsd	 xmm0, xmm9
  000e0	f2 0f 58 cf	 addsd	 xmm1, xmm7
; Line 19
  000e4	66 0f 2f c8	 comisd	 xmm1, xmm0
  000e8	77 03		 ja	 SHORT $LN31@do_shrinki
  000ea	0f 28 c8	 movaps	 xmm1, xmm0
$LN31@do_shrinki:
; Line 1249
  000ed	f2 0f 10 43 40	 movsdx	 xmm0, QWORD PTR [rbx+64]
  000f2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4024000000000000
  000fa	66 0f 2f c1	 comisd	 xmm0, xmm1
  000fe	72 12		 jb	 SHORT $LN8@do_shrinki
; Line 1252
  00100	48 8b cb	 mov	 rcx, rbx
  00103	c6 43 74 01	 mov	 BYTE PTR [rbx+116], 1
  00107	e8 00 00 00 00	 call	 ?reconstruct_gradient@Solver@@IEAAXXZ ; Solver::reconstruct_gradient
; Line 1253
  0010c	8b 43 70	 mov	 eax, DWORD PTR [rbx+112]
  0010f	89 43 08	 mov	 DWORD PTR [rbx+8], eax
$LN8@do_shrinki:
; Line 1256
  00112	39 73 08	 cmp	 DWORD PTR [rbx+8], esi
  00115	0f 8e 0b 01 00
	00		 jle	 $LN5@do_shrinki
  0011b	48 89 bc 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rdi
  00123	48 8b fe	 mov	 rdi, rsi
  00126	66 66 0f 1f 84
	00 00 00 00 00	 npad	 10
$LL7@do_shrinki:
; Line 497
  00130	48 8b 53 20	 mov	 rdx, QWORD PTR [rbx+32]
  00134	0f b6 04 3a	 movzx	 eax, BYTE PTR [rdx+rdi]
  00138	3c 01		 cmp	 al, 1
; Line 1202
  0013a	75 23		 jne	 SHORT $LN39@do_shrinki
; Line 1204
  0013c	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  00140	80 3c 07 01	 cmp	 BYTE PTR [rdi+rax], 1
; Line 1205
  00144	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00148	f2 0f 10 04 f8	 movsdx	 xmm0, QWORD PTR [rax+rdi*8]
  0014d	0f 57 c6	 xorps	 xmm0, xmm6
  00150	75 06		 jne	 SHORT $LN38@do_shrinki
  00152	66 0f 2f c7	 comisd	 xmm0, xmm7
  00156	eb 2e		 jmp	 SHORT $LN74@do_shrinki
$LN38@do_shrinki:
; Line 1207
  00158	66 41 0f 2f c2	 comisd	 xmm0, xmm10
  0015d	eb 27		 jmp	 SHORT $LN74@do_shrinki
$LN39@do_shrinki:
; Line 498
  0015f	84 c0		 test	 al, al
; Line 1209
  00161	0f 85 a9 00 00
	00		 jne	 $LN6@do_shrinki
; Line 1211
  00167	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  0016b	80 3c 07 01	 cmp	 BYTE PTR [rdi+rax], 1
; Line 1212
  0016f	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  00173	f2 0f 10 04 f8	 movsdx	 xmm0, QWORD PTR [rax+rdi*8]
  00178	75 07		 jne	 SHORT $LN34@do_shrinki
  0017a	66 41 0f 2f c0	 comisd	 xmm0, xmm8
  0017f	eb 05		 jmp	 SHORT $LN74@do_shrinki
$LN34@do_shrinki:
; Line 1214
  00181	66 41 0f 2f c1	 comisd	 xmm0, xmm9
$LN74@do_shrinki:
  00186	0f 97 c0	 seta	 al
; Line 1257
  00189	84 c0		 test	 al, al
  0018b	0f 84 7f 00 00
	00		 je	 $LN6@do_shrinki
; Line 1259
  00191	ff 4b 08	 dec	 DWORD PTR [rbx+8]
  00194	44 8b 43 08	 mov	 r8d, DWORD PTR [rbx+8]
; Line 1260
  00198	44 3b c6	 cmp	 r8d, esi
  0019b	7e 73		 jle	 SHORT $LN6@do_shrinki
  0019d	0f 1f 00	 npad	 3
$LL3@do_shrinki:
; Line 497
  001a0	49 63 c8	 movsxd	 rcx, r8d
  001a3	0f b6 04 11	 movzx	 eax, BYTE PTR [rcx+rdx]
  001a7	3c 01		 cmp	 al, 1
; Line 1202
  001a9	75 23		 jne	 SHORT $LN53@do_shrinki
; Line 1204
  001ab	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  001af	80 3c 01 01	 cmp	 BYTE PTR [rcx+rax], 1
; Line 1205
  001b3	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  001b7	f2 0f 10 04 c8	 movsdx	 xmm0, QWORD PTR [rax+rcx*8]
  001bc	0f 57 c6	 xorps	 xmm0, xmm6
  001bf	75 06		 jne	 SHORT $LN52@do_shrinki
  001c1	66 0f 2f c7	 comisd	 xmm0, xmm7
  001c5	eb 2a		 jmp	 SHORT $LN75@do_shrinki
$LN52@do_shrinki:
; Line 1207
  001c7	66 41 0f 2f c2	 comisd	 xmm0, xmm10
  001cc	eb 23		 jmp	 SHORT $LN75@do_shrinki
$LN53@do_shrinki:
; Line 498
  001ce	84 c0		 test	 al, al
; Line 1209
  001d0	75 34		 jne	 SHORT $LN63@do_shrinki
; Line 1211
  001d2	48 8b 43 10	 mov	 rax, QWORD PTR [rbx+16]
  001d6	80 3c 01 01	 cmp	 BYTE PTR [rcx+rax], 1
; Line 1212
  001da	48 8b 43 18	 mov	 rax, QWORD PTR [rbx+24]
  001de	f2 0f 10 04 c8	 movsdx	 xmm0, QWORD PTR [rax+rcx*8]
  001e3	75 07		 jne	 SHORT $LN48@do_shrinki
  001e5	66 41 0f 2f c0	 comisd	 xmm0, xmm8
  001ea	eb 05		 jmp	 SHORT $LN75@do_shrinki
$LN48@do_shrinki:
; Line 1214
  001ec	66 41 0f 2f c1	 comisd	 xmm0, xmm9
$LN75@do_shrinki:
  001f1	0f 97 c0	 seta	 al
; Line 1262
  001f4	84 c0		 test	 al, al
  001f6	74 0e		 je	 SHORT $LN63@do_shrinki
; Line 1267
  001f8	41 ff c8	 dec	 r8d
  001fb	44 89 43 08	 mov	 DWORD PTR [rbx+8], r8d
  001ff	44 3b c6	 cmp	 r8d, esi
  00202	7f 9c		 jg	 SHORT $LL3@do_shrinki
; Line 1260
  00204	eb 0a		 jmp	 SHORT $LN6@do_shrinki
$LN63@do_shrinki:
; Line 1264
  00206	8b d6		 mov	 edx, esi
  00208	48 8b cb	 mov	 rcx, rbx
  0020b	e8 00 00 00 00	 call	 ?swap_index@Solver@@IEAAXHH@Z ; Solver::swap_index
$LN6@do_shrinki:
; Line 1256
  00210	ff c6		 inc	 esi
  00212	48 ff c7	 inc	 rdi
  00215	3b 73 08	 cmp	 esi, DWORD PTR [rbx+8]
  00218	0f 8c 12 ff ff
	ff		 jl	 $LL7@do_shrinki
  0021e	48 8b bc 24 80
	00 00 00	 mov	 rdi, QWORD PTR [rsp+128]
$LN5@do_shrinki:
; Line 1270
  00226	48 8b 9c 24 88
	00 00 00	 mov	 rbx, QWORD PTR [rsp+136]
  0022e	0f 28 74 24 60	 movaps	 xmm6, XMMWORD PTR [rsp+96]
  00233	0f 28 7c 24 50	 movaps	 xmm7, XMMWORD PTR [rsp+80]
  00238	44 0f 28 44 24
	40		 movaps	 xmm8, XMMWORD PTR [rsp+64]
  0023e	44 0f 28 4c 24
	30		 movaps	 xmm9, XMMWORD PTR [rsp+48]
  00244	44 0f 28 54 24
	20		 movaps	 xmm10, XMMWORD PTR [rsp+32]
  0024a	48 83 c4 70	 add	 rsp, 112		; 00000070H
  0024e	5e		 pop	 rsi
  0024f	c3		 ret	 0
?do_shrinking@Solver_NU@@EEAAXXZ ENDP			; Solver_NU::do_shrinking
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?calculate_rho@Solver_NU@@EEAANXZ
_TEXT	SEGMENT
this$ = 48
?calculate_rho@Solver_NU@@EEAANXZ PROC			; Solver_NU::calculate_rho, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 1273
$LN49:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; Line 1275
  0000a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp__HUGE
  00011	45 33 c0	 xor	 r8d, r8d
  00014	48 8b f9	 mov	 rdi, rcx
; Line 1279
  00017	48 63 5f 08	 movsxd	 rbx, DWORD PTR [rdi+8]
  0001b	0f 29 74 24 10	 movaps	 XMMWORD PTR [rsp+16], xmm6
  00020	0f 57 d2	 xorps	 xmm2, xmm2
  00023	0f 29 3c 24	 movaps	 XMMWORD PTR [rsp], xmm7
  00027	f2 0f 10 3d 00
	00 00 00	 movsdx	 xmm7, QWORD PTR __real@3fe0000000000000
  0002f	45 8b c8	 mov	 r9d, r8d
  00032	0f 28 da	 movaps	 xmm3, xmm2
  00035	41 8b c8	 mov	 ecx, r8d
  00038	f2 0f 10 20	 movsdx	 xmm4, QWORD PTR [rax]
  0003c	0f 28 cc	 movaps	 xmm1, xmm4
  0003f	0f 28 ec	 movaps	 xmm5, xmm4
  00042	0f 57 0d 00 00
	00 00		 xorps	 xmm1, QWORD PTR __xmm@80000000000000008000000000000000
  00049	0f 28 f1	 movaps	 xmm6, xmm1
  0004c	48 85 db	 test	 rbx, rbx
  0004f	0f 8e 96 00 00
	00		 jle	 $LN4@calculate_
; Line 1281
  00055	4c 8b 5f 10	 mov	 r11, QWORD PTR [rdi+16]
  00059	48 8b 47 18	 mov	 rax, QWORD PTR [rdi+24]
  0005d	4c 8b 57 20	 mov	 r10, QWORD PTR [rdi+32]
$LL17@calculate_:
  00061	41 80 3c 0b 01	 cmp	 BYTE PTR [r11+rcx], 1
; Line 497
  00066	41 0f b6 14 0a	 movzx	 edx, BYTE PTR [r10+rcx]
; Line 1281
  0006b	75 30		 jne	 SHORT $LN14@calculate_
; Line 497
  0006d	80 fa 01	 cmp	 dl, 1
; Line 1283
  00070	75 0f		 jne	 SHORT $LN13@calculate_
; Line 1284
  00072	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
; Line 19
  00076	66 0f 2f c8	 comisd	 xmm1, xmm0
  0007a	77 4f		 ja	 SHORT $LN16@calculate_
  0007c	0f 28 c8	 movaps	 xmm1, xmm0
; Line 1285
  0007f	eb 4a		 jmp	 SHORT $LN16@calculate_
$LN13@calculate_:
; Line 498
  00081	84 d2		 test	 dl, dl
; Line 1285
  00083	75 0f		 jne	 SHORT $LN11@calculate_
; Line 1286
  00085	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
; Line 16
  00089	66 0f 2f c4	 comisd	 xmm0, xmm4
  0008d	77 3c		 ja	 SHORT $LN16@calculate_
  0008f	0f 28 e0	 movaps	 xmm4, xmm0
; Line 1287
  00092	eb 37		 jmp	 SHORT $LN16@calculate_
$LN11@calculate_:
; Line 1290
  00094	f2 0f 58 10	 addsd	 xmm2, QWORD PTR [rax]
  00098	41 ff c0	 inc	 r8d
; Line 1293
  0009b	eb 2e		 jmp	 SHORT $LN16@calculate_
$LN14@calculate_:
; Line 497
  0009d	80 fa 01	 cmp	 dl, 1
; Line 1295
  000a0	75 0f		 jne	 SHORT $LN8@calculate_
; Line 1296
  000a2	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
; Line 19
  000a6	66 0f 2f f0	 comisd	 xmm6, xmm0
  000aa	77 1f		 ja	 SHORT $LN16@calculate_
  000ac	0f 28 f0	 movaps	 xmm6, xmm0
; Line 1297
  000af	eb 1a		 jmp	 SHORT $LN16@calculate_
$LN8@calculate_:
; Line 498
  000b1	84 d2		 test	 dl, dl
; Line 1297
  000b3	75 0f		 jne	 SHORT $LN6@calculate_
; Line 1298
  000b5	f2 0f 10 00	 movsdx	 xmm0, QWORD PTR [rax]
; Line 16
  000b9	66 0f 2f c5	 comisd	 xmm0, xmm5
  000bd	77 0c		 ja	 SHORT $LN16@calculate_
  000bf	0f 28 e8	 movaps	 xmm5, xmm0
; Line 1299
  000c2	eb 07		 jmp	 SHORT $LN16@calculate_
$LN6@calculate_:
; Line 1302
  000c4	f2 0f 58 18	 addsd	 xmm3, QWORD PTR [rax]
  000c8	41 ff c1	 inc	 r9d
$LN16@calculate_:
; Line 1279
  000cb	48 ff c1	 inc	 rcx
  000ce	48 83 c0 08	 add	 rax, 8
  000d2	48 3b cb	 cmp	 rcx, rbx
  000d5	7c 8a		 jl	 SHORT $LL17@calculate_
; Line 1308
  000d7	45 85 c0	 test	 r8d, r8d
  000da	7e 0f		 jle	 SHORT $LN4@calculate_
; Line 1309
  000dc	66 41 0f 6e c0	 movd	 xmm0, r8d
  000e1	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  000e5	f2 0f 5e d0	 divsd	 xmm2, xmm0
; Line 1310
  000e9	eb 0b		 jmp	 SHORT $LN3@calculate_
$LN4@calculate_:
; Line 1311
  000eb	0f 28 d1	 movaps	 xmm2, xmm1
  000ee	f2 0f 58 d4	 addsd	 xmm2, xmm4
  000f2	f2 0f 59 d7	 mulsd	 xmm2, xmm7
$LN3@calculate_:
; Line 1313
  000f6	45 85 c9	 test	 r9d, r9d
  000f9	7e 0f		 jle	 SHORT $LN2@calculate_
; Line 1314
  000fb	66 41 0f 6e c1	 movd	 xmm0, r9d
  00100	f3 0f e6 c0	 cvtdq2pd xmm0, xmm0
  00104	f2 0f 5e d8	 divsd	 xmm3, xmm0
; Line 1315
  00108	eb 0b		 jmp	 SHORT $LN1@calculate_
$LN2@calculate_:
; Line 1316
  0010a	0f 28 de	 movaps	 xmm3, xmm6
  0010d	f2 0f 58 dd	 addsd	 xmm3, xmm5
  00111	f2 0f 59 df	 mulsd	 xmm3, xmm7
$LN1@calculate_:
; Line 1318
  00115	48 8b 47 78	 mov	 rax, QWORD PTR [rdi+120]
; Line 1320
  00119	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0011e	0f 28 74 24 10	 movaps	 xmm6, XMMWORD PTR [rsp+16]
  00123	0f 28 cb	 movaps	 xmm1, xmm3
  00126	f2 0f 58 ca	 addsd	 xmm1, xmm2
  0012a	f2 0f 5c d3	 subsd	 xmm2, xmm3
  0012e	f2 0f 59 d7	 mulsd	 xmm2, xmm7
  00132	f2 0f 59 cf	 mulsd	 xmm1, xmm7
  00136	0f 28 3c 24	 movaps	 xmm7, XMMWORD PTR [rsp]
  0013a	0f 28 c2	 movaps	 xmm0, xmm2
  0013d	f2 0f 11 48 20	 movsdx	 QWORD PTR [rax+32], xmm1
  00142	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00146	5f		 pop	 rdi
  00147	c3		 ret	 0
?calculate_rho@Solver_NU@@EEAANXZ ENDP			; Solver_NU::calculate_rho
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?get_Q@SVC_Q@@UEBAPEAMHH@Z
_TEXT	SEGMENT
data$ = 80
this$ = 80
i$ = 88
len$ = 96
?get_Q@SVC_Q@@UEBAPEAMHH@Z PROC				; SVC_Q::get_Q, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 1339
$LN13:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	41 54		 push	 r12
  00005	41 56		 push	 r14
  00007	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000b	48 8b e9	 mov	 rbp, rcx
; Line 1342
  0000e	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  00012	45 8b e0	 mov	 r12d, r8d
  00015	4c 63 f2	 movsxd	 r14, edx
  00018	45 8b c8	 mov	 r9d, r8d
  0001b	4c 8d 44 24 50	 lea	 r8, QWORD PTR data$[rsp]
  00020	41 8b d6	 mov	 edx, r14d
  00023	e8 00 00 00 00	 call	 ?get_data@Cache@@QEAAHHPEAPEAMH@Z ; Cache::get_data
  00028	48 63 f8	 movsxd	 rdi, eax
  0002b	41 3b fc	 cmp	 edi, r12d
  0002e	0f 8d 7c 00 00
	00		 jge	 $LN11@get_Q
; Line 1344
  00034	48 89 5c 24 58	 mov	 QWORD PTR [rsp+88], rbx
  00039	48 89 74 24 60	 mov	 QWORD PTR [rsp+96], rsi
  0003e	4c 89 6c 24 68	 mov	 QWORD PTR [rsp+104], r13
  00043	4c 89 7c 24 20	 mov	 QWORD PTR [rsp+32], r15
  00048	4c 8b 7c 24 50	 mov	 r15, QWORD PTR data$[rsp]
  0004d	48 8b f7	 mov	 rsi, rdi
$LL3@get_Q:
; Line 1345
  00050	48 8b 5d 38	 mov	 rbx, QWORD PTR [rbp+56]
  00054	44 8b c7	 mov	 r8d, edi
  00057	41 8b d6	 mov	 edx, r14d
  0005a	48 8b cd	 mov	 rcx, rbp
  0005d	ff 55 08	 call	 QWORD PTR [rbp+8]
  00060	0f be 0c 33	 movsx	 ecx, BYTE PTR [rbx+rsi]
  00064	41 0f be 14 1e	 movsx	 edx, BYTE PTR [r14+rbx]
  00069	0f af d1	 imul	 edx, ecx
  0006c	ff c7		 inc	 edi
  0006e	48 8d 76 01	 lea	 rsi, QWORD PTR [rsi+1]
  00072	66 0f 6e ca	 movd	 xmm1, edx
  00076	f3 0f e6 c9	 cvtdq2pd xmm1, xmm1
  0007a	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  0007e	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00082	f3 41 0f 11 44
	b7 fc		 movss	 DWORD PTR [r15+rsi*4-4], xmm0
  00089	41 3b fc	 cmp	 edi, r12d
  0008c	7c c2		 jl	 SHORT $LL3@get_Q
; Line 1347
  0008e	4c 8b 6c 24 68	 mov	 r13, QWORD PTR [rsp+104]
  00093	48 8b 74 24 60	 mov	 rsi, QWORD PTR [rsp+96]
  00098	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  0009d	49 8b c7	 mov	 rax, r15
  000a0	4c 8b 7c 24 20	 mov	 r15, QWORD PTR [rsp+32]
; Line 1348
  000a5	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000a9	41 5e		 pop	 r14
  000ab	41 5c		 pop	 r12
  000ad	5f		 pop	 rdi
  000ae	5d		 pop	 rbp
  000af	c3		 ret	 0
$LN11@get_Q:
; Line 1347
  000b0	48 8b 44 24 50	 mov	 rax, QWORD PTR data$[rsp]
; Line 1348
  000b5	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000b9	41 5e		 pop	 r14
  000bb	41 5c		 pop	 r12
  000bd	5f		 pop	 rdi
  000be	5d		 pop	 rbp
  000bf	c3		 ret	 0
?get_Q@SVC_Q@@UEBAPEAMHH@Z ENDP				; SVC_Q::get_Q
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?get_QD@SVC_Q@@UEBAPEANXZ
_TEXT	SEGMENT
this$ = 8
?get_QD@SVC_Q@@UEBAPEANXZ PROC				; SVC_Q::get_QD, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 1352
  00000	48 8b 41 48	 mov	 rax, QWORD PTR [rcx+72]
; Line 1353
  00004	c3		 ret	 0
?get_QD@SVC_Q@@UEBAPEANXZ ENDP				; SVC_Q::get_QD
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?swap_index@SVC_Q@@UEBAXHH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
j$ = 64
?swap_index@SVC_Q@@UEBAXHH@Z PROC			; SVC_Q::swap_index, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 1356
$LN15:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b f1	 mov	 rsi, rcx
; Line 1357
  00012	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  00016	49 63 d8	 movsxd	 rbx, r8d
  00019	48 63 fa	 movsxd	 rdi, edx
  0001c	44 8b c3	 mov	 r8d, ebx
  0001f	8b d7		 mov	 edx, edi
  00021	e8 00 00 00 00	 call	 ?swap_index@Cache@@QEAAXHH@Z ; Cache::swap_index
; Line 218
  00026	48 8b 46 10	 mov	 rax, QWORD PTR [rsi+16]
  0002a	4c 8b c3	 mov	 r8, rbx
  0002d	4d 03 c0	 add	 r8, r8
  00030	48 8b d7	 mov	 rdx, rdi
  00033	48 03 d2	 add	 rdx, rdx
; Line 21
  00036	42 0f 10 04 c0	 movups	 xmm0, XMMWORD PTR [rax+r8*8]
  0003b	0f 10 0c d0	 movups	 xmm1, XMMWORD PTR [rax+rdx*8]
  0003f	0f 11 04 d0	 movups	 XMMWORD PTR [rax+rdx*8], xmm0
  00043	42 0f 11 0c c0	 movups	 XMMWORD PTR [rax+r8*8], xmm1
; Line 219
  00048	48 8b 4e 18	 mov	 rcx, QWORD PTR [rsi+24]
  0004c	48 85 c9	 test	 rcx, rcx
  0004f	74 12		 je	 SHORT $LN8@swap_index
; Line 21
  00051	48 8b 04 d9	 mov	 rax, QWORD PTR [rcx+rbx*8]
  00055	f2 0f 10 04 f9	 movsdx	 xmm0, QWORD PTR [rcx+rdi*8]
  0005a	48 89 04 f9	 mov	 QWORD PTR [rcx+rdi*8], rax
  0005e	f2 0f 11 04 d9	 movsdx	 QWORD PTR [rcx+rbx*8], xmm0
$LN8@swap_index:
; Line 1359
  00063	48 8b 56 38	 mov	 rdx, QWORD PTR [rsi+56]
; Line 21
  00067	0f b6 04 1a	 movzx	 eax, BYTE PTR [rdx+rbx]
  0006b	0f b6 0c 3a	 movzx	 ecx, BYTE PTR [rdx+rdi]
  0006f	88 04 3a	 mov	 BYTE PTR [rdx+rdi], al
  00072	88 0c 1a	 mov	 BYTE PTR [rdx+rbx], cl
; Line 1360
  00075	48 8b 4e 48	 mov	 rcx, QWORD PTR [rsi+72]
; Line 21
  00079	48 8b 04 d9	 mov	 rax, QWORD PTR [rcx+rbx*8]
; Line 1361
  0007d	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
; Line 21
  00082	f2 0f 10 04 f9	 movsdx	 xmm0, QWORD PTR [rcx+rdi*8]
  00087	48 89 04 f9	 mov	 QWORD PTR [rcx+rdi*8], rax
  0008b	f2 0f 11 04 d9	 movsdx	 QWORD PTR [rcx+rbx*8], xmm0
; Line 1361
  00090	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00095	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00099	5f		 pop	 rdi
  0009a	c3		 ret	 0
?swap_index@SVC_Q@@UEBAXHH@Z ENDP			; SVC_Q::swap_index
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1SVC_Q@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??1SVC_Q@@UEAA@XZ PROC					; SVC_Q::~SVC_Q, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 1364
$LN22:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
  00013	48 89 5c 24 48	 mov	 QWORD PTR [rsp+72], rbx
  00018	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp
  0001d	48 89 74 24 58	 mov	 QWORD PTR [rsp+88], rsi
  00022	48 8b f9	 mov	 rdi, rcx
  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7SVC_Q@@6B@
  0002c	48 89 01	 mov	 QWORD PTR [rcx], rax
; Line 1365
  0002f	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00033	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??3@YAXPEAX@Z
; Line 1366
  00039	48 8b 6f 40	 mov	 rbp, QWORD PTR [rdi+64]
  0003d	48 85 ed	 test	 rbp, rbp
  00040	74 34		 je	 SHORT $LN6@SVC_Q
; Line 106
  00042	48 8b 5d 18	 mov	 rbx, QWORD PTR [rbp+24]
  00046	48 8d 75 10	 lea	 rsi, QWORD PTR [rbp+16]
  0004a	48 3b de	 cmp	 rbx, rsi
  0004d	74 14		 je	 SHORT $LN9@SVC_Q
  0004f	90		 npad	 1
$LL11@SVC_Q:
; Line 107
  00050	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
; Line 106
  0005a	48 8b 5b 08	 mov	 rbx, QWORD PTR [rbx+8]
  0005e	48 3b de	 cmp	 rbx, rsi
  00061	75 ed		 jne	 SHORT $LL11@SVC_Q
$LN9@SVC_Q:
; Line 108
  00063	48 8b 4d 08	 mov	 rcx, QWORD PTR [rbp+8]
  00067	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  0006d	48 8b cd	 mov	 rcx, rbp
  00070	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??3@YAXPEAX@Z
$LN6@SVC_Q:
; Line 1367
  00076	48 8b 4f 48	 mov	 rcx, QWORD PTR [rdi+72]
  0007a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??3@YAXPEAX@Z
  00080	90		 npad	 1
; Line 310
  00081	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Kernel@@6B@
  00088	48 89 07	 mov	 QWORD PTR [rdi], rax
; Line 311
  0008b	48 8b 4f 10	 mov	 rcx, QWORD PTR [rdi+16]
  0008f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??3@YAXPEAX@Z
; Line 312
  00095	48 8b 4f 18	 mov	 rcx, QWORD PTR [rdi+24]
  00099	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??3@YAXPEAX@Z
; Line 200
  0009f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7QMatrix@@6B@
  000a6	48 89 07	 mov	 QWORD PTR [rdi], rax
; Line 1368
  000a9	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000ae	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  000b3	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  000b8	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000bc	5f		 pop	 rdi
  000bd	c3		 ret	 0
??1SVC_Q@@UEAA@XZ ENDP					; SVC_Q::~SVC_Q
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
?dtor$0@?0???1SVC_Q@@UEAA@XZ@4HA PROC			; `SVC_Q::~SVC_Q'::`1'::dtor$0
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Kernel@@UEAA@XZ	; Kernel::~Kernel
?dtor$0@?0???1SVC_Q@@UEAA@XZ@4HA ENDP			; `SVC_Q::~SVC_Q'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??_GSVC_Q@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GSVC_Q@@UEAAPEAXI@Z PROC				; SVC_Q::`scalar deleting destructor', COMDAT
$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	8b da		 mov	 ebx, edx
  0000c	48 8b f9	 mov	 rdi, rcx
  0000f	e8 00 00 00 00	 call	 ??1SVC_Q@@UEAA@XZ	; SVC_Q::~SVC_Q
  00014	f6 c3 01	 test	 bl, 1
  00017	74 09		 je	 SHORT $LN4@scalar
  00019	48 8b cf	 mov	 rcx, rdi
  0001c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??3@YAXPEAX@Z
$LN4@scalar:
  00022	48 8b c7	 mov	 rax, rdi
  00025	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5f		 pop	 rdi
  0002f	c3		 ret	 0
??_GSVC_Q@@UEAAPEAXI@Z ENDP				; SVC_Q::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??_GCache@@QEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$dead$ = 56
??_GCache@@QEAAPEAXI@Z PROC				; Cache::`scalar deleting destructor', COMDAT
$LN14:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 106
  0000f	48 8b 59 18	 mov	 rbx, QWORD PTR [rcx+24]
  00013	48 8d 79 10	 lea	 rdi, QWORD PTR [rcx+16]
  00017	48 8b f1	 mov	 rsi, rcx
  0001a	48 3b df	 cmp	 rbx, rdi
  0001d	74 14		 je	 SHORT $LN4@scalar
  0001f	90		 npad	 1
$LL6@scalar:
; Line 107
  00020	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00024	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  0002a	48 8b 5b 08	 mov	 rbx, QWORD PTR [rbx+8]
  0002e	48 3b df	 cmp	 rbx, rdi
  00031	75 ed		 jne	 SHORT $LL6@scalar
$LN4@scalar:
; Line 108
  00033	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  00037	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  0003d	48 8b ce	 mov	 rcx, rsi
  00040	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??3@YAXPEAX@Z
  00046	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0004b	48 8b c6	 mov	 rax, rsi
  0004e	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5f		 pop	 rdi
  00058	c3		 ret	 0
??_GCache@@QEAAPEAXI@Z ENDP				; Cache::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?get_Q@ONE_CLASS_Q@@UEBAPEAMHH@Z
_TEXT	SEGMENT
data$ = 64
this$ = 64
i$ = 72
len$ = 80
?get_Q@ONE_CLASS_Q@@UEBAPEAMHH@Z PROC			; ONE_CLASS_Q::get_Q, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 1388
$LN13:
  00000	48 89 5c 24 20	 mov	 QWORD PTR [rsp+32], rbx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	41 57		 push	 r15
  00009	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000d	48 8b f1	 mov	 rsi, rcx
; Line 1391
  00010	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00014	41 8b e8	 mov	 ebp, r8d
  00017	45 8b c8	 mov	 r9d, r8d
  0001a	4c 8d 44 24 40	 lea	 r8, QWORD PTR data$[rsp]
  0001f	44 8b fa	 mov	 r15d, edx
  00022	e8 00 00 00 00	 call	 ?get_data@Cache@@QEAAHHPEAPEAMH@Z ; Cache::get_data
  00027	48 63 d8	 movsxd	 rbx, eax
  0002a	3b dd		 cmp	 ebx, ebp
  0002c	7d 50		 jge	 SHORT $LN11@get_Q
; Line 1393
  0002e	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  00033	4c 89 74 24 50	 mov	 QWORD PTR [rsp+80], r14
  00038	4c 8b 74 24 40	 mov	 r14, QWORD PTR data$[rsp]
  0003d	49 8d 3c 9e	 lea	 rdi, QWORD PTR [r14+rbx*4]
$LL3@get_Q:
; Line 1394
  00041	44 8b c3	 mov	 r8d, ebx
  00044	41 8b d7	 mov	 edx, r15d
  00047	48 8b ce	 mov	 rcx, rsi
  0004a	ff 56 08	 call	 QWORD PTR [rsi+8]
  0004d	ff c3		 inc	 ebx
  0004f	48 8d 7f 04	 lea	 rdi, QWORD PTR [rdi+4]
  00053	0f 57 c9	 xorps	 xmm1, xmm1
  00056	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
  0005a	f3 0f 11 4f fc	 movss	 DWORD PTR [rdi-4], xmm1
  0005f	3b dd		 cmp	 ebx, ebp
  00061	7c de		 jl	 SHORT $LL3@get_Q
; Line 1396
  00063	48 8b 7c 24 48	 mov	 rdi, QWORD PTR [rsp+72]
  00068	49 8b c6	 mov	 rax, r14
  0006b	4c 8b 74 24 50	 mov	 r14, QWORD PTR [rsp+80]
; Line 1397
  00070	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  00075	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00079	41 5f		 pop	 r15
  0007b	5e		 pop	 rsi
  0007c	5d		 pop	 rbp
  0007d	c3		 ret	 0
$LN11@get_Q:
; Line 1396
  0007e	48 8b 44 24 40	 mov	 rax, QWORD PTR data$[rsp]
; Line 1397
  00083	48 8b 5c 24 58	 mov	 rbx, QWORD PTR [rsp+88]
  00088	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008c	41 5f		 pop	 r15
  0008e	5e		 pop	 rsi
  0008f	5d		 pop	 rbp
  00090	c3		 ret	 0
?get_Q@ONE_CLASS_Q@@UEBAPEAMHH@Z ENDP			; ONE_CLASS_Q::get_Q
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?get_QD@ONE_CLASS_Q@@UEBAPEANXZ
_TEXT	SEGMENT
this$ = 8
?get_QD@ONE_CLASS_Q@@UEBAPEANXZ PROC			; ONE_CLASS_Q::get_QD, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 1401
  00000	48 8b 41 40	 mov	 rax, QWORD PTR [rcx+64]
; Line 1402
  00004	c3		 ret	 0
?get_QD@ONE_CLASS_Q@@UEBAPEANXZ ENDP			; ONE_CLASS_Q::get_QD
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?swap_index@ONE_CLASS_Q@@UEBAXHH@Z
_TEXT	SEGMENT
this$ = 48
i$ = 56
j$ = 64
?swap_index@ONE_CLASS_Q@@UEBAXHH@Z PROC			; ONE_CLASS_Q::swap_index, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 1405
$LN13:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	48 89 74 24 10	 mov	 QWORD PTR [rsp+16], rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b f1	 mov	 rsi, rcx
; Line 1406
  00012	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00016	49 63 d8	 movsxd	 rbx, r8d
  00019	48 63 fa	 movsxd	 rdi, edx
  0001c	44 8b c3	 mov	 r8d, ebx
  0001f	8b d7		 mov	 edx, edi
  00021	e8 00 00 00 00	 call	 ?swap_index@Cache@@QEAAXHH@Z ; Cache::swap_index
; Line 218
  00026	48 8b 46 10	 mov	 rax, QWORD PTR [rsi+16]
  0002a	4c 8b c3	 mov	 r8, rbx
  0002d	4d 03 c0	 add	 r8, r8
  00030	48 8b d7	 mov	 rdx, rdi
  00033	48 03 d2	 add	 rdx, rdx
; Line 21
  00036	42 0f 10 04 c0	 movups	 xmm0, XMMWORD PTR [rax+r8*8]
  0003b	0f 10 0c d0	 movups	 xmm1, XMMWORD PTR [rax+rdx*8]
  0003f	0f 11 04 d0	 movups	 XMMWORD PTR [rax+rdx*8], xmm0
  00043	42 0f 11 0c c0	 movups	 XMMWORD PTR [rax+r8*8], xmm1
; Line 219
  00048	48 8b 4e 18	 mov	 rcx, QWORD PTR [rsi+24]
  0004c	48 85 c9	 test	 rcx, rcx
  0004f	74 12		 je	 SHORT $LN8@swap_index
; Line 21
  00051	48 8b 04 d9	 mov	 rax, QWORD PTR [rcx+rbx*8]
  00055	f2 0f 10 04 f9	 movsdx	 xmm0, QWORD PTR [rcx+rdi*8]
  0005a	48 89 04 f9	 mov	 QWORD PTR [rcx+rdi*8], rax
  0005e	f2 0f 11 04 d9	 movsdx	 QWORD PTR [rcx+rbx*8], xmm0
$LN8@swap_index:
; Line 1408
  00063	48 8b 4e 40	 mov	 rcx, QWORD PTR [rsi+64]
; Line 1409
  00067	48 8b 74 24 38	 mov	 rsi, QWORD PTR [rsp+56]
; Line 21
  0006c	48 8b 04 d9	 mov	 rax, QWORD PTR [rcx+rbx*8]
  00070	f2 0f 10 04 f9	 movsdx	 xmm0, QWORD PTR [rcx+rdi*8]
  00075	48 89 04 f9	 mov	 QWORD PTR [rcx+rdi*8], rax
  00079	f2 0f 11 04 d9	 movsdx	 QWORD PTR [rcx+rbx*8], xmm0
; Line 1409
  0007e	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  00083	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00087	5f		 pop	 rdi
  00088	c3		 ret	 0
?swap_index@ONE_CLASS_Q@@UEBAXHH@Z ENDP			; ONE_CLASS_Q::swap_index
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1ONE_CLASS_Q@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??1ONE_CLASS_Q@@UEAA@XZ PROC				; ONE_CLASS_Q::~ONE_CLASS_Q, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 1412
$LN22:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
  00013	48 89 5c 24 48	 mov	 QWORD PTR [rsp+72], rbx
  00018	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp
  0001d	48 89 74 24 58	 mov	 QWORD PTR [rsp+88], rsi
  00022	48 8b f9	 mov	 rdi, rcx
  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7ONE_CLASS_Q@@6B@
  0002c	48 89 01	 mov	 QWORD PTR [rcx], rax
; Line 1413
  0002f	48 8b 71 38	 mov	 rsi, QWORD PTR [rcx+56]
  00033	48 85 f6	 test	 rsi, rsi
  00036	74 33		 je	 SHORT $LN6@ONE_CLASS_
; Line 106
  00038	48 8b 5e 18	 mov	 rbx, QWORD PTR [rsi+24]
  0003c	48 8d 6e 10	 lea	 rbp, QWORD PTR [rsi+16]
  00040	48 3b dd	 cmp	 rbx, rbp
  00043	74 13		 je	 SHORT $LN9@ONE_CLASS_
$LL11@ONE_CLASS_:
; Line 107
  00045	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00049	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
; Line 106
  0004f	48 8b 5b 08	 mov	 rbx, QWORD PTR [rbx+8]
  00053	48 3b dd	 cmp	 rbx, rbp
  00056	75 ed		 jne	 SHORT $LL11@ONE_CLASS_
$LN9@ONE_CLASS_:
; Line 108
  00058	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  00062	48 8b ce	 mov	 rcx, rsi
  00065	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??3@YAXPEAX@Z
$LN6@ONE_CLASS_:
; Line 1414
  0006b	48 8b 4f 40	 mov	 rcx, QWORD PTR [rdi+64]
  0006f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??3@YAXPEAX@Z
  00075	90		 npad	 1
; Line 310
  00076	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Kernel@@6B@
  0007d	48 89 07	 mov	 QWORD PTR [rdi], rax
; Line 311
  00080	48 8b 4f 10	 mov	 rcx, QWORD PTR [rdi+16]
  00084	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??3@YAXPEAX@Z
; Line 312
  0008a	48 8b 4f 18	 mov	 rcx, QWORD PTR [rdi+24]
  0008e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??3@YAXPEAX@Z
; Line 200
  00094	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7QMatrix@@6B@
  0009b	48 89 07	 mov	 QWORD PTR [rdi], rax
; Line 1415
  0009e	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000a3	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  000a8	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  000ad	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000b1	5f		 pop	 rdi
  000b2	c3		 ret	 0
??1ONE_CLASS_Q@@UEAA@XZ ENDP				; ONE_CLASS_Q::~ONE_CLASS_Q
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
?dtor$0@?0???1ONE_CLASS_Q@@UEAA@XZ@4HA PROC		; `ONE_CLASS_Q::~ONE_CLASS_Q'::`1'::dtor$0
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Kernel@@UEAA@XZ	; Kernel::~Kernel
?dtor$0@?0???1ONE_CLASS_Q@@UEAA@XZ@4HA ENDP		; `ONE_CLASS_Q::~ONE_CLASS_Q'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??_GONE_CLASS_Q@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GONE_CLASS_Q@@UEAAPEAXI@Z PROC			; ONE_CLASS_Q::`scalar deleting destructor', COMDAT
$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	8b da		 mov	 ebx, edx
  0000c	48 8b f9	 mov	 rdi, rcx
  0000f	e8 00 00 00 00	 call	 ??1ONE_CLASS_Q@@UEAA@XZ	; ONE_CLASS_Q::~ONE_CLASS_Q
  00014	f6 c3 01	 test	 bl, 1
  00017	74 09		 je	 SHORT $LN4@scalar
  00019	48 8b cf	 mov	 rcx, rdi
  0001c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??3@YAXPEAX@Z
$LN4@scalar:
  00022	48 8b c7	 mov	 rax, rdi
  00025	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5f		 pop	 rdi
  0002f	c3		 ret	 0
??_GONE_CLASS_Q@@UEAAPEAXI@Z ENDP			; ONE_CLASS_Q::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?swap_index@SVR_Q@@UEBAXHH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
j$ = 24
?swap_index@SVR_Q@@UEBAXHH@Z PROC			; SVR_Q::swap_index, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 1448
  00000	4d 63 d0	 movsxd	 r10, r8d
  00003	4c 8b 41 48	 mov	 r8, QWORD PTR [rcx+72]
  00007	4c 63 ca	 movsxd	 r9, edx
; Line 21
  0000a	43 0f b6 04 10	 movzx	 eax, BYTE PTR [r8+r10]
  0000f	43 0f b6 14 01	 movzx	 edx, BYTE PTR [r9+r8]
  00014	43 88 04 01	 mov	 BYTE PTR [r9+r8], al
  00018	43 88 14 10	 mov	 BYTE PTR [r8+r10], dl
; Line 1449
  0001c	4c 8b 41 50	 mov	 r8, QWORD PTR [rcx+80]
; Line 21
  00020	43 8b 04 90	 mov	 eax, DWORD PTR [r8+r10*4]
  00024	43 8b 14 88	 mov	 edx, DWORD PTR [r8+r9*4]
  00028	43 89 04 88	 mov	 DWORD PTR [r8+r9*4], eax
  0002c	43 89 14 90	 mov	 DWORD PTR [r8+r10*4], edx
; Line 1450
  00030	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
; Line 21
  00034	4a 8b 04 d1	 mov	 rax, QWORD PTR [rcx+r10*8]
  00038	f2 42 0f 10 04
	c9		 movsdx	 xmm0, QWORD PTR [rcx+r9*8]
  0003e	4a 89 04 c9	 mov	 QWORD PTR [rcx+r9*8], rax
  00042	f2 42 0f 11 04
	d1		 movsdx	 QWORD PTR [rcx+r10*8], xmm0
; Line 1451
  00048	c3		 ret	 0
?swap_index@SVR_Q@@UEBAXHH@Z ENDP			; SVR_Q::swap_index
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?get_Q@SVR_Q@@UEBAPEAMHH@Z
_TEXT	SEGMENT
data$ = 80
this$ = 80
i$ = 88
len$ = 96
?get_Q@SVR_Q@@UEBAPEAMHH@Z PROC				; SVR_Q::get_Q, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 1454
$LN24:
  00000	40 53		 push	 rbx
  00002	55		 push	 rbp
  00003	57		 push	 rdi
  00004	41 56		 push	 r14
  00006	48 83 ec 28	 sub	 rsp, 40			; 00000028H
; Line 1456
  0000a	48 8b 41 50	 mov	 rax, QWORD PTR [rcx+80]
; Line 1457
  0000e	8b 69 38	 mov	 ebp, DWORD PTR [rcx+56]
  00011	48 89 74 24 58	 mov	 QWORD PTR [rsp+88], rsi
  00016	4c 89 64 24 60	 mov	 QWORD PTR [rsp+96], r12
  0001b	4c 63 e2	 movsxd	 r12, edx
  0001e	4c 89 6c 24 68	 mov	 QWORD PTR [rsp+104], r13
  00023	48 8b d9	 mov	 rbx, rcx
  00026	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  0002a	4d 63 e8	 movsxd	 r13, r8d
  0002d	4c 89 7c 24 20	 mov	 QWORD PTR [rsp+32], r15
  00032	46 8b 3c a0	 mov	 r15d, DWORD PTR [rax+r12*4]
  00036	4c 8d 44 24 50	 lea	 r8, QWORD PTR data$[rsp]
  0003b	41 8b d7	 mov	 edx, r15d
  0003e	44 8b cd	 mov	 r9d, ebp
  00041	e8 00 00 00 00	 call	 ?get_data@Cache@@QEAAHHPEAPEAMH@Z ; Cache::get_data
  00046	4c 8b 74 24 50	 mov	 r14, QWORD PTR data$[rsp]
  0004b	33 ff		 xor	 edi, edi
  0004d	3b c5		 cmp	 eax, ebp
  0004f	7d 32		 jge	 SHORT $LN4@get_Q
; Line 1459
  00051	8b f7		 mov	 esi, edi
  00053	85 ed		 test	 ebp, ebp
  00055	7e 2c		 jle	 SHORT $LN4@get_Q
  00057	49 8b ee	 mov	 rbp, r14
  0005a	66 0f 1f 44 00
	00		 npad	 6
$LL6@get_Q:
; Line 1460
  00060	44 8b c6	 mov	 r8d, esi
  00063	41 8b d7	 mov	 edx, r15d
  00066	48 8b cb	 mov	 rcx, rbx
  00069	ff 53 08	 call	 QWORD PTR [rbx+8]
  0006c	ff c6		 inc	 esi
  0006e	48 83 c5 04	 add	 rbp, 4
  00072	0f 57 c9	 xorps	 xmm1, xmm1
  00075	f2 0f 5a c8	 cvtsd2ss xmm1, xmm0
  00079	f3 0f 11 4d fc	 movss	 DWORD PTR [rbp-4], xmm1
  0007e	3b 73 38	 cmp	 esi, DWORD PTR [rbx+56]
  00081	7c dd		 jl	 SHORT $LL6@get_Q
$LN4@get_Q:
; Line 1464
  00083	48 63 4b 58	 movsxd	 rcx, DWORD PTR [rbx+88]
; Line 1465
  00087	b8 01 00 00 00	 mov	 eax, 1
; Line 1467
  0008c	4d 8b d5	 mov	 r10, r13
  0008f	4c 8b 4c cb 60	 mov	 r9, QWORD PTR [rbx+rcx*8+96]
  00094	2b c1		 sub	 eax, ecx
  00096	89 43 58	 mov	 DWORD PTR [rbx+88], eax
  00099	48 8b 43 48	 mov	 rax, QWORD PTR [rbx+72]
  0009d	41 0f b6 2c 04	 movzx	 ebp, BYTE PTR [r12+rax]
  000a2	49 83 fd 04	 cmp	 r13, 4
  000a6	0f 8c f2 00 00
	00		 jl	 $LC17@get_Q
  000ac	40 0f be c5	 movsx	 eax, bpl
  000b0	49 8b f1	 mov	 rsi, r9
  000b3	41 bf 04 00 00
	00		 mov	 r15d, 4
  000b9	49 c7 c4 f8 ff
	ff ff		 mov	 r12, -8
  000c0	49 83 c5 fd	 add	 r13, -3
  000c4	48 f7 de	 neg	 rsi
  000c7	66 0f 6e c8	 movd	 xmm1, eax
  000cb	4d 2b f9	 sub	 r15, r9
  000ce	4d 8d 59 08	 lea	 r11, QWORD PTR [r9+8]
  000d2	4d 2b e1	 sub	 r12, r9
  000d5	0f 5b c9	 cvtdq2ps xmm1, xmm1
  000d8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL18@get_Q:
; Line 1468
  000e0	48 8b 43 50	 mov	 rax, QWORD PTR [rbx+80]
  000e4	4f 8d 04 1c	 lea	 r8, QWORD PTR [r12+r11]
  000e8	48 83 c7 04	 add	 rdi, 4
  000ec	49 63 14 00	 movsxd	 rdx, DWORD PTR [r8+rax]
  000f0	48 8b 43 48	 mov	 rax, QWORD PTR [rbx+72]
  000f4	0f be 4c 38 fc	 movsx	 ecx, BYTE PTR [rax+rdi-4]
  000f9	66 0f 6e c1	 movd	 xmm0, ecx
  000fd	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00100	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00104	f3 41 0f 59 04
	96		 mulss	 xmm0, DWORD PTR [r14+rdx*4]
  0010a	f3 41 0f 11 43
	f8		 movss	 DWORD PTR [r11-8], xmm0
  00110	48 8b 43 50	 mov	 rax, QWORD PTR [rbx+80]
  00114	49 63 54 00 04	 movsxd	 rdx, DWORD PTR [r8+rax+4]
  00119	48 8b 43 48	 mov	 rax, QWORD PTR [rbx+72]
  0011d	0f be 4c 38 fd	 movsx	 ecx, BYTE PTR [rax+rdi-3]
  00122	66 0f 6e c1	 movd	 xmm0, ecx
  00126	4a 8d 0c 1e	 lea	 rcx, QWORD PTR [rsi+r11]
  0012a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0012d	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00131	f3 41 0f 59 04
	96		 mulss	 xmm0, DWORD PTR [r14+rdx*4]
  00137	f3 41 0f 11 43
	fc		 movss	 DWORD PTR [r11-4], xmm0
  0013d	48 8b 43 50	 mov	 rax, QWORD PTR [rbx+80]
  00141	48 63 14 01	 movsxd	 rdx, DWORD PTR [rcx+rax]
  00145	48 8b 43 48	 mov	 rax, QWORD PTR [rbx+72]
  00149	0f be 4c 38 fe	 movsx	 ecx, BYTE PTR [rax+rdi-2]
  0014e	66 0f 6e c1	 movd	 xmm0, ecx
  00152	4b 8d 0c 1f	 lea	 rcx, QWORD PTR [r15+r11]
  00156	4d 8d 5b 10	 lea	 r11, QWORD PTR [r11+16]
  0015a	0f 5b c0	 cvtdq2ps xmm0, xmm0
  0015d	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00161	f3 41 0f 59 04
	96		 mulss	 xmm0, DWORD PTR [r14+rdx*4]
  00167	f3 41 0f 11 43
	f0		 movss	 DWORD PTR [r11-16], xmm0
  0016d	48 8b 43 50	 mov	 rax, QWORD PTR [rbx+80]
  00171	48 63 14 01	 movsxd	 rdx, DWORD PTR [rcx+rax]
  00175	48 8b 43 48	 mov	 rax, QWORD PTR [rbx+72]
  00179	0f be 4c 38 ff	 movsx	 ecx, BYTE PTR [rax+rdi-1]
  0017e	66 0f 6e c1	 movd	 xmm0, ecx
  00182	0f 5b c0	 cvtdq2ps xmm0, xmm0
  00185	f3 0f 59 c1	 mulss	 xmm0, xmm1
  00189	f3 41 0f 59 04
	96		 mulss	 xmm0, DWORD PTR [r14+rdx*4]
  0018f	f3 41 0f 11 43
	f4		 movss	 DWORD PTR [r11-12], xmm0
  00195	49 3b fd	 cmp	 rdi, r13
  00198	0f 8c 42 ff ff
	ff		 jl	 $LL18@get_Q
$LC17@get_Q:
  0019e	4c 8b 7c 24 20	 mov	 r15, QWORD PTR [rsp+32]
  001a3	4c 8b 6c 24 68	 mov	 r13, QWORD PTR [rsp+104]
  001a8	4c 8b 64 24 60	 mov	 r12, QWORD PTR [rsp+96]
  001ad	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
; Line 1467
  001b2	49 3b fa	 cmp	 rdi, r10
  001b5	7d 3d		 jge	 SHORT $LN22@get_Q
  001b7	40 0f be c5	 movsx	 eax, bpl
  001bb	66 0f 6e c8	 movd	 xmm1, eax
  001bf	0f 5b c9	 cvtdq2ps xmm1, xmm1
$LC3@get_Q:
; Line 1468
  001c2	48 8b 4b 50	 mov	 rcx, QWORD PTR [rbx+80]
  001c6	48 ff c7	 inc	 rdi
  001c9	4c 63 44 b9 fc	 movsxd	 r8, DWORD PTR [rcx+rdi*4-4]
  001ce	48 8b 4b 48	 mov	 rcx, QWORD PTR [rbx+72]
  001d2	0f be 54 39 ff	 movsx	 edx, BYTE PTR [rcx+rdi-1]
  001d7	66 0f 6e c2	 movd	 xmm0, edx
  001db	0f 5b c0	 cvtdq2ps xmm0, xmm0
  001de	f3 0f 59 c1	 mulss	 xmm0, xmm1
  001e2	f3 43 0f 59 04
	86		 mulss	 xmm0, DWORD PTR [r14+r8*4]
  001e8	f3 41 0f 11 44
	b9 fc		 movss	 DWORD PTR [r9+rdi*4-4], xmm0
  001ef	49 3b fa	 cmp	 rdi, r10
  001f2	7c ce		 jl	 SHORT $LC3@get_Q
$LN22@get_Q:
; Line 1469
  001f4	49 8b c1	 mov	 rax, r9
; Line 1470
  001f7	48 83 c4 28	 add	 rsp, 40			; 00000028H
  001fb	41 5e		 pop	 r14
  001fd	5f		 pop	 rdi
  001fe	5d		 pop	 rbp
  001ff	5b		 pop	 rbx
  00200	c3		 ret	 0
?get_Q@SVR_Q@@UEBAPEAMHH@Z ENDP				; SVR_Q::get_Q
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?get_QD@SVR_Q@@UEBAPEANXZ
_TEXT	SEGMENT
this$ = 8
?get_QD@SVR_Q@@UEBAPEANXZ PROC				; SVR_Q::get_QD, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 1474
  00000	48 8b 41 70	 mov	 rax, QWORD PTR [rcx+112]
; Line 1475
  00004	c3		 ret	 0
?get_QD@SVR_Q@@UEBAPEANXZ ENDP				; SVR_Q::get_QD
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1SVR_Q@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??1SVR_Q@@UEAA@XZ PROC					; SVR_Q::~SVR_Q, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 1478
$LN22:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000a	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
  00013	48 89 5c 24 48	 mov	 QWORD PTR [rsp+72], rbx
  00018	48 89 6c 24 50	 mov	 QWORD PTR [rsp+80], rbp
  0001d	48 89 74 24 58	 mov	 QWORD PTR [rsp+88], rsi
  00022	48 8b f9	 mov	 rdi, rcx
  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7SVR_Q@@6B@
  0002c	48 89 01	 mov	 QWORD PTR [rcx], rax
; Line 1479
  0002f	48 8b 71 40	 mov	 rsi, QWORD PTR [rcx+64]
  00033	48 85 f6	 test	 rsi, rsi
  00036	74 33		 je	 SHORT $LN6@SVR_Q
; Line 106
  00038	48 8b 5e 18	 mov	 rbx, QWORD PTR [rsi+24]
  0003c	48 8d 6e 10	 lea	 rbp, QWORD PTR [rsi+16]
  00040	48 3b dd	 cmp	 rbx, rbp
  00043	74 13		 je	 SHORT $LN9@SVR_Q
$LL11@SVR_Q:
; Line 107
  00045	48 8b 4b 10	 mov	 rcx, QWORD PTR [rbx+16]
  00049	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
; Line 106
  0004f	48 8b 5b 08	 mov	 rbx, QWORD PTR [rbx+8]
  00053	48 3b dd	 cmp	 rbx, rbp
  00056	75 ed		 jne	 SHORT $LL11@SVR_Q
$LN9@SVR_Q:
; Line 108
  00058	48 8b 4e 08	 mov	 rcx, QWORD PTR [rsi+8]
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  00062	48 8b ce	 mov	 rcx, rsi
  00065	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??3@YAXPEAX@Z
$LN6@SVR_Q:
; Line 1480
  0006b	48 8b 4f 48	 mov	 rcx, QWORD PTR [rdi+72]
  0006f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??3@YAXPEAX@Z
; Line 1481
  00075	48 8b 4f 50	 mov	 rcx, QWORD PTR [rdi+80]
  00079	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??3@YAXPEAX@Z
; Line 1482
  0007f	48 8b 4f 60	 mov	 rcx, QWORD PTR [rdi+96]
  00083	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??3@YAXPEAX@Z
; Line 1483
  00089	48 8b 4f 68	 mov	 rcx, QWORD PTR [rdi+104]
  0008d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??3@YAXPEAX@Z
; Line 1484
  00093	48 8b 4f 70	 mov	 rcx, QWORD PTR [rdi+112]
  00097	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??3@YAXPEAX@Z
  0009d	90		 npad	 1
; Line 310
  0009e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7Kernel@@6B@
  000a5	48 89 07	 mov	 QWORD PTR [rdi], rax
; Line 311
  000a8	48 8b 4f 10	 mov	 rcx, QWORD PTR [rdi+16]
  000ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??3@YAXPEAX@Z
; Line 312
  000b2	48 8b 4f 18	 mov	 rcx, QWORD PTR [rdi+24]
  000b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??3@YAXPEAX@Z
; Line 200
  000bc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_7QMatrix@@6B@
  000c3	48 89 07	 mov	 QWORD PTR [rdi], rax
; Line 1485
  000c6	48 8b 5c 24 48	 mov	 rbx, QWORD PTR [rsp+72]
  000cb	48 8b 6c 24 50	 mov	 rbp, QWORD PTR [rsp+80]
  000d0	48 8b 74 24 58	 mov	 rsi, QWORD PTR [rsp+88]
  000d5	48 83 c4 30	 add	 rsp, 48			; 00000030H
  000d9	5f		 pop	 rdi
  000da	c3		 ret	 0
??1SVR_Q@@UEAA@XZ ENDP					; SVR_Q::~SVR_Q
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
?dtor$0@?0???1SVR_Q@@UEAA@XZ@4HA PROC			; `SVR_Q::~SVR_Q'::`1'::dtor$0
  00000	48 8b 8a 40 00
	00 00		 mov	 rcx, QWORD PTR this$[rdx]
  00007	e9 00 00 00 00	 jmp	 ??1Kernel@@UEAA@XZ	; Kernel::~Kernel
?dtor$0@?0???1SVR_Q@@UEAA@XZ@4HA ENDP			; `SVR_Q::~SVR_Q'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??_GSVR_Q@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GSVR_Q@@UEAAPEAXI@Z PROC				; SVR_Q::`scalar deleting destructor', COMDAT
$LN6:
  00000	48 89 5c 24 08	 mov	 QWORD PTR [rsp+8], rbx
  00005	57		 push	 rdi
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	8b da		 mov	 ebx, edx
  0000c	48 8b f9	 mov	 rdi, rcx
  0000f	e8 00 00 00 00	 call	 ??1SVR_Q@@UEAA@XZ	; SVR_Q::~SVR_Q
  00014	f6 c3 01	 test	 bl, 1
  00017	74 09		 je	 SHORT $LN4@scalar
  00019	48 8b cf	 mov	 rcx, rdi
  0001c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??3@YAXPEAX@Z
$LN4@scalar:
  00022	48 8b c7	 mov	 rax, rdi
  00025	48 8b 5c 24 30	 mov	 rbx, QWORD PTR [rsp+48]
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5f		 pop	 rdi
  0002f	c3		 ret	 0
??_GSVR_Q@@UEAAPEAXI@Z ENDP				; SVR_Q::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$swap@H@@YAXAEAH0@Z
_TEXT	SEGMENT
x$ = 8
y$ = 16
??$swap@H@@YAXAEAH0@Z PROC				; swap<int>, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 21
  00000	8b 02		 mov	 eax, DWORD PTR [rdx]
  00002	44 8b 01	 mov	 r8d, DWORD PTR [rcx]
  00005	89 01		 mov	 DWORD PTR [rcx], eax
  00007	44 89 02	 mov	 DWORD PTR [rdx], r8d
  0000a	c3		 ret	 0
??$swap@H@@YAXAEAH0@Z ENDP				; swap<int>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$swap@PEAM@@YAXAEAPEAM0@Z
_TEXT	SEGMENT
x$ = 8
y$ = 16
??$swap@PEAM@@YAXAEAPEAM0@Z PROC			; swap<float * __ptr64>, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 21
  00000	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00003	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  00006	48 89 01	 mov	 QWORD PTR [rcx], rax
  00009	4c 89 02	 mov	 QWORD PTR [rdx], r8
  0000c	c3		 ret	 0
??$swap@PEAM@@YAXAEAPEAM0@Z ENDP			; swap<float * __ptr64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$swap@M@@YAXAEAM0@Z
_TEXT	SEGMENT
x$ = 8
y$ = 16
??$swap@M@@YAXAEAM0@Z PROC				; swap<float>, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 21
  00000	8b 02		 mov	 eax, DWORD PTR [rdx]
  00002	f3 0f 10 01	 movss	 xmm0, DWORD PTR [rcx]
  00006	89 01		 mov	 DWORD PTR [rcx], eax
  00008	f3 0f 11 02	 movss	 DWORD PTR [rdx], xmm0
  0000c	c3		 ret	 0
??$swap@M@@YAXAEAM0@Z ENDP				; swap<float>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$swap@Usvm_node@@@@YAXAEAUsvm_node@@0@Z
_TEXT	SEGMENT
x$ = 8
y$ = 16
??$swap@Usvm_node@@@@YAXAEAUsvm_node@@0@Z PROC		; swap<svm_node>, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 21
  00000	0f 10 02	 movups	 xmm0, XMMWORD PTR [rdx]
  00003	0f 10 09	 movups	 xmm1, XMMWORD PTR [rcx]
  00006	0f 11 01	 movups	 XMMWORD PTR [rcx], xmm0
  00009	0f 11 0a	 movups	 XMMWORD PTR [rdx], xmm1
  0000c	c3		 ret	 0
??$swap@Usvm_node@@@@YAXAEAUsvm_node@@0@Z ENDP		; swap<svm_node>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$swap@N@@YAXAEAN0@Z
_TEXT	SEGMENT
x$ = 8
y$ = 16
??$swap@N@@YAXAEAN0@Z PROC				; swap<double>, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 21
  00000	48 8b 02	 mov	 rax, QWORD PTR [rdx]
  00003	f2 0f 10 01	 movsdx	 xmm0, QWORD PTR [rcx]
  00007	48 89 01	 mov	 QWORD PTR [rcx], rax
  0000a	f2 0f 11 02	 movsdx	 QWORD PTR [rdx], xmm0
  0000e	c3		 ret	 0
??$swap@N@@YAXAEAN0@Z ENDP				; swap<double>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$min@H@@YAHHH@Z
_TEXT	SEGMENT
x$ = 8
y$ = 16
??$min@H@@YAHHH@Z PROC					; min<int>, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 16
  00000	3b ca		 cmp	 ecx, edx
  00002	0f 4c d1	 cmovl	 edx, ecx
  00005	8b c2		 mov	 eax, edx
  00007	c3		 ret	 0
??$min@H@@YAHHH@Z ENDP					; min<int>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$swap@C@@YAXAEAC0@Z
_TEXT	SEGMENT
x$ = 8
y$ = 16
??$swap@C@@YAXAEAC0@Z PROC				; swap<signed char>, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 21
  00000	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00003	44 0f b6 01	 movzx	 r8d, BYTE PTR [rcx]
  00007	88 01		 mov	 BYTE PTR [rcx], al
  00009	44 88 02	 mov	 BYTE PTR [rdx], r8b
  0000c	c3		 ret	 0
??$swap@C@@YAXAEAC0@Z ENDP				; swap<signed char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$swap@D@@YAXAEAD0@Z
_TEXT	SEGMENT
x$ = 8
y$ = 16
??$swap@D@@YAXAEAD0@Z PROC				; swap<char>, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 21
  00000	0f b6 02	 movzx	 eax, BYTE PTR [rdx]
  00003	44 0f b6 01	 movzx	 r8d, BYTE PTR [rcx]
  00007	88 01		 mov	 BYTE PTR [rcx], al
  00009	44 88 02	 mov	 BYTE PTR [rdx], r8b
  0000c	c3		 ret	 0
??$swap@D@@YAXAEAD0@Z ENDP				; swap<char>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$min@N@@YANNN@Z
_TEXT	SEGMENT
x$ = 8
y$ = 16
??$min@N@@YANNN@Z PROC					; min<double>, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 16
  00000	66 0f 2f c8	 comisd	 xmm1, xmm0
  00004	77 03		 ja	 SHORT $LN4@min
  00006	0f 28 c1	 movaps	 xmm0, xmm1
$LN4@min:
  00009	c3		 ret	 0
??$min@N@@YANNN@Z ENDP					; min<double>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$max@N@@YANNN@Z
_TEXT	SEGMENT
x$ = 8
y$ = 16
??$max@N@@YANNN@Z PROC					; max<double>, COMDAT
; File c:\research\libsvmsharp-master\cuda-master\src\windows\libsvm_train_dense_gpu\svm.cpp
; Line 19
  00000	66 0f 2f c1	 comisd	 xmm0, xmm1
  00004	77 03		 ja	 SHORT $LN4@max
  00006	0f 28 c1	 movaps	 xmm0, xmm1
$LN4@max:
  00009	c3		 ret	 0
??$max@N@@YANNN@Z ENDP					; max<double>
_TEXT	ENDS
END
